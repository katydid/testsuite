// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: knot.proto

package main

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Knot struct {
	Bight                []*BightKnot `protobuf:"bytes,1,rep,name=Bight" json:"Bight,omitempty"`
	Elbow                *bool        `protobuf:"varint,2,opt,name=Elbow" json:"Elbow,omitempty"`
	BitterEnd            *Knot        `protobuf:"bytes,3,opt,name=BitterEnd" json:"BitterEnd,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Knot) Reset()         { *m = Knot{} }
func (m *Knot) String() string { return proto.CompactTextString(m) }
func (*Knot) ProtoMessage()    {}
func (*Knot) Descriptor() ([]byte, []int) {
	return fileDescriptor_knot_f362cdae4cc05f8d, []int{0}
}
func (m *Knot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Knot.Unmarshal(m, b)
}
func (m *Knot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Knot.Marshal(b, m, deterministic)
}
func (dst *Knot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Knot.Merge(dst, src)
}
func (m *Knot) XXX_Size() int {
	return xxx_messageInfo_Knot.Size(m)
}
func (m *Knot) XXX_DiscardUnknown() {
	xxx_messageInfo_Knot.DiscardUnknown(m)
}

var xxx_messageInfo_Knot proto.InternalMessageInfo

func (m *Knot) GetBight() []*BightKnot {
	if m != nil {
		return m.Bight
	}
	return nil
}

func (m *Knot) GetElbow() bool {
	if m != nil && m.Elbow != nil {
		return *m.Elbow
	}
	return false
}

func (m *Knot) GetBitterEnd() *Knot {
	if m != nil {
		return m.BitterEnd
	}
	return nil
}

type BightKnot struct {
	Loop                 *Knot    `protobuf:"bytes,1,opt,name=Loop" json:"Loop,omitempty"`
	Turn                 *bool    `protobuf:"varint,2,opt,name=Turn" json:"Turn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BightKnot) Reset()         { *m = BightKnot{} }
func (m *BightKnot) String() string { return proto.CompactTextString(m) }
func (*BightKnot) ProtoMessage()    {}
func (*BightKnot) Descriptor() ([]byte, []int) {
	return fileDescriptor_knot_f362cdae4cc05f8d, []int{1}
}
func (m *BightKnot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BightKnot.Unmarshal(m, b)
}
func (m *BightKnot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BightKnot.Marshal(b, m, deterministic)
}
func (dst *BightKnot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BightKnot.Merge(dst, src)
}
func (m *BightKnot) XXX_Size() int {
	return xxx_messageInfo_BightKnot.Size(m)
}
func (m *BightKnot) XXX_DiscardUnknown() {
	xxx_messageInfo_BightKnot.DiscardUnknown(m)
}

var xxx_messageInfo_BightKnot proto.InternalMessageInfo

func (m *BightKnot) GetLoop() *Knot {
	if m != nil {
		return m.Loop
	}
	return nil
}

func (m *BightKnot) GetTurn() bool {
	if m != nil && m.Turn != nil {
		return *m.Turn
	}
	return false
}

func init() {
	proto.RegisterType((*Knot)(nil), "main.Knot")
	proto.RegisterType((*BightKnot)(nil), "main.BightKnot")
}
func (this *Knot) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return KnotDescription()
}
func (this *BightKnot) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return KnotDescription()
}
func KnotDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3847 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x5b, 0x70, 0xe3, 0xd6,
		0x79, 0x36, 0x6f, 0x12, 0xf9, 0x93, 0xa2, 0xa0, 0x23, 0x79, 0x97, 0x2b, 0xc7, 0x7b, 0xa1, 0xed,
		0x58, 0x5e, 0x37, 0xda, 0xcc, 0xda, 0xbb, 0xf6, 0x72, 0x9b, 0x6c, 0x29, 0x0a, 0xab, 0xd0, 0x91,
		0x44, 0x06, 0x94, 0xe2, 0x4b, 0xa6, 0x83, 0x81, 0xc0, 0x43, 0x0a, 0xbb, 0x20, 0x80, 0x00, 0xe0,
		0xae, 0xb5, 0xd3, 0x07, 0x77, 0xdc, 0xcb, 0x64, 0x3a, 0xbd, 0x77, 0xa6, 0x89, 0xeb, 0xb8, 0x4d,
		0x3a, 0xad, 0xdb, 0xf4, 0x96, 0x34, 0x6d, 0xda, 0xa4, 0x2f, 0x7d, 0x49, 0xdb, 0xa7, 0xce, 0xe4,
		0xbd, 0x0f, 0xbd, 0xb8, 0xd3, 0x9b, 0xdb, 0xa4, 0xad, 0x1f, 0x3a, 0xb3, 0x2f, 0x9d, 0x73, 0x03,
		0x01, 0x90, 0x5a, 0x40, 0x99, 0xb1, 0xf3, 0x24, 0xe2, 0x3f, 0xff, 0xf7, 0xe1, 0x3f, 0xff, 0xf9,
		0xcf, 0xff, 0xff, 0xe7, 0x40, 0xf0, 0xdd, 0x6b, 0x70, 0x7e, 0x68, 0xdb, 0x43, 0x13, 0x5f, 0x72,
		0x5c, 0xdb, 0xb7, 0x0f, 0xc6, 0x83, 0x4b, 0x7d, 0xec, 0xe9, 0xae, 0xe1, 0xf8, 0xb6, 0xbb, 0x4e,
		0x65, 0x68, 0x91, 0x69, 0xac, 0x0b, 0x8d, 0xfa, 0x0e, 0x2c, 0xdd, 0x34, 0x4c, 0xbc, 0x19, 0x28,
		0xf6, 0xb0, 0x8f, 0x9e, 0x87, 0xfc, 0xc0, 0x30, 0x71, 0x2d, 0x73, 0x3e, 0xb7, 0x56, 0xbe, 0xfc,
		0xf8, 0x7a, 0x0c, 0xb4, 0x1e, 0x45, 0x74, 0x89, 0x58, 0xa1, 0x88, 0xfa, 0x3b, 0x79, 0x58, 0x9e,
		0x31, 0x8a, 0x10, 0xe4, 0x2d, 0x6d, 0x44, 0x18, 0x33, 0x6b, 0x25, 0x85, 0xfe, 0x46, 0x35, 0x98,
		0x77, 0x34, 0xfd, 0xb6, 0x36, 0xc4, 0xb5, 0x2c, 0x15, 0x8b, 0x47, 0x74, 0x16, 0xa0, 0x8f, 0x1d,
		0x6c, 0xf5, 0xb1, 0xa5, 0x1f, 0xd5, 0x72, 0xe7, 0x73, 0x6b, 0x25, 0x25, 0x24, 0x41, 0x4f, 0xc3,
		0x92, 0x33, 0x3e, 0x30, 0x0d, 0x5d, 0x0d, 0xa9, 0xc1, 0xf9, 0xdc, 0x5a, 0x41, 0x91, 0xd8, 0xc0,
		0xe6, 0x44, 0xf9, 0x49, 0x58, 0xbc, 0x8b, 0xb5, 0xdb, 0x61, 0xd5, 0x32, 0x55, 0xad, 0x12, 0x71,
		0x48, 0xb1, 0x05, 0x95, 0x11, 0xf6, 0x3c, 0x6d, 0x88, 0x55, 0xff, 0xc8, 0xc1, 0xb5, 0x3c, 0x9d,
		0xfd, 0xf9, 0xa9, 0xd9, 0xc7, 0x67, 0x5e, 0xe6, 0xa8, 0xbd, 0x23, 0x07, 0xa3, 0x26, 0x94, 0xb0,
		0x35, 0x1e, 0x31, 0x86, 0xc2, 0x31, 0xfe, 0x93, 0xad, 0xf1, 0x28, 0xce, 0x52, 0x24, 0x30, 0x4e,
		0x31, 0xef, 0x61, 0xf7, 0x8e, 0xa1, 0xe3, 0xda, 0x1c, 0x25, 0x78, 0x72, 0x8a, 0xa0, 0xc7, 0xc6,
		0xe3, 0x1c, 0x02, 0x87, 0x5a, 0x50, 0xc2, 0xaf, 0xfa, 0xd8, 0xf2, 0x0c, 0xdb, 0xaa, 0xcd, 0x53,
		0x92, 0x27, 0x66, 0xac, 0x22, 0x36, 0xfb, 0x71, 0x8a, 0x09, 0x0e, 0x5d, 0x85, 0x79, 0xdb, 0xf1,
		0x0d, 0xdb, 0xf2, 0x6a, 0xc5, 0xf3, 0x99, 0xb5, 0xf2, 0xe5, 0x0f, 0xcd, 0x0c, 0x84, 0x0e, 0xd3,
		0x51, 0x84, 0x32, 0x6a, 0x83, 0xe4, 0xd9, 0x63, 0x57, 0xc7, 0xaa, 0x6e, 0xf7, 0xb1, 0x6a, 0x58,
		0x03, 0xbb, 0x56, 0xa2, 0x04, 0xe7, 0xa6, 0x27, 0x42, 0x15, 0x5b, 0x76, 0x1f, 0xb7, 0xad, 0x81,
		0xad, 0x54, 0xbd, 0xc8, 0x33, 0x3a, 0x05, 0x73, 0xde, 0x91, 0xe5, 0x6b, 0xaf, 0xd6, 0x2a, 0x34,
		0x42, 0xf8, 0x53, 0xfd, 0x9b, 0x73, 0xb0, 0x98, 0x26, 0xc4, 0xae, 0x43, 0x61, 0x40, 0x66, 0x59,
		0xcb, 0x9e, 0xc4, 0x07, 0x0c, 0x13, 0x75, 0xe2, 0xdc, 0xf7, 0xe9, 0xc4, 0x26, 0x94, 0x2d, 0xec,
		0xf9, 0xb8, 0xcf, 0x22, 0x22, 0x97, 0x32, 0xa6, 0x80, 0x81, 0xa6, 0x43, 0x2a, 0xff, 0x7d, 0x85,
		0xd4, 0x4b, 0xb0, 0x18, 0x98, 0xa4, 0xba, 0x9a, 0x35, 0x14, 0xb1, 0x79, 0x29, 0xc9, 0x92, 0x75,
		0x59, 0xe0, 0x14, 0x02, 0x53, 0xaa, 0x38, 0xf2, 0x8c, 0x36, 0x01, 0x6c, 0x0b, 0xdb, 0x03, 0xb5,
		0x8f, 0x75, 0xb3, 0x56, 0x3c, 0xc6, 0x4b, 0x1d, 0xa2, 0x32, 0xe5, 0x25, 0x9b, 0x49, 0x75, 0x13,
		0x5d, 0x9b, 0x84, 0xda, 0xfc, 0x31, 0x91, 0xb2, 0xc3, 0x36, 0xd9, 0x54, 0xb4, 0xed, 0x43, 0xd5,
		0xc5, 0x24, 0xee, 0x71, 0x9f, 0xcf, 0xac, 0x44, 0x8d, 0x58, 0x4f, 0x9c, 0x99, 0xc2, 0x61, 0x6c,
		0x62, 0x0b, 0x6e, 0xf8, 0x11, 0x3d, 0x06, 0x81, 0x40, 0xa5, 0x61, 0x05, 0x34, 0x0b, 0x55, 0x84,
		0x70, 0x57, 0x1b, 0xe1, 0xd5, 0x7b, 0x50, 0x8d, 0xba, 0x07, 0xad, 0x40, 0xc1, 0xf3, 0x35, 0xd7,
		0xa7, 0x51, 0x58, 0x50, 0xd8, 0x03, 0x92, 0x20, 0x87, 0xad, 0x3e, 0xcd, 0x72, 0x05, 0x85, 0xfc,
		0x44, 0x3f, 0x32, 0x99, 0x70, 0x8e, 0x4e, 0xf8, 0xc3, 0xd3, 0x2b, 0x1a, 0x61, 0x8e, 0xcf, 0x7b,
		0xf5, 0x39, 0x58, 0x88, 0x4c, 0x20, 0xed, 0xab, 0xeb, 0x3f, 0x06, 0x0f, 0xcf, 0xa4, 0x46, 0x2f,
		0xc1, 0xca, 0xd8, 0x32, 0x2c, 0x1f, 0xbb, 0x8e, 0x8b, 0x49, 0xc4, 0xb2, 0x57, 0xd5, 0xfe, 0x65,
		0xfe, 0x98, 0x98, 0xdb, 0x0f, 0x6b, 0x33, 0x16, 0x65, 0x79, 0x3c, 0x2d, 0xbc, 0x58, 0x2a, 0xfe,
		0xeb, 0xbc, 0xf4, 0xda, 0x6b, 0xaf, 0xbd, 0x96, 0xad, 0x7f, 0x7e, 0x0e, 0x56, 0x66, 0xed, 0x99,
		0x99, 0xdb, 0xf7, 0x14, 0xcc, 0x59, 0xe3, 0xd1, 0x01, 0x76, 0xa9, 0x93, 0x0a, 0x0a, 0x7f, 0x42,
		0x4d, 0x28, 0x98, 0xda, 0x01, 0x36, 0x6b, 0xf9, 0xf3, 0x99, 0xb5, 0xea, 0xe5, 0xa7, 0x53, 0xed,
		0xca, 0xf5, 0x6d, 0x02, 0x51, 0x18, 0x12, 0x7d, 0x1c, 0xf2, 0x3c, 0x45, 0x13, 0x86, 0x8b, 0xe9,
		0x18, 0xc8, 0x5e, 0x52, 0x28, 0x0e, 0x3d, 0x02, 0x25, 0xf2, 0x97, 0xc5, 0xc6, 0x1c, 0xb5, 0xb9,
		0x48, 0x04, 0x24, 0x2e, 0xd0, 0x2a, 0x14, 0xe9, 0x36, 0xe9, 0x63, 0x51, 0xda, 0x82, 0x67, 0x12,
		0x58, 0x7d, 0x3c, 0xd0, 0xc6, 0xa6, 0xaf, 0xde, 0xd1, 0xcc, 0x31, 0xa6, 0x01, 0x5f, 0x52, 0x2a,
		0x5c, 0xf8, 0x69, 0x22, 0x43, 0xe7, 0xa0, 0xcc, 0x76, 0x95, 0x61, 0xf5, 0xf1, 0xab, 0x34, 0x7b,
		0x16, 0x14, 0xb6, 0xd1, 0xda, 0x44, 0x42, 0x5e, 0x7f, 0xcb, 0xb3, 0x2d, 0x11, 0x9a, 0xf4, 0x15,
		0x44, 0x40, 0x5f, 0xff, 0x5c, 0x3c, 0x71, 0x3f, 0x3a, 0x7b, 0x7a, 0xf1, 0x98, 0xaa, 0x7f, 0x23,
		0x0b, 0x79, 0x9a, 0x2f, 0x16, 0xa1, 0xbc, 0xf7, 0x72, 0x57, 0x56, 0x37, 0x3b, 0xfb, 0x1b, 0xdb,
		0xb2, 0x94, 0x41, 0x55, 0x00, 0x2a, 0xb8, 0xb9, 0xdd, 0x69, 0xee, 0x49, 0xd9, 0xe0, 0xb9, 0xbd,
		0xbb, 0x77, 0xf5, 0x59, 0x29, 0x17, 0x00, 0xf6, 0x99, 0x20, 0x1f, 0x56, 0x78, 0xe6, 0xb2, 0x54,
		0x40, 0x12, 0x54, 0x18, 0x41, 0xfb, 0x25, 0x79, 0xf3, 0xea, 0xb3, 0xd2, 0x5c, 0x54, 0xf2, 0xcc,
		0x65, 0x69, 0x1e, 0x2d, 0x40, 0x89, 0x4a, 0x36, 0x3a, 0x9d, 0x6d, 0xa9, 0x18, 0x70, 0xf6, 0xf6,
		0x94, 0xf6, 0xee, 0x96, 0x54, 0x0a, 0x38, 0xb7, 0x94, 0xce, 0x7e, 0x57, 0x82, 0x80, 0x61, 0x47,
		0xee, 0xf5, 0x9a, 0x5b, 0xb2, 0x54, 0x0e, 0x34, 0x36, 0x5e, 0xde, 0x93, 0x7b, 0x52, 0x25, 0x62,
		0xd6, 0x33, 0x97, 0xa5, 0x85, 0xe0, 0x15, 0xf2, 0xee, 0xfe, 0x8e, 0x54, 0x45, 0x4b, 0xb0, 0xc0,
		0x5e, 0x21, 0x8c, 0x58, 0x8c, 0x89, 0xae, 0x3e, 0x2b, 0x49, 0x13, 0x43, 0x18, 0xcb, 0x52, 0x44,
		0x70, 0xf5, 0x59, 0x09, 0xd5, 0x5b, 0x50, 0xa0, 0xd1, 0x85, 0x10, 0x54, 0xb7, 0x9b, 0x1b, 0xf2,
		0xb6, 0xda, 0xe9, 0xee, 0xb5, 0x3b, 0xbb, 0xcd, 0x6d, 0x29, 0x33, 0x91, 0x29, 0xf2, 0xa7, 0xf6,
		0xdb, 0x8a, 0xbc, 0x29, 0x65, 0xc3, 0xb2, 0xae, 0xdc, 0xdc, 0x93, 0x37, 0xa5, 0x5c, 0x5d, 0x87,
		0x95, 0x59, 0x79, 0x72, 0xe6, 0xce, 0x08, 0x2d, 0x71, 0xf6, 0x98, 0x25, 0xa6, 0x5c, 0x53, 0x4b,
		0xfc, 0x4f, 0x59, 0x58, 0x9e, 0x51, 0x2b, 0x66, 0xbe, 0xe4, 0x06, 0x14, 0x58, 0x88, 0xb2, 0xea,
		0xf9, 0xd4, 0xcc, 0xa2, 0x43, 0x03, 0x76, 0xaa, 0x82, 0x52, 0x5c, 0xb8, 0x83, 0xc8, 0x1d, 0xd3,
		0x41, 0x10, 0x8a, 0xa9, 0x9c, 0xfe, 0xa3, 0x53, 0x39, 0x9d, 0x95, 0xbd, 0xab, 0x69, 0xca, 0x1e,
		0x95, 0x9d, 0x2c, 0xb7, 0x17, 0x66, 0xe4, 0xf6, 0xeb, 0xb0, 0x34, 0x45, 0x94, 0x3a, 0xc7, 0xbe,
		0x9e, 0x81, 0xda, 0x71, 0xce, 0x49, 0xc8, 0x74, 0xd9, 0x48, 0xa6, 0xbb, 0x1e, 0xf7, 0xe0, 0x85,
		0xe3, 0x17, 0x61, 0x6a, 0xad, 0xdf, 0xce, 0xc0, 0xa9, 0xd9, 0x9d, 0xe2, 0x4c, 0x1b, 0x3e, 0x0e,
		0x73, 0x23, 0xec, 0x1f, 0xda, 0xa2, 0x5b, 0xfa, 0xf0, 0x8c, 0x1a, 0x4c, 0x86, 0xe3, 0x8b, 0xcd,
		0x51, 0xe1, 0x22, 0x9e, 0x3b, 0xae, 0xdd, 0x63, 0xd6, 0x4c, 0x59, 0xfa, 0xb9, 0x2c, 0x3c, 0x3c,
		0x93, 0x7c, 0xa6, 0xa1, 0x8f, 0x02, 0x18, 0x96, 0x33, 0xf6, 0x59, 0x47, 0xc4, 0x12, 0x6c, 0x89,
		0x4a, 0x68, 0xf2, 0x22, 0xc9, 0x73, 0xec, 0x07, 0xe3, 0x39, 0x3a, 0x0e, 0x4c, 0x44, 0x15, 0x9e,
		0x9f, 0x18, 0x9a, 0xa7, 0x86, 0x9e, 0x3d, 0x66, 0xa6, 0x53, 0x81, 0xf9, 0x51, 0x90, 0x74, 0xd3,
		0xc0, 0x96, 0xaf, 0x7a, 0xbe, 0x8b, 0xb5, 0x91, 0x61, 0x0d, 0x69, 0x05, 0x29, 0x36, 0x0a, 0x03,
		0xcd, 0xf4, 0xb0, 0xb2, 0xc8, 0x86, 0x7b, 0x62, 0x94, 0x20, 0x68, 0x00, 0xb9, 0x21, 0xc4, 0x5c,
		0x04, 0xc1, 0x86, 0x03, 0x44, 0xfd, 0xeb, 0x45, 0x28, 0x87, 0xfa, 0x6a, 0x74, 0x01, 0x2a, 0xb7,
		0xb4, 0x3b, 0x9a, 0x2a, 0xce, 0x4a, 0xcc, 0x13, 0x65, 0x22, 0xeb, 0xf2, 0xf3, 0xd2, 0x47, 0x61,
		0x85, 0xaa, 0xd8, 0x63, 0x1f, 0xbb, 0xaa, 0x6e, 0x6a, 0x9e, 0x47, 0x9d, 0x56, 0xa4, 0xaa, 0x88,
		0x8c, 0x75, 0xc8, 0x50, 0x4b, 0x8c, 0xa0, 0x2b, 0xb0, 0x4c, 0x11, 0xa3, 0xb1, 0xe9, 0x1b, 0x8e,
		0x89, 0x55, 0x72, 0x7a, 0xf3, 0x68, 0x25, 0x09, 0x2c, 0x5b, 0x22, 0x1a, 0x3b, 0x5c, 0x81, 0x58,
		0xe4, 0xa1, 0x4d, 0x78, 0x94, 0xc2, 0x86, 0xd8, 0xc2, 0xae, 0xe6, 0x63, 0x15, 0x7f, 0x76, 0xac,
		0x99, 0x9e, 0xaa, 0x59, 0x7d, 0xf5, 0x50, 0xf3, 0x0e, 0x6b, 0x2b, 0x84, 0x60, 0x23, 0x5b, 0xcb,
		0x28, 0x67, 0x88, 0xe2, 0x16, 0xd7, 0x93, 0xa9, 0x5a, 0xd3, 0xea, 0x7f, 0x42, 0xf3, 0x0e, 0x51,
		0x03, 0x4e, 0x51, 0x16, 0xcf, 0x77, 0x0d, 0x6b, 0xa8, 0xea, 0x87, 0x58, 0xbf, 0xad, 0x8e, 0xfd,
		0xc1, 0xf3, 0xb5, 0x47, 0xc2, 0xef, 0xa7, 0x16, 0xf6, 0xa8, 0x4e, 0x8b, 0xa8, 0xec, 0xfb, 0x83,
		0xe7, 0x51, 0x0f, 0x2a, 0x64, 0x31, 0x46, 0xc6, 0x3d, 0xac, 0x0e, 0x6c, 0x97, 0x96, 0xc6, 0xea,
		0x8c, 0xd4, 0x14, 0xf2, 0xe0, 0x7a, 0x87, 0x03, 0x76, 0xec, 0x3e, 0x6e, 0x14, 0x7a, 0x5d, 0x59,
		0xde, 0x54, 0xca, 0x82, 0xe5, 0xa6, 0xed, 0x92, 0x80, 0x1a, 0xda, 0x81, 0x83, 0xcb, 0x2c, 0xa0,
		0x86, 0xb6, 0x70, 0xef, 0x15, 0x58, 0xd6, 0x75, 0x36, 0x67, 0x43, 0x57, 0xf9, 0x19, 0xcb, 0xab,
		0x49, 0x11, 0x67, 0xe9, 0xfa, 0x16, 0x53, 0xe0, 0x31, 0xee, 0xa1, 0x6b, 0xf0, 0xf0, 0xc4, 0x59,
		0x61, 0xe0, 0xd2, 0xd4, 0x2c, 0xe3, 0xd0, 0x2b, 0xb0, 0xec, 0x1c, 0x4d, 0x03, 0x51, 0xe4, 0x8d,
		0xce, 0x51, 0x1c, 0xf6, 0x1c, 0xac, 0x38, 0x87, 0xce, 0x34, 0xee, 0x62, 0x18, 0x87, 0x9c, 0x43,
		0x27, 0x0e, 0x7c, 0x82, 0x1e, 0xb8, 0x5d, 0xac, 0x6b, 0x3e, 0xee, 0xd7, 0x4e, 0x87, 0xd5, 0x43,
		0x03, 0xe8, 0x12, 0x48, 0xba, 0xae, 0x62, 0x4b, 0x3b, 0x30, 0xb1, 0xaa, 0xb9, 0xd8, 0xd2, 0xbc,
		0xda, 0xb9, 0xb0, 0x72, 0x55, 0xd7, 0x65, 0x3a, 0xda, 0xa4, 0x83, 0xe8, 0x22, 0x2c, 0xd9, 0x07,
		0xb7, 0x74, 0x16, 0x92, 0xaa, 0xe3, 0xe2, 0x81, 0xf1, 0x6a, 0xed, 0x71, 0xea, 0xdf, 0x45, 0x32,
		0x40, 0x03, 0xb2, 0x4b, 0xc5, 0xe8, 0x29, 0x90, 0x74, 0xef, 0x50, 0x73, 0x1d, 0x9a, 0x93, 0x3d,
		0x47, 0xd3, 0x71, 0xed, 0x09, 0xa6, 0xca, 0xe4, 0xbb, 0x42, 0x4c, 0xb6, 0x84, 0x77, 0xd7, 0x18,
		0xf8, 0x82, 0xf1, 0x49, 0xb6, 0x25, 0xa8, 0x8c, 0xb3, 0xad, 0x81, 0x44, 0x5c, 0x11, 0x79, 0xf1,
		0x1a, 0x55, 0xab, 0x3a, 0x87, 0x4e, 0xf8, 0xbd, 0x8f, 0xc1, 0x02, 0xd1, 0x9c, 0xbc, 0xf4, 0x29,
		0xd6, 0x90, 0x39, 0x87, 0xa1, 0x37, 0xbe, 0x6f, 0xbd, 0x71, 0xbd, 0x01, 0x95, 0x70, 0x7c, 0xa2,
		0x12, 0xb0, 0x08, 0x95, 0x32, 0xa4, 0x59, 0x69, 0x75, 0x36, 0x49, 0x9b, 0xf1, 0x8a, 0x2c, 0x65,
		0x49, 0xbb, 0xb3, 0xdd, 0xde, 0x93, 0x55, 0x65, 0x7f, 0x77, 0xaf, 0xbd, 0x23, 0x4b, 0xb9, 0x70,
		0x5f, 0xfd, 0xed, 0x2c, 0x54, 0xa3, 0x47, 0x24, 0xf4, 0xc3, 0x70, 0x5a, 0xdc, 0x67, 0x78, 0xd8,
		0x57, 0xef, 0x1a, 0x2e, 0xdd, 0x32, 0x23, 0x8d, 0x95, 0xaf, 0x60, 0xd1, 0x56, 0xb8, 0x56, 0x0f,
		0xfb, 0x2f, 0x1a, 0x2e, 0xd9, 0x10, 0x23, 0xcd, 0x47, 0xdb, 0x70, 0xce, 0xb2, 0x55, 0xcf, 0xd7,
		0xac, 0xbe, 0xe6, 0xf6, 0xd5, 0xc9, 0x4d, 0x92, 0xaa, 0xe9, 0x3a, 0xf6, 0x3c, 0x9b, 0x95, 0xaa,
		0x80, 0xe5, 0x43, 0x96, 0xdd, 0xe3, 0xca, 0x93, 0x1c, 0xde, 0xe4, 0xaa, 0xb1, 0x00, 0xcb, 0x1d,
		0x17, 0x60, 0x8f, 0x40, 0x69, 0xa4, 0x39, 0x2a, 0xb6, 0x7c, 0xf7, 0x88, 0x36, 0xc6, 0x45, 0xa5,
		0x38, 0xd2, 0x1c, 0x99, 0x3c, 0x7f, 0x30, 0xe7, 0x93, 0xbf, 0xcb, 0x41, 0x25, 0xdc, 0x1c, 0x93,
		0xb3, 0x86, 0x4e, 0xeb, 0x48, 0x86, 0x66, 0x9a, 0xc7, 0x1e, 0xd8, 0x4a, 0xaf, 0xb7, 0x48, 0x81,
		0x69, 0xcc, 0xb1, 0x96, 0x55, 0x61, 0x48, 0x52, 0xdc, 0x49, 0x6e, 0xc1, 0xac, 0x45, 0x28, 0x2a,
		0xfc, 0x09, 0x6d, 0xc1, 0xdc, 0x2d, 0x8f, 0x72, 0xcf, 0x51, 0xee, 0xc7, 0x1f, 0xcc, 0xfd, 0x42,
		0x8f, 0x92, 0x97, 0x5e, 0xe8, 0xa9, 0xbb, 0x1d, 0x65, 0xa7, 0xb9, 0xad, 0x70, 0x38, 0x3a, 0x03,
		0x79, 0x53, 0xbb, 0x77, 0x14, 0x2d, 0x45, 0x54, 0x94, 0xd6, 0xf1, 0x67, 0x20, 0x7f, 0x17, 0x6b,
		0xb7, 0xa3, 0x05, 0x80, 0x8a, 0xde, 0xc7, 0xd0, 0xbf, 0x04, 0x05, 0xea, 0x2f, 0x04, 0xc0, 0x3d,
		0x26, 0x3d, 0x84, 0x8a, 0x90, 0x6f, 0x75, 0x14, 0x12, 0xfe, 0x12, 0x54, 0x98, 0x54, 0xed, 0xb6,
		0xe5, 0x96, 0x2c, 0x65, 0xeb, 0x57, 0x60, 0x8e, 0x39, 0x81, 0x6c, 0x8d, 0xc0, 0x0d, 0xd2, 0x43,
		0xfc, 0x91, 0x73, 0x64, 0xc4, 0xe8, 0xfe, 0xce, 0x86, 0xac, 0x48, 0xd9, 0xf0, 0xf2, 0x7a, 0x50,
		0x09, 0xf7, 0xc5, 0x1f, 0x4c, 0x4c, 0x7d, 0x2b, 0x03, 0xe5, 0x50, 0x9f, 0x4b, 0x1a, 0x14, 0xcd,
		0x34, 0xed, 0xbb, 0xaa, 0x66, 0x1a, 0x9a, 0xc7, 0x83, 0x02, 0xa8, 0xa8, 0x49, 0x24, 0x69, 0x17,
		0xed, 0x03, 0x31, 0xfe, 0xad, 0x0c, 0x48, 0xf1, 0x16, 0x33, 0x66, 0x60, 0xe6, 0x07, 0x6a, 0xe0,
		0x9b, 0x19, 0xa8, 0x46, 0xfb, 0xca, 0x98, 0x79, 0x17, 0x7e, 0xa0, 0xe6, 0xfd, 0x7d, 0x16, 0x16,
		0x22, 0xdd, 0x64, 0x5a, 0xeb, 0x3e, 0x0b, 0x4b, 0x46, 0x1f, 0x8f, 0x1c, 0xdb, 0xc7, 0x96, 0x7e,
		0xa4, 0x9a, 0xf8, 0x0e, 0x36, 0x6b, 0x75, 0x9a, 0x28, 0x2e, 0x3d, 0xb8, 0x5f, 0x5d, 0x6f, 0x4f,
		0x70, 0xdb, 0x04, 0xd6, 0x58, 0x6e, 0x6f, 0xca, 0x3b, 0xdd, 0xce, 0x9e, 0xbc, 0xdb, 0x7a, 0x59,
		0xdd, 0xdf, 0xfd, 0xe4, 0x6e, 0xe7, 0xc5, 0x5d, 0x45, 0x32, 0x62, 0x6a, 0xef, 0xe3, 0x56, 0xef,
		0x82, 0x14, 0x37, 0x0a, 0x9d, 0x86, 0x59, 0x66, 0x49, 0x0f, 0xa1, 0x65, 0x58, 0xdc, 0xed, 0xa8,
		0xbd, 0xf6, 0xa6, 0xac, 0xca, 0x37, 0x6f, 0xca, 0xad, 0xbd, 0x1e, 0xbb, 0x81, 0x08, 0xb4, 0xf7,
		0xa2, 0x9b, 0xfa, 0x8d, 0x1c, 0x2c, 0xcf, 0xb0, 0x04, 0x35, 0xf9, 0xd9, 0x81, 0x1d, 0x67, 0x3e,
		0x92, 0xc6, 0xfa, 0x75, 0x52, 0xf2, 0xbb, 0x9a, 0xeb, 0xf3, 0xa3, 0xc6, 0x53, 0x40, 0xbc, 0x64,
		0xf9, 0xc6, 0xc0, 0xc0, 0x2e, 0xbf, 0xb0, 0x61, 0x07, 0x8a, 0xc5, 0x89, 0x9c, 0xdd, 0xd9, 0xfc,
		0x10, 0x20, 0xc7, 0xf6, 0x0c, 0xdf, 0xb8, 0x83, 0x55, 0xc3, 0x12, 0xb7, 0x3b, 0xe4, 0x80, 0x91,
		0x57, 0x24, 0x31, 0xd2, 0xb6, 0xfc, 0x40, 0xdb, 0xc2, 0x43, 0x2d, 0xa6, 0x4d, 0x12, 0x78, 0x4e,
		0x91, 0xc4, 0x48, 0xa0, 0x7d, 0x01, 0x2a, 0x7d, 0x7b, 0x4c, 0xba, 0x2e, 0xa6, 0x47, 0xea, 0x45,
		0x46, 0x29, 0x33, 0x59, 0xa0, 0xc2, 0xfb, 0xe9, 0xc9, 0xb5, 0x52, 0x45, 0x29, 0x33, 0x19, 0x53,
		0x79, 0x12, 0x16, 0xb5, 0xe1, 0xd0, 0x25, 0xe4, 0x82, 0x88, 0x9d, 0x10, 0xaa, 0x81, 0x98, 0x2a,
		0xae, 0xbe, 0x00, 0x45, 0xe1, 0x07, 0x52, 0x92, 0x89, 0x27, 0x54, 0x87, 0x1d, 0x7b, 0xb3, 0x6b,
		0x25, 0xa5, 0x68, 0x89, 0xc1, 0x0b, 0x50, 0x31, 0x3c, 0x75, 0x72, 0x4b, 0x9e, 0x3d, 0x9f, 0x5d,
		0x2b, 0x2a, 0x65, 0xc3, 0x0b, 0x6e, 0x18, 0xeb, 0x6f, 0x67, 0xa1, 0x1a, 0xbd, 0xe5, 0x47, 0x9b,
		0x50, 0x34, 0x6d, 0x5d, 0xa3, 0xa1, 0xc5, 0x3e, 0x31, 0xad, 0x25, 0x7c, 0x18, 0x58, 0xdf, 0xe6,
		0xfa, 0x4a, 0x80, 0x5c, 0xfd, 0xdb, 0x0c, 0x14, 0x85, 0x18, 0x9d, 0x82, 0xbc, 0xa3, 0xf9, 0x87,
		0x94, 0xae, 0xb0, 0x91, 0x95, 0x32, 0x0a, 0x7d, 0x26, 0x72, 0xcf, 0xd1, 0x2c, 0x1a, 0x02, 0x5c,
		0x4e, 0x9e, 0xc9, 0xba, 0x9a, 0x58, 0xeb, 0xd3, 0xe3, 0x87, 0x3d, 0x1a, 0x61, 0xcb, 0xf7, 0xc4,
		0xba, 0x72, 0x79, 0x8b, 0x8b, 0xd1, 0xd3, 0xb0, 0xe4, 0xbb, 0x9a, 0x61, 0x46, 0x74, 0xf3, 0x54,
		0x57, 0x12, 0x03, 0x81, 0x72, 0x03, 0xce, 0x08, 0xde, 0x3e, 0xf6, 0x35, 0xfd, 0x10, 0xf7, 0x27,
		0xa0, 0x39, 0x7a, 0xcd, 0x70, 0x9a, 0x2b, 0x6c, 0xf2, 0x71, 0x81, 0xad, 0x7f, 0x27, 0x03, 0x4b,
		0xe2, 0xc0, 0xd4, 0x0f, 0x9c, 0xb5, 0x03, 0xa0, 0x59, 0x96, 0xed, 0x87, 0xdd, 0x35, 0x1d, 0xca,
		0x53, 0xb8, 0xf5, 0x66, 0x00, 0x52, 0x42, 0x04, 0xab, 0x23, 0x80, 0xc9, 0xc8, 0xb1, 0x6e, 0x3b,
		0x07, 0x65, 0xfe, 0x09, 0x87, 0x7e, 0x07, 0x64, 0x47, 0x6c, 0x60, 0x22, 0x72, 0xb2, 0x42, 0x2b,
		0x50, 0x38, 0xc0, 0x43, 0xc3, 0xe2, 0x17, 0xb3, 0xec, 0x41, 0x5c, 0x84, 0xe4, 0x83, 0x8b, 0x90,
		0x8d, 0xcf, 0xc0, 0xb2, 0x6e, 0x8f, 0xe2, 0xe6, 0x6e, 0x48, 0xb1, 0x63, 0xbe, 0xf7, 0x89, 0xcc,
		0x2b, 0x30, 0x69, 0x31, 0xff, 0x2f, 0x93, 0xf9, 0x72, 0x36, 0xb7, 0xd5, 0xdd, 0xf8, 0x4a, 0x76,
		0x75, 0x8b, 0x41, 0xbb, 0x62, 0xa6, 0x0a, 0x1e, 0x98, 0x58, 0x27, 0xd6, 0xc3, 0x3f, 0x5f, 0x84,
		0x8f, 0x0c, 0x0d, 0xff, 0x70, 0x7c, 0xb0, 0xae, 0xdb, 0xa3, 0x4b, 0x43, 0x7b, 0x68, 0x4f, 0x3e,
		0x7d, 0x92, 0x27, 0xfa, 0x40, 0x7f, 0xf1, 0xcf, 0x9f, 0xa5, 0x40, 0xba, 0x9a, 0xf8, 0xad, 0xb4,
		0xb1, 0x0b, 0xcb, 0x5c, 0x59, 0xa5, 0xdf, 0x5f, 0xd8, 0x29, 0x02, 0x3d, 0xf0, 0x0e, 0xab, 0xf6,
		0xb5, 0x77, 0x68, 0xb9, 0x56, 0x96, 0x38, 0x94, 0x8c, 0xb1, 0x83, 0x46, 0x43, 0x81, 0x87, 0x23,
		0x7c, 0x6c, 0x6b, 0x62, 0x37, 0x81, 0xf1, 0xdb, 0x9c, 0x71, 0x39, 0xc4, 0xd8, 0xe3, 0xd0, 0x46,
		0x0b, 0x16, 0x4e, 0xc2, 0xf5, 0x57, 0x9c, 0xab, 0x82, 0xc3, 0x24, 0x5b, 0xb0, 0x48, 0x49, 0xf4,
		0xb1, 0xe7, 0xdb, 0x23, 0x9a, 0xf7, 0x1e, 0x4c, 0xf3, 0xd7, 0xef, 0xb0, 0xbd, 0x52, 0x25, 0xb0,
		0x56, 0x80, 0x6a, 0x34, 0x80, 0x7e, 0x72, 0xea, 0x63, 0xdd, 0x4c, 0x60, 0xf8, 0x1b, 0x6e, 0x48,
		0xa0, 0xdf, 0xf8, 0x34, 0xac, 0x90, 0xdf, 0x34, 0x2d, 0x85, 0x2d, 0x49, 0xbe, 0xf0, 0xaa, 0x7d,
		0xe7, 0x75, 0xb6, 0x1d, 0x97, 0x03, 0x82, 0x90, 0x4d, 0xa1, 0x55, 0x1c, 0x62, 0xdf, 0xc7, 0xae,
		0xa7, 0x6a, 0xe6, 0x2c, 0xf3, 0x42, 0x37, 0x06, 0xb5, 0x2f, 0xbc, 0x1b, 0x5d, 0xc5, 0x2d, 0x86,
		0x6c, 0x9a, 0x66, 0x63, 0x1f, 0x4e, 0xcf, 0x88, 0x8a, 0x14, 0x9c, 0x6f, 0x70, 0xce, 0x95, 0xa9,
		0xc8, 0x20, 0xb4, 0x5d, 0x10, 0xf2, 0x60, 0x2d, 0x53, 0x70, 0xfe, 0x1a, 0xe7, 0x44, 0x1c, 0x2b,
		0x96, 0x94, 0x30, 0xbe, 0x00, 0x4b, 0x77, 0xb0, 0x7b, 0x60, 0x7b, 0xfc, 0x96, 0x26, 0x05, 0xdd,
		0x9b, 0x9c, 0x6e, 0x91, 0x03, 0xe9, 0xb5, 0x0d, 0xe1, 0xba, 0x06, 0xc5, 0x81, 0xa6, 0xe3, 0x14,
		0x14, 0x5f, 0xe4, 0x14, 0xf3, 0x44, 0x9f, 0x40, 0x9b, 0x50, 0x19, 0xda, 0xbc, 0x32, 0x25, 0xc3,
		0xdf, 0xe2, 0xf0, 0xb2, 0xc0, 0x70, 0x0a, 0xc7, 0x76, 0xc6, 0x26, 0x29, 0x5b, 0xc9, 0x14, 0xbf,
		0x2e, 0x28, 0x04, 0x86, 0x53, 0x9c, 0xc0, 0xad, 0xbf, 0x21, 0x28, 0xbc, 0x90, 0x3f, 0x6f, 0x40,
		0xd9, 0xb6, 0xcc, 0x23, 0xdb, 0x4a, 0x63, 0xc4, 0x97, 0x38, 0x03, 0x70, 0x08, 0x21, 0xb8, 0x0e,
		0xa5, 0xb4, 0x0b, 0xf1, 0x5b, 0xef, 0x8a, 0xed, 0x21, 0x56, 0x60, 0x0b, 0x16, 0x45, 0x82, 0x32,
		0x6c, 0x2b, 0x05, 0xc5, 0x6f, 0x73, 0x8a, 0x6a, 0x08, 0xc6, 0xa7, 0xe1, 0x63, 0xcf, 0x1f, 0xe2,
		0x34, 0x24, 0x6f, 0x8b, 0x69, 0x70, 0x08, 0x77, 0xe5, 0x01, 0xb6, 0xf4, 0xc3, 0x74, 0x0c, 0xbf,
		0x23, 0x5c, 0x29, 0x30, 0x84, 0xa2, 0x05, 0x0b, 0x23, 0xcd, 0xf5, 0x0e, 0x35, 0x33, 0xd5, 0x72,
		0xfc, 0x2e, 0xe7, 0xa8, 0x04, 0x20, 0xee, 0x91, 0xb1, 0x75, 0x12, 0x9a, 0xaf, 0x08, 0x8f, 0x84,
		0x60, 0x7c, 0xeb, 0x79, 0x3e, 0xbd, 0xd2, 0x3a, 0x09, 0xdb, 0xef, 0x89, 0xad, 0xc7, 0xb0, 0x3b,
		0x61, 0xc6, 0xeb, 0x50, 0xf2, 0x8c, 0x7b, 0xa9, 0x68, 0x7e, 0x5f, 0xac, 0x34, 0x05, 0x10, 0xf0,
		0xcb, 0x70, 0x66, 0x66, 0x99, 0x48, 0x41, 0xf6, 0x07, 0x9c, 0xec, 0xd4, 0x8c, 0x52, 0xc1, 0x53,
		0xc2, 0x49, 0x29, 0xff, 0x50, 0xa4, 0x04, 0x1c, 0xe3, 0xea, 0x92, 0xb3, 0x82, 0xa7, 0x0d, 0x4e,
		0xe6, 0xb5, 0x3f, 0x12, 0x5e, 0x63, 0xd8, 0x88, 0xd7, 0xf6, 0xe0, 0x14, 0x67, 0x3c, 0xd9, 0xba,
		0x7e, 0x55, 0x24, 0x56, 0x86, 0xde, 0x8f, 0xae, 0xee, 0x67, 0x60, 0x35, 0x70, 0xa7, 0x68, 0x4a,
		0x3d, 0x75, 0xa4, 0x39, 0x29, 0x98, 0xbf, 0xc6, 0x99, 0x45, 0xc6, 0x0f, 0xba, 0x5a, 0x6f, 0x47,
		0x73, 0x08, 0xf9, 0x4b, 0x50, 0x13, 0xe4, 0x63, 0xcb, 0xc5, 0xba, 0x3d, 0xb4, 0x8c, 0x7b, 0xb8,
		0x9f, 0x82, 0xfa, 0x8f, 0x63, 0x4b, 0xb5, 0x1f, 0x82, 0x13, 0xe6, 0x36, 0x48, 0x41, 0xaf, 0xa2,
		0x1a, 0x23, 0xc7, 0x76, 0xfd, 0x04, 0xc6, 0xaf, 0x8b, 0x95, 0x0a, 0x70, 0x6d, 0x0a, 0x6b, 0xc8,
		0x50, 0xa5, 0x8f, 0x69, 0x43, 0xf2, 0x4f, 0x38, 0xd1, 0xc2, 0x04, 0xc5, 0x13, 0x87, 0x6e, 0x8f,
		0x1c, 0xcd, 0x4d, 0x93, 0xff, 0xfe, 0x54, 0x24, 0x0e, 0x0e, 0xe1, 0x89, 0xc3, 0x3f, 0x72, 0x30,
		0xa9, 0xf6, 0x29, 0x18, 0xbe, 0x21, 0x12, 0x87, 0xc0, 0x70, 0x0a, 0xd1, 0x30, 0xa4, 0xa0, 0xf8,
		0x33, 0x41, 0x21, 0x30, 0x84, 0xe2, 0x53, 0x93, 0x42, 0xeb, 0xe2, 0xa1, 0xe1, 0xf9, 0x2e, 0x6b,
		0x85, 0x1f, 0x4c, 0xf5, 0xe7, 0xef, 0x46, 0x9b, 0x30, 0x25, 0x04, 0x25, 0x99, 0x88, 0x5f, 0xa1,
		0xd2, 0x93, 0x52, 0xb2, 0x61, 0xdf, 0x14, 0x99, 0x28, 0x04, 0x23, 0xb6, 0x85, 0x3a, 0x44, 0xe2,
		0x76, 0x9d, 0x9c, 0x0f, 0x52, 0xd0, 0x7d, 0x2b, 0x66, 0x5c, 0x4f, 0x60, 0x09, 0x67, 0xa8, 0xff,
		0x19, 0x5b, 0xb7, 0xf1, 0x51, 0xaa, 0xe8, 0xfc, 0x8b, 0x58, 0xff, 0xb3, 0xcf, 0x90, 0x2c, 0x87,
		0x2c, 0xc6, 0xfa, 0x29, 0x94, 0xf4, 0xcf, 0x3a, 0xb5, 0x1f, 0x7f, 0x8f, 0xcf, 0x37, 0xda, 0x4e,
		0x35, 0xb6, 0x49, 0x90, 0x47, 0x9b, 0x9e, 0x64, 0xb2, 0xd7, 0xdf, 0x0b, 0xe2, 0x3c, 0xd2, 0xf3,
		0x34, 0x6e, 0xc2, 0x42, 0xa4, 0xe1, 0x49, 0xa6, 0xfa, 0x09, 0x4e, 0x55, 0x09, 0xf7, 0x3b, 0x8d,
		0x2b, 0x90, 0x27, 0xcd, 0x4b, 0x32, 0xfc, 0x27, 0x39, 0x9c, 0xaa, 0x37, 0x3e, 0x06, 0x45, 0xd1,
		0xb4, 0x24, 0x43, 0x7f, 0x8a, 0x43, 0x03, 0x08, 0x81, 0x8b, 0x86, 0x25, 0x19, 0xfe, 0xd3, 0x02,
		0x2e, 0x20, 0x04, 0x9e, 0xde, 0x85, 0x7f, 0xf9, 0x33, 0x79, 0x5e, 0x74, 0x84, 0xef, 0xae, 0xc3,
		0x3c, 0xef, 0x54, 0x92, 0xd1, 0x9f, 0xe3, 0x2f, 0x17, 0x88, 0xc6, 0x73, 0x50, 0x48, 0xe9, 0xf0,
		0x9f, 0xe5, 0x50, 0xa6, 0xdf, 0x68, 0x41, 0x39, 0xd4, 0x9d, 0x24, 0xc3, 0x7f, 0x8e, 0xc3, 0xc3,
		0x28, 0x62, 0x3a, 0xef, 0x4e, 0x92, 0x09, 0x7e, 0x5e, 0x98, 0xce, 0x11, 0xc4, 0x6d, 0xa2, 0x31,
		0x49, 0x46, 0xff, 0x82, 0xf0, 0xba, 0x80, 0x34, 0x6e, 0x40, 0x29, 0x28, 0x36, 0xc9, 0xf8, 0x5f,
		0xe4, 0xf8, 0x09, 0x86, 0x78, 0x20, 0x54, 0xec, 0x92, 0x29, 0x7e, 0x49, 0x78, 0x20, 0x84, 0x22,
		0xdb, 0x28, 0xde, 0xc0, 0x24, 0x33, 0xfd, 0xb2, 0xd8, 0x46, 0xb1, 0xfe, 0x85, 0xac, 0x26, 0xcd,
		0xf9, 0xc9, 0x14, 0xbf, 0x22, 0x56, 0x93, 0xea, 0x13, 0x33, 0xe2, 0x1d, 0x41, 0x32, 0xc7, 0xaf,
		0x0a, 0x33, 0x62, 0x0d, 0x41, 0xa3, 0x0b, 0x68, 0xba, 0x1b, 0x48, 0xe6, 0xfb, 0x3c, 0xe7, 0x5b,
		0x9a, 0x6a, 0x06, 0x1a, 0x2f, 0xc2, 0xa9, 0xd9, 0x9d, 0x40, 0x32, 0xeb, 0x17, 0xde, 0x8b, 0x9d,
		0xdd, 0xc2, 0x8d, 0x40, 0x63, 0x6f, 0x52, 0x52, 0xc2, 0x5d, 0x40, 0x32, 0xed, 0x1b, 0xef, 0x45,
		0x13, 0x77, 0xb8, 0x09, 0x68, 0x34, 0x01, 0x26, 0x05, 0x38, 0x99, 0xeb, 0x4d, 0xce, 0x15, 0x02,
		0x91, 0xad, 0xc1, 0xeb, 0x6f, 0x32, 0xfe, 0x8b, 0x62, 0x6b, 0x70, 0x04, 0xd9, 0x1a, 0xa2, 0xf4,
		0x26, 0xa3, 0xdf, 0x12, 0x5b, 0x43, 0x40, 0x48, 0x64, 0x87, 0xaa, 0x5b, 0x32, 0xc3, 0x97, 0x44,
		0x64, 0x87, 0x50, 0x8d, 0x5d, 0x58, 0x9a, 0x2a, 0x88, 0xc9, 0x54, 0x5f, 0xe6, 0x54, 0x52, 0xbc,
		0x1e, 0x86, 0x8b, 0x17, 0x2f, 0x86, 0xc9, 0x6c, 0xbf, 0x19, 0x2b, 0x5e, 0xbc, 0x16, 0x36, 0xae,
		0x43, 0xd1, 0x1a, 0x9b, 0x26, 0xd9, 0x3c, 0xe8, 0xc1, 0xff, 0x60, 0x57, 0xfb, 0xb7, 0xfb, 0xdc,
		0x3b, 0x02, 0xd0, 0xb8, 0x02, 0x05, 0x3c, 0x3a, 0xc0, 0xfd, 0x24, 0xe4, 0xbf, 0xdf, 0x17, 0x09,
		0x93, 0x68, 0x37, 0x6e, 0x00, 0xb0, 0xab, 0x11, 0xfa, 0xd9, 0x2f, 0x01, 0xfb, 0x1f, 0xf7, 0xf9,
		0xbf, 0xbe, 0x4c, 0x20, 0x13, 0x02, 0xf6, 0x8f, 0x34, 0x0f, 0x26, 0x78, 0x37, 0x4a, 0x40, 0x57,
		0xe4, 0x1a, 0xcc, 0xdf, 0xf2, 0x6c, 0xcb, 0xd7, 0x86, 0x49, 0xe8, 0xff, 0xe4, 0x68, 0xa1, 0x4f,
		0x1c, 0x36, 0xb2, 0x5d, 0xec, 0x6b, 0x43, 0x2f, 0x09, 0xfb, 0x5f, 0x1c, 0x1b, 0x00, 0x08, 0x58,
		0xd7, 0x3c, 0x3f, 0xcd, 0xbc, 0xbf, 0x2b, 0xc0, 0x02, 0x40, 0x8c, 0x26, 0xbf, 0x6f, 0xe3, 0xa3,
		0x24, 0xec, 0xf7, 0x84, 0xd1, 0x5c, 0xbf, 0xf1, 0x31, 0x28, 0x91, 0x9f, 0xec, 0xff, 0xd9, 0x12,
		0xc0, 0xff, 0xcd, 0xc1, 0x13, 0x04, 0x79, 0xb3, 0xe7, 0xf7, 0x7d, 0x23, 0xd9, 0xd9, 0xff, 0xc3,
		0x57, 0x5a, 0xe8, 0x37, 0x9a, 0x50, 0xf6, 0xfc, 0x7e, 0x7f, 0xcc, 0xfb, 0xd3, 0x04, 0xf8, 0xff,
		0xde, 0x0f, 0xae, 0x2c, 0x02, 0xcc, 0x86, 0x3c, 0xfb, 0xf6, 0x15, 0xb6, 0xec, 0x2d, 0x9b, 0xdd,
		0xbb, 0xbe, 0x52, 0x4f, 0xbe, 0x40, 0x85, 0xfb, 0x19, 0x80, 0xdb, 0x96, 0xed, 0xf3, 0x4b, 0xd4,
		0xfc, 0x48, 0x33, 0xac, 0xd5, 0x93, 0xdd, 0xbc, 0xd6, 0x47, 0x90, 0xff, 0xa4, 0x65, 0xfb, 0xe8,
		0x09, 0x28, 0x6c, 0x18, 0xc3, 0x43, 0x9f, 0xdf, 0x64, 0x2f, 0xae, 0x13, 0xb2, 0x75, 0x2a, 0x22,
		0xe3, 0x0a, 0x1b, 0x45, 0x2b, 0x50, 0x90, 0xcd, 0x03, 0xfb, 0x2e, 0xff, 0x38, 0xca, 0x1e, 0xd0,
		0x1a, 0x94, 0x36, 0x0c, 0xd2, 0x3a, 0xca, 0x56, 0x9f, 0xff, 0x8f, 0x19, 0x30, 0x02, 0x8a, 0x9d,
		0x0c, 0xd6, 0x6f, 0x10, 0x4d, 0xce, 0x89, 0xce, 0x42, 0x7e, 0xdb, 0xb6, 0x1d, 0xfa, 0x9d, 0x32,
		0x8a, 0xa0, 0x72, 0x84, 0x20, 0xbf, 0x37, 0x76, 0x2d, 0xfe, 0x2e, 0xfa, 0x7b, 0xa3, 0xf8, 0xbd,
		0x7f, 0x38, 0x9b, 0xf9, 0xea, 0x3f, 0x9e, 0xcd, 0xfc, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x76,
		0x9d, 0x6d, 0x2e, 0x58, 0x33, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Knot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&main.Knot{")
	if this.Bight != nil {
		s = append(s, "Bight: "+fmt.Sprintf("%#v", this.Bight)+",\n")
	}
	if this.Elbow != nil {
		s = append(s, "Elbow: "+valueToGoStringKnot(this.Elbow, "bool")+",\n")
	}
	if this.BitterEnd != nil {
		s = append(s, "BitterEnd: "+fmt.Sprintf("%#v", this.BitterEnd)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BightKnot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&main.BightKnot{")
	if this.Loop != nil {
		s = append(s, "Loop: "+fmt.Sprintf("%#v", this.Loop)+",\n")
	}
	if this.Turn != nil {
		s = append(s, "Turn: "+valueToGoStringKnot(this.Turn, "bool")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringKnot(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

func init() { proto.RegisterFile("knot.proto", fileDescriptor_knot_f362cdae4cc05f8d) }

var fileDescriptor_knot_f362cdae4cc05f8d = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xce, 0xcb, 0x2f,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x93, 0xd2, 0x4d, 0xcf,
	0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x4b,
	0x26, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0xa4, 0x94, 0xcb, 0xc5, 0xe2, 0x9d,
	0x97, 0x5f, 0x22, 0xa4, 0xca, 0xc5, 0xea, 0x94, 0x99, 0x9e, 0x51, 0x22, 0xc1, 0xa8, 0xc0, 0xac,
	0xc1, 0x6d, 0xc4, 0xaf, 0x07, 0x32, 0x4c, 0x0f, 0x2c, 0x04, 0x92, 0x0f, 0x82, 0xc8, 0x0a, 0x89,
	0x70, 0xb1, 0xba, 0xe6, 0x24, 0xe5, 0x97, 0x4b, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x04, 0x41, 0x38,
	0x42, 0x1a, 0x5c, 0x9c, 0x4e, 0x99, 0x25, 0x25, 0xa9, 0x45, 0xae, 0x79, 0x29, 0x12, 0xcc, 0x0a,
	0x8c, 0x1a, 0xdc, 0x46, 0x5c, 0x10, 0x03, 0xc0, 0x7a, 0x11, 0x92, 0x4a, 0xf6, 0x20, 0x95, 0x50,
	0x33, 0x85, 0xe4, 0xb8, 0x58, 0x7c, 0xf2, 0xf3, 0x0b, 0x24, 0x18, 0x31, 0x74, 0x80, 0xc5, 0x85,
	0x84, 0xb8, 0x58, 0x42, 0x4a, 0x8b, 0xf2, 0xa0, 0x76, 0x81, 0xd9, 0x4e, 0x1c, 0x1f, 0x1e, 0xca,
	0x31, 0x6e, 0x78, 0x24, 0xc7, 0x08, 0x08, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x60, 0x51, 0x1c, 0xfb,
	0x00, 0x00, 0x00,
}
