// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: banana.proto

package main

import (
	bytes "bytes"
	compress_gzip "compress/gzip"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	io_ioutil "io/ioutil"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BananaSource int32

const (
	BananaSource_q      BananaSource = 0
	BananaSource_w      BananaSource = 1
	BananaSource_e      BananaSource = 2
	BananaSource_r      BananaSource = 3
	BananaSource_t      BananaSource = 4
	BananaSource_y      BananaSource = 5
	BananaSource_u      BananaSource = 6
	BananaSource_i      BananaSource = 7
	BananaSource_o      BananaSource = 8
	BananaSource_p      BananaSource = 9
	BananaSource_a      BananaSource = 10
	BananaSource_s      BananaSource = 11
	BananaSource_d      BananaSource = 12
	BananaSource_f      BananaSource = 13
	BananaSource_g      BananaSource = 14
	BananaSource_h      BananaSource = 15
	BananaSource_j      BananaSource = 16
	BananaSource_k      BananaSource = 17
	BananaSource_l      BananaSource = 18
	BananaSource_z      BananaSource = 19
	BananaSource_x      BananaSource = 20
	BananaSource_c      BananaSource = 21
	BananaSource_v      BananaSource = 22
	BananaSource_b      BananaSource = 23
	BananaSource_n      BananaSource = 24
	BananaSourceMaximum BananaSource = 25
)

var BananaSource_name = map[int32]string{
	0:  "BananaSource_q",
	1:  "BananaSource_w",
	2:  "BananaSource_e",
	3:  "BananaSource_r",
	4:  "BananaSource_t",
	5:  "BananaSource_y",
	6:  "BananaSource_u",
	7:  "BananaSource_i",
	8:  "BananaSource_o",
	9:  "BananaSource_p",
	10: "BananaSource_a",
	11: "BananaSource_s",
	12: "BananaSource_d",
	13: "BananaSource_f",
	14: "BananaSource_g",
	15: "BananaSource_h",
	16: "BananaSource_j",
	17: "BananaSource_k",
	18: "BananaSource_l",
	19: "BananaSource_z",
	20: "BananaSource_x",
	21: "BananaSource_c",
	22: "BananaSource_v",
	23: "BananaSource_b",
	24: "BananaSource_n",
	25: "BananaSourceMaximum",
}

var BananaSource_value = map[string]int32{
	"BananaSource_q":      0,
	"BananaSource_w":      1,
	"BananaSource_e":      2,
	"BananaSource_r":      3,
	"BananaSource_t":      4,
	"BananaSource_y":      5,
	"BananaSource_u":      6,
	"BananaSource_i":      7,
	"BananaSource_o":      8,
	"BananaSource_p":      9,
	"BananaSource_a":      10,
	"BananaSource_s":      11,
	"BananaSource_d":      12,
	"BananaSource_f":      13,
	"BananaSource_g":      14,
	"BananaSource_h":      15,
	"BananaSource_j":      16,
	"BananaSource_k":      17,
	"BananaSource_l":      18,
	"BananaSource_z":      19,
	"BananaSource_x":      20,
	"BananaSource_c":      21,
	"BananaSource_v":      22,
	"BananaSource_b":      23,
	"BananaSource_n":      24,
	"BananaSourceMaximum": 25,
}

func (x BananaSource) Enum() *BananaSource {
	p := new(BananaSource)
	*p = x
	return p
}

func (x BananaSource) String() string {
	return proto.EnumName(BananaSource_name, int32(x))
}

func (x *BananaSource) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BananaSource_value, data, "BananaSource")
	if err != nil {
		return err
	}
	*x = BananaSource(value)
	return nil
}

func (BananaSource) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0022f69d17e210ba, []int{0}
}

type PeelType int32

const (
	PeelFirm        PeelType = 0
	PeelGreen       PeelType = 1
	PeelYellow      PeelType = 2
	PeelDarkened    PeelType = 3
	PeelDecomposing PeelType = 4
)

var PeelType_name = map[int32]string{
	0: "PeelFirm",
	1: "PeelGreen",
	2: "PeelYellow",
	3: "PeelDarkened",
	4: "PeelDecomposing",
}

var PeelType_value = map[string]int32{
	"PeelFirm":        0,
	"PeelGreen":       1,
	"PeelYellow":      2,
	"PeelDarkened":    3,
	"PeelDecomposing": 4,
}

func (x PeelType) Enum() *PeelType {
	p := new(PeelType)
	*p = x
	return p
}

func (x PeelType) String() string {
	return proto.EnumName(PeelType_name, int32(x))
}

func (x *PeelType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PeelType_value, data, "PeelType")
	if err != nil {
		return err
	}
	*x = PeelType(value)
	return nil
}

func (PeelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0022f69d17e210ba, []int{1}
}

type BananaTuple struct {
	BananaTime           int64        `protobuf:"varint,1,opt,name=BananaTime" json:"BananaTime"`
	Pulpy                string       `protobuf:"bytes,2,opt,name=Pulpy" json:"Pulpy"`
	IsPulpySet           bool         `protobuf:"varint,3,opt,name=IsPulpySet" json:"IsPulpySet"`
	Yummy                string       `protobuf:"bytes,4,opt,name=Yummy" json:"Yummy"`
	IsYummySet           bool         `protobuf:"varint,5,opt,name=IsYummySet" json:"IsYummySet"`
	Chewy                string       `protobuf:"bytes,6,opt,name=Chewy" json:"Chewy"`
	IsChewySet           bool         `protobuf:"varint,7,opt,name=IsChewySet" json:"IsChewySet"`
	Squishy              string       `protobuf:"bytes,8,opt,name=Squishy" json:"Squishy"`
	IsSquishySet         bool         `protobuf:"varint,9,opt,name=IsSquishySet" json:"IsSquishySet"`
	Brown                string       `protobuf:"bytes,10,opt,name=Brown" json:"Brown"`
	IsBrownSet           bool         `protobuf:"varint,11,opt,name=IsBrownSet" json:"IsBrownSet"`
	Rotten               uint32       `protobuf:"varint,12,opt,name=Rotten" json:"Rotten"`
	IsRottenSet          bool         `protobuf:"varint,13,opt,name=IsRottenSet" json:"IsRottenSet"`
	Peel                 uint32       `protobuf:"varint,14,opt,name=Peel" json:"Peel"`
	IsPeelSet            bool         `protobuf:"varint,15,opt,name=IsPeelSet" json:"IsPeelSet"`
	PeelType             PeelType     `protobuf:"varint,16,opt,name=PeelType,enum=main.PeelType" json:"PeelType"`
	IsPeelTypeSet        bool         `protobuf:"varint,17,opt,name=IsPeelTypeSet" json:"IsPeelTypeSet"`
	BananaSource         BananaSource `protobuf:"varint,18,opt,name=BananaSource,enum=main.BananaSource" json:"BananaSource"`
	Slippery             bool         `protobuf:"varint,19,opt,name=Slippery" json:"Slippery"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BananaTuple) Reset()      { *m = BananaTuple{} }
func (*BananaTuple) ProtoMessage() {}
func (*BananaTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_0022f69d17e210ba, []int{0}
}
func (m *BananaTuple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BananaTuple.Unmarshal(m, b)
}
func (m *BananaTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BananaTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BananaTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BananaTuple.Merge(m, src)
}
func (m *BananaTuple) XXX_Size() int {
	return m.Size()
}
func (m *BananaTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_BananaTuple.DiscardUnknown(m)
}

var xxx_messageInfo_BananaTuple proto.InternalMessageInfo

func (m *BananaTuple) GetBananaTime() int64 {
	if m != nil {
		return m.BananaTime
	}
	return 0
}

func (m *BananaTuple) GetPulpy() string {
	if m != nil {
		return m.Pulpy
	}
	return ""
}

func (m *BananaTuple) GetIsPulpySet() bool {
	if m != nil {
		return m.IsPulpySet
	}
	return false
}

func (m *BananaTuple) GetYummy() string {
	if m != nil {
		return m.Yummy
	}
	return ""
}

func (m *BananaTuple) GetIsYummySet() bool {
	if m != nil {
		return m.IsYummySet
	}
	return false
}

func (m *BananaTuple) GetChewy() string {
	if m != nil {
		return m.Chewy
	}
	return ""
}

func (m *BananaTuple) GetIsChewySet() bool {
	if m != nil {
		return m.IsChewySet
	}
	return false
}

func (m *BananaTuple) GetSquishy() string {
	if m != nil {
		return m.Squishy
	}
	return ""
}

func (m *BananaTuple) GetIsSquishySet() bool {
	if m != nil {
		return m.IsSquishySet
	}
	return false
}

func (m *BananaTuple) GetBrown() string {
	if m != nil {
		return m.Brown
	}
	return ""
}

func (m *BananaTuple) GetIsBrownSet() bool {
	if m != nil {
		return m.IsBrownSet
	}
	return false
}

func (m *BananaTuple) GetRotten() uint32 {
	if m != nil {
		return m.Rotten
	}
	return 0
}

func (m *BananaTuple) GetIsRottenSet() bool {
	if m != nil {
		return m.IsRottenSet
	}
	return false
}

func (m *BananaTuple) GetPeel() uint32 {
	if m != nil {
		return m.Peel
	}
	return 0
}

func (m *BananaTuple) GetIsPeelSet() bool {
	if m != nil {
		return m.IsPeelSet
	}
	return false
}

func (m *BananaTuple) GetPeelType() PeelType {
	if m != nil {
		return m.PeelType
	}
	return PeelFirm
}

func (m *BananaTuple) GetIsPeelTypeSet() bool {
	if m != nil {
		return m.IsPeelTypeSet
	}
	return false
}

func (m *BananaTuple) GetBananaSource() BananaSource {
	if m != nil {
		return m.BananaSource
	}
	return BananaSource_q
}

func (m *BananaTuple) GetSlippery() bool {
	if m != nil {
		return m.Slippery
	}
	return false
}

func init() {
	proto.RegisterEnum("main.BananaSource", BananaSource_name, BananaSource_value)
	proto.RegisterEnum("main.PeelType", PeelType_name, PeelType_value)
	proto.RegisterType((*BananaTuple)(nil), "main.BananaTuple")
}

func init() { proto.RegisterFile("banana.proto", fileDescriptor_0022f69d17e210ba) }

var fileDescriptor_0022f69d17e210ba = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd2, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0x07, 0xf0, 0x5c, 0xe3, 0xb4, 0xc9, 0xc5, 0x49, 0x5f, 0x2f, 0x40, 0x8f, 0x0a, 0xb9, 0x51,
	0x85, 0x90, 0x55, 0x89, 0x14, 0x31, 0x22, 0xa6, 0x80, 0x40, 0x19, 0x90, 0xaa, 0xa6, 0x4b, 0x17,
	0x90, 0x93, 0x5e, 0x13, 0x53, 0xff, 0xaa, 0x1d, 0x93, 0x9a, 0xa9, 0xff, 0x07, 0x0b, 0x23, 0x7f,
	0x0a, 0x0b, 0x12, 0x23, 0x13, 0x6a, 0xc2, 0x3f, 0xd0, 0xb1, 0x23, 0xba, 0x73, 0xdc, 0x9e, 0xf5,
	0xb6, 0xf7, 0x3e, 0xcf, 0xef, 0x7b, 0x27, 0xeb, 0xa8, 0x39, 0x72, 0x02, 0x27, 0x70, 0x7a, 0x51,
	0x1c, 0xce, 0x42, 0x66, 0xf8, 0x8e, 0x1b, 0xec, 0x3c, 0x9f, 0xb8, 0xb3, 0x69, 0x3a, 0xea, 0x8d,
	0x43, 0xff, 0x60, 0x12, 0x4e, 0xc2, 0x03, 0x35, 0x1c, 0xa5, 0x67, 0xaa, 0x53, 0x8d, 0xaa, 0xf2,
	0xa5, 0xbd, 0x5f, 0x35, 0xda, 0xec, 0xab, 0x94, 0xe3, 0x34, 0xf2, 0x04, 0x7b, 0x4a, 0xe9, 0xaa,
	0x75, 0x7d, 0xc1, 0x49, 0x97, 0xd8, 0xd5, 0xbe, 0xf1, 0xf3, 0xef, 0x6e, 0xe5, 0x48, 0x73, 0xb6,
	0x43, 0x6b, 0x87, 0xa9, 0x17, 0x65, 0x7c, 0xad, 0x4b, 0xec, 0xc6, 0xea, 0x83, 0x9c, 0x64, 0xc2,
	0x20, 0x51, 0xe5, 0x50, 0xcc, 0x78, 0xb5, 0x4b, 0xec, 0x7a, 0x91, 0x70, 0xef, 0x32, 0xe1, 0x24,
	0xf5, 0xfd, 0x8c, 0x1b, 0x7a, 0x82, 0xa2, 0x3c, 0x41, 0x95, 0x32, 0xa1, 0x56, 0x4e, 0x28, 0x5c,
	0x26, 0xbc, 0x99, 0x8a, 0x79, 0xc6, 0xd7, 0xf5, 0x04, 0x45, 0x79, 0x82, 0x2a, 0x65, 0xc2, 0x46,
	0x39, 0xa1, 0x70, 0x66, 0xd1, 0x8d, 0xe1, 0x45, 0xea, 0x26, 0xd3, 0x8c, 0xd7, 0xb5, 0x8c, 0x02,
	0x99, 0x4d, 0xcd, 0x41, 0xb2, 0x6a, 0x64, 0x4e, 0x43, 0xcb, 0x29, 0x4d, 0xe4, 0x5d, 0xfa, 0x71,
	0x38, 0x0f, 0x38, 0xd5, 0xef, 0xa2, 0x28, 0xbf, 0x8b, 0x2a, 0x65, 0x46, 0xb3, 0x7c, 0x97, 0xc2,
	0xd9, 0x13, 0xba, 0x7e, 0x14, 0xce, 0x66, 0x22, 0xe0, 0x66, 0x97, 0xd8, 0xad, 0xd5, 0x17, 0x2b,
	0x63, 0xcf, 0x68, 0x73, 0x90, 0xe4, 0xb5, 0x0c, 0x69, 0x69, 0x21, 0xfa, 0x80, 0x71, 0x6a, 0x1c,
	0x0a, 0xe1, 0xf1, 0xb6, 0x96, 0xa1, 0x84, 0xed, 0xd1, 0xc6, 0x20, 0x91, 0x95, 0xdc, 0xdf, 0xd4,
	0xf6, 0xef, 0x99, 0xbd, 0xa0, 0x75, 0x59, 0x1e, 0x67, 0x91, 0xe0, 0xd0, 0x25, 0x76, 0xfb, 0x65,
	0xbb, 0x27, 0xdf, 0x54, 0xaf, 0xd0, 0xd5, 0xca, 0xdd, 0x57, 0x6c, 0x9f, 0xb6, 0xf2, 0x75, 0xd9,
	0xc9, 0xe4, 0x2d, 0x2d, 0xb9, 0x3c, 0x62, 0xaf, 0xa9, 0x99, 0xbf, 0xa0, 0x61, 0x98, 0xc6, 0x63,
	0xc1, 0x99, 0x3a, 0x81, 0xe5, 0x27, 0xe8, 0x93, 0xe2, 0x0f, 0xeb, 0xc6, 0xba, 0xb4, 0x3e, 0xf4,
	0xdc, 0x28, 0x12, 0x71, 0xc6, 0x3b, 0xda, 0x21, 0x77, 0xfa, 0xca, 0xb8, 0xf9, 0xbe, 0x4b, 0xf6,
	0xbf, 0x19, 0xe5, 0x63, 0x18, 0xa3, 0x6d, 0xbd, 0xff, 0x74, 0x01, 0x15, 0x64, 0x73, 0x20, 0xc8,
	0x04, 0xac, 0x21, 0x8b, 0xa1, 0x8a, 0x6c, 0x06, 0x06, 0xb2, 0x0c, 0x6a, 0xc8, 0x52, 0x58, 0x47,
	0xe6, 0xc2, 0x06, 0xb2, 0x10, 0xea, 0xc8, 0x22, 0x68, 0x20, 0x73, 0x80, 0x22, 0x4b, 0xa0, 0x89,
	0xec, 0x14, 0x4c, 0x64, 0x67, 0xd0, 0x42, 0x36, 0x81, 0x36, 0xb2, 0x29, 0x6c, 0x22, 0xfb, 0x0c,
	0x80, 0xec, 0x1c, 0xb6, 0x90, 0x79, 0xc0, 0x90, 0x7d, 0x85, 0x0e, 0xb2, 0x4b, 0x78, 0x80, 0x6c,
	0x0c, 0x0f, 0x91, 0x7d, 0x81, 0x47, 0xc8, 0x46, 0xb0, 0x8d, 0x2c, 0x00, 0xce, 0xb6, 0x69, 0x47,
	0xb7, 0x0f, 0xce, 0xa5, 0xeb, 0xa7, 0x3e, 0x3c, 0xde, 0xff, 0x78, 0xff, 0xc2, 0x99, 0x99, 0xd7,
	0xef, 0xdc, 0xd8, 0x87, 0x0a, 0x6b, 0xd1, 0x86, 0xec, 0xde, 0xc7, 0x42, 0x04, 0x40, 0x58, 0x9b,
	0x52, 0xd9, 0x9e, 0x08, 0xcf, 0x0b, 0xe7, 0xb0, 0xc6, 0x80, 0x9a, 0xb2, 0x7f, 0xeb, 0xc4, 0xe7,
	0x22, 0x10, 0xa7, 0x50, 0x65, 0x1d, 0xba, 0xa9, 0x44, 0x8c, 0x43, 0x3f, 0x0a, 0x13, 0x37, 0x98,
	0x80, 0xd1, 0xb7, 0x7f, 0x2f, 0xac, 0xca, 0x9f, 0x85, 0x55, 0xb9, 0x5e, 0x58, 0xe4, 0x66, 0x61,
	0x91, 0xdb, 0x85, 0x45, 0xae, 0x96, 0x16, 0xf9, 0xb1, 0xb4, 0xc8, 0xf5, 0xd2, 0x22, 0xb7, 0x4b,
	0x8b, 0x5c, 0xfd, 0xb3, 0xc8, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x95, 0x46, 0xdd, 0xbb,
	0x05, 0x00, 0x00,
}

func (this *BananaTuple) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return BananaDescription()
}
func BananaDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4321 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5b, 0x5b, 0x70, 0xdc, 0xd6,
		0x79, 0xd6, 0xde, 0xc8, 0xdd, 0x7f, 0x97, 0xcb, 0xc3, 0x43, 0x8a, 0x5a, 0xd1, 0x36, 0x25, 0xd1,
		0x37, 0x5a, 0x8e, 0x29, 0x8f, 0x2c, 0xc9, 0xf6, 0x2a, 0x89, 0xcb, 0xcb, 0x8a, 0x59, 0x97, 0xb7,
		0x60, 0xc9, 0xd8, 0x72, 0xa6, 0xc5, 0x80, 0xd8, 0xc3, 0x25, 0x24, 0x2c, 0x00, 0x03, 0x58, 0x51,
		0xab, 0xe9, 0x83, 0x3a, 0xee, 0x65, 0x32, 0xbd, 0x5f, 0x66, 0x9a, 0x38, 0x8e, 0x9b, 0xa4, 0xd3,
		0x38, 0x4d, 0xaf, 0xe9, 0x25, 0x6d, 0x92, 0x97, 0xbe, 0xa4, 0xf5, 0x4b, 0x3b, 0xcd, 0x5b, 0x1f,
		0x3a, 0x1d, 0xcb, 0xf1, 0x4c, 0x6f, 0x6e, 0xeb, 0xb6, 0x7a, 0xf0, 0x8c, 0x5f, 0x3a, 0xe7, 0x86,
		0x05, 0x16, 0x4b, 0x61, 0x99, 0x19, 0x3b, 0x4f, 0x5c, 0x7c, 0xe7, 0xff, 0x3e, 0xfc, 0xf8, 0xcf,
		0x7f, 0xce, 0xf9, 0xcf, 0x01, 0x08, 0x6f, 0x56, 0xe1, 0x74, 0xcb, 0xb6, 0x5b, 0x26, 0x39, 0xe7,
		0xb8, 0xb6, 0x6f, 0xef, 0x76, 0xf6, 0xce, 0x35, 0x89, 0xa7, 0xbb, 0x86, 0xe3, 0xdb, 0xee, 0x02,
		0xc3, 0xf0, 0x38, 0xb7, 0x58, 0x90, 0x16, 0x73, 0xeb, 0x30, 0x71, 0xc5, 0x30, 0xc9, 0x4a, 0x60,
		0xd8, 0x20, 0x3e, 0x7e, 0x06, 0xb2, 0x7b, 0x86, 0x49, 0x2a, 0xa9, 0xd3, 0x99, 0xf9, 0xe2, 0xf9,
		0x87, 0x16, 0xfa, 0x48, 0x0b, 0x51, 0xc6, 0x16, 0x85, 0x15, 0xc6, 0x98, 0x7b, 0x27, 0x0b, 0x93,
		0x03, 0x5a, 0x31, 0x86, 0xac, 0xa5, 0xb5, 0xa9, 0x62, 0x6a, 0xbe, 0xa0, 0xb0, 0xdf, 0xb8, 0x02,
		0xa3, 0x8e, 0xa6, 0x5f, 0xd7, 0x5a, 0xa4, 0x92, 0x66, 0xb0, 0xbc, 0xc4, 0xb3, 0x00, 0x4d, 0xe2,
		0x10, 0xab, 0x49, 0x2c, 0xbd, 0x5b, 0xc9, 0x9c, 0xce, 0xcc, 0x17, 0x94, 0x10, 0x82, 0x1f, 0x87,
		0x09, 0xa7, 0xb3, 0x6b, 0x1a, 0xba, 0x1a, 0x32, 0x83, 0xd3, 0x99, 0xf9, 0x9c, 0x82, 0x78, 0xc3,
		0x4a, 0xcf, 0xf8, 0x51, 0x18, 0x3f, 0x20, 0xda, 0xf5, 0xb0, 0x69, 0x91, 0x99, 0x96, 0x29, 0x1c,
		0x32, 0x5c, 0x86, 0x52, 0x9b, 0x78, 0x9e, 0xd6, 0x22, 0xaa, 0xdf, 0x75, 0x48, 0x25, 0xcb, 0x9e,
		0xfe, 0x74, 0xec, 0xe9, 0xfb, 0x9f, 0xbc, 0x28, 0x58, 0xdb, 0x5d, 0x87, 0xe0, 0x45, 0x28, 0x10,
		0xab, 0xd3, 0xe6, 0x0a, 0xb9, 0x43, 0xe2, 0x57, 0xb3, 0x3a, 0xed, 0x7e, 0x95, 0x3c, 0xa5, 0x09,
		0x89, 0x51, 0x8f, 0xb8, 0x37, 0x0c, 0x9d, 0x54, 0x46, 0x98, 0xc0, 0xa3, 0x31, 0x81, 0x06, 0x6f,
		0xef, 0xd7, 0x90, 0x3c, 0xbc, 0x0c, 0x05, 0x72, 0xd3, 0x27, 0x96, 0x67, 0xd8, 0x56, 0x65, 0x94,
		0x89, 0x3c, 0x3c, 0xa0, 0x17, 0x89, 0xd9, 0xec, 0x97, 0xe8, 0xf1, 0xf0, 0x25, 0x18, 0xb5, 0x1d,
		0xdf, 0xb0, 0x2d, 0xaf, 0x92, 0x3f, 0x9d, 0x9a, 0x2f, 0x9e, 0xbf, 0x7f, 0x60, 0x22, 0x6c, 0x72,
		0x1b, 0x45, 0x1a, 0xe3, 0x3a, 0x20, 0xcf, 0xee, 0xb8, 0x3a, 0x51, 0x75, 0xbb, 0x49, 0x54, 0xc3,
		0xda, 0xb3, 0x2b, 0x05, 0x26, 0x70, 0x2a, 0xfe, 0x20, 0xcc, 0x70, 0xd9, 0x6e, 0x92, 0xba, 0xb5,
		0x67, 0x2b, 0x65, 0x2f, 0x72, 0x8d, 0xa7, 0x61, 0xc4, 0xeb, 0x5a, 0xbe, 0x76, 0xb3, 0x52, 0x62,
		0x19, 0x22, 0xae, 0xe6, 0xbe, 0x3d, 0x02, 0xe3, 0xc3, 0xa4, 0xd8, 0x65, 0xc8, 0xed, 0xd1, 0xa7,
		0xac, 0xa4, 0x8f, 0x12, 0x03, 0xce, 0x89, 0x06, 0x71, 0xe4, 0x87, 0x0c, 0xe2, 0x22, 0x14, 0x2d,
		0xe2, 0xf9, 0xa4, 0xc9, 0x33, 0x22, 0x33, 0x64, 0x4e, 0x01, 0x27, 0xc5, 0x53, 0x2a, 0xfb, 0x43,
		0xa5, 0xd4, 0x8b, 0x30, 0x1e, 0xb8, 0xa4, 0xba, 0x9a, 0xd5, 0x92, 0xb9, 0x79, 0x2e, 0xc9, 0x93,
		0x85, 0x9a, 0xe4, 0x29, 0x94, 0xa6, 0x94, 0x49, 0xe4, 0x1a, 0xaf, 0x00, 0xd8, 0x16, 0xb1, 0xf7,
		0xd4, 0x26, 0xd1, 0xcd, 0x4a, 0xfe, 0x90, 0x28, 0x6d, 0x52, 0x93, 0x58, 0x94, 0x6c, 0x8e, 0xea,
		0x26, 0x7e, 0xb6, 0x97, 0x6a, 0xa3, 0x87, 0x64, 0xca, 0x3a, 0x1f, 0x64, 0xb1, 0x6c, 0xdb, 0x81,
		0xb2, 0x4b, 0x68, 0xde, 0x93, 0xa6, 0x78, 0xb2, 0x02, 0x73, 0x62, 0x21, 0xf1, 0xc9, 0x14, 0x41,
		0xe3, 0x0f, 0x36, 0xe6, 0x86, 0x2f, 0xf1, 0x83, 0x10, 0x00, 0x2a, 0x4b, 0x2b, 0x60, 0xb3, 0x50,
		0x49, 0x82, 0x1b, 0x5a, 0x9b, 0xcc, 0xdc, 0x82, 0x72, 0x34, 0x3c, 0x78, 0x0a, 0x72, 0x9e, 0xaf,
		0xb9, 0x3e, 0xcb, 0xc2, 0x9c, 0xc2, 0x2f, 0x30, 0x82, 0x0c, 0xb1, 0x9a, 0x6c, 0x96, 0xcb, 0x29,
		0xf4, 0x27, 0xfe, 0xb1, 0xde, 0x03, 0x67, 0xd8, 0x03, 0x3f, 0x12, 0xef, 0xd1, 0x88, 0x72, 0xff,
		0x73, 0xcf, 0x3c, 0x0d, 0x63, 0x91, 0x07, 0x18, 0xf6, 0xd6, 0x73, 0x3f, 0x05, 0xc7, 0x07, 0x4a,
		0xe3, 0x17, 0x61, 0xaa, 0x63, 0x19, 0x96, 0x4f, 0x5c, 0xc7, 0x25, 0x34, 0x63, 0xf9, 0xad, 0x2a,
		0xff, 0x32, 0x7a, 0x48, 0xce, 0xed, 0x84, 0xad, 0xb9, 0x8a, 0x32, 0xd9, 0x89, 0x83, 0x67, 0x0b,
		0xf9, 0x7f, 0x1d, 0x45, 0xb7, 0x6f, 0xdf, 0xbe, 0x9d, 0x9e, 0xfb, 0xfc, 0x08, 0x4c, 0x0d, 0x1a,
		0x33, 0x03, 0x87, 0xef, 0x34, 0x8c, 0x58, 0x9d, 0xf6, 0x2e, 0x71, 0x59, 0x90, 0x72, 0x8a, 0xb8,
		0xc2, 0x8b, 0x90, 0x33, 0xb5, 0x5d, 0x62, 0x56, 0xb2, 0xa7, 0x53, 0xf3, 0xe5, 0xf3, 0x8f, 0x0f,
		0x35, 0x2a, 0x17, 0xd6, 0x28, 0x45, 0xe1, 0x4c, 0xfc, 0x49, 0xc8, 0x8a, 0x29, 0x9a, 0x2a, 0x9c,
		0x1d, 0x4e, 0x81, 0x8e, 0x25, 0x85, 0xf1, 0xf0, 0x7d, 0x50, 0xa0, 0x7f, 0x79, 0x6e, 0x8c, 0x30,
		0x9f, 0xf3, 0x14, 0xa0, 0x79, 0x81, 0x67, 0x20, 0xcf, 0x86, 0x49, 0x93, 0xc8, 0xa5, 0x2d, 0xb8,
		0xa6, 0x89, 0xd5, 0x24, 0x7b, 0x5a, 0xc7, 0xf4, 0xd5, 0x1b, 0x9a, 0xd9, 0x21, 0x2c, 0xe1, 0x0b,
		0x4a, 0x49, 0x80, 0x9f, 0xa1, 0x18, 0x3e, 0x05, 0x45, 0x3e, 0xaa, 0x0c, 0xab, 0x49, 0x6e, 0xb2,
		0xd9, 0x33, 0xa7, 0xf0, 0x81, 0x56, 0xa7, 0x08, 0xbd, 0xfd, 0x35, 0xcf, 0xb6, 0x64, 0x6a, 0xb2,
		0x5b, 0x50, 0x80, 0xdd, 0xfe, 0xe9, 0xfe, 0x89, 0xfb, 0x81, 0xc1, 0x8f, 0xd7, 0x9f, 0x53, 0x73,
		0xdf, 0x4a, 0x43, 0x96, 0xcd, 0x17, 0xe3, 0x50, 0xdc, 0xbe, 0xba, 0x55, 0x53, 0x57, 0x36, 0x77,
		0x96, 0xd6, 0x6a, 0x28, 0x85, 0xcb, 0x00, 0x0c, 0xb8, 0xb2, 0xb6, 0xb9, 0xb8, 0x8d, 0xd2, 0xc1,
		0x75, 0x7d, 0x63, 0xfb, 0xd2, 0x05, 0x94, 0x09, 0x08, 0x3b, 0x1c, 0xc8, 0x86, 0x0d, 0x9e, 0x3a,
		0x8f, 0x72, 0x18, 0x41, 0x89, 0x0b, 0xd4, 0x5f, 0xac, 0xad, 0x5c, 0xba, 0x80, 0x46, 0xa2, 0xc8,
		0x53, 0xe7, 0xd1, 0x28, 0x1e, 0x83, 0x02, 0x43, 0x96, 0x36, 0x37, 0xd7, 0x50, 0x3e, 0xd0, 0x6c,
		0x6c, 0x2b, 0xf5, 0x8d, 0x55, 0x54, 0x08, 0x34, 0x57, 0x95, 0xcd, 0x9d, 0x2d, 0x04, 0x81, 0xc2,
		0x7a, 0xad, 0xd1, 0x58, 0x5c, 0xad, 0xa1, 0x62, 0x60, 0xb1, 0x74, 0x75, 0xbb, 0xd6, 0x40, 0xa5,
		0x88, 0x5b, 0x4f, 0x9d, 0x47, 0x63, 0xc1, 0x2d, 0x6a, 0x1b, 0x3b, 0xeb, 0xa8, 0x8c, 0x27, 0x60,
		0x8c, 0xdf, 0x42, 0x3a, 0x31, 0xde, 0x07, 0x5d, 0xba, 0x80, 0x50, 0xcf, 0x11, 0xae, 0x32, 0x11,
		0x01, 0x2e, 0x5d, 0x40, 0x78, 0x6e, 0x19, 0x72, 0x2c, 0xbb, 0x30, 0x86, 0xf2, 0xda, 0xe2, 0x52,
		0x6d, 0x4d, 0xdd, 0xdc, 0xda, 0xae, 0x6f, 0x6e, 0x2c, 0xae, 0xa1, 0x54, 0x0f, 0x53, 0x6a, 0x9f,
		0xde, 0xa9, 0x2b, 0xb5, 0x15, 0x94, 0x0e, 0x63, 0x5b, 0xb5, 0xc5, 0xed, 0xda, 0x0a, 0xca, 0xcc,
		0xe9, 0x30, 0x35, 0x68, 0x9e, 0x1c, 0x38, 0x32, 0x42, 0x5d, 0x9c, 0x3e, 0xa4, 0x8b, 0x99, 0x56,
		0xac, 0x8b, 0x7f, 0x90, 0x86, 0xc9, 0x01, 0x6b, 0xc5, 0xc0, 0x9b, 0x3c, 0x07, 0x39, 0x9e, 0xa2,
		0x7c, 0xf5, 0x7c, 0x6c, 0xe0, 0xa2, 0xc3, 0x12, 0x36, 0xb6, 0x82, 0x32, 0x5e, 0xb8, 0x82, 0xc8,
		0x1c, 0x52, 0x41, 0x50, 0x89, 0xd8, 0x9c, 0xfe, 0x13, 0xb1, 0x39, 0x9d, 0x2f, 0x7b, 0x97, 0x86,
		0x59, 0xf6, 0x18, 0x76, 0xb4, 0xb9, 0x3d, 0x37, 0x60, 0x6e, 0xbf, 0x0c, 0x13, 0x31, 0xa1, 0xa1,
		0xe7, 0xd8, 0x57, 0x52, 0x50, 0x39, 0x2c, 0x38, 0x09, 0x33, 0x5d, 0x3a, 0x32, 0xd3, 0x5d, 0xee,
		0x8f, 0xe0, 0x99, 0xc3, 0x3b, 0x21, 0xd6, 0xd7, 0x6f, 0xa4, 0x60, 0x7a, 0x70, 0xa5, 0x38, 0xd0,
		0x87, 0x4f, 0xc2, 0x48, 0x9b, 0xf8, 0xfb, 0xb6, 0xac, 0x96, 0x1e, 0x19, 0xb0, 0x06, 0xd3, 0xe6,
		0xfe, 0xce, 0x16, 0xac, 0xf0, 0x22, 0x9e, 0x39, 0xac, 0xdc, 0xe3, 0xde, 0xc4, 0x3c, 0xfd, 0x5c,
		0x1a, 0x8e, 0x0f, 0x14, 0x1f, 0xe8, 0xe8, 0x03, 0x00, 0x86, 0xe5, 0x74, 0x7c, 0x5e, 0x11, 0xf1,
		0x09, 0xb6, 0xc0, 0x10, 0x36, 0x79, 0xd1, 0xc9, 0xb3, 0xe3, 0x07, 0xed, 0x19, 0xd6, 0x0e, 0x1c,
		0x62, 0x06, 0xcf, 0xf4, 0x1c, 0xcd, 0x32, 0x47, 0x67, 0x0f, 0x79, 0xd2, 0x58, 0x62, 0x3e, 0x09,
		0x48, 0x37, 0x0d, 0x62, 0xf9, 0xaa, 0xe7, 0xbb, 0x44, 0x6b, 0x1b, 0x56, 0x8b, 0xad, 0x20, 0xf9,
		0x6a, 0x6e, 0x4f, 0x33, 0x3d, 0xa2, 0x8c, 0xf3, 0xe6, 0x86, 0x6c, 0xa5, 0x0c, 0x96, 0x40, 0x6e,
		0x88, 0x31, 0x12, 0x61, 0xf0, 0xe6, 0x80, 0x31, 0xf7, 0x8b, 0x05, 0x28, 0x86, 0xea, 0x6a, 0x7c,
		0x06, 0x4a, 0xd7, 0xb4, 0x1b, 0x9a, 0x2a, 0xf7, 0x4a, 0x3c, 0x12, 0x45, 0x8a, 0x6d, 0x89, 0xfd,
		0xd2, 0x93, 0x30, 0xc5, 0x4c, 0xec, 0x8e, 0x4f, 0x5c, 0x55, 0x37, 0x35, 0xcf, 0x63, 0x41, 0xcb,
		0x33, 0x53, 0x4c, 0xdb, 0x36, 0x69, 0xd3, 0xb2, 0x6c, 0xc1, 0x17, 0x61, 0x92, 0x31, 0xda, 0x1d,
		0xd3, 0x37, 0x1c, 0x93, 0xa8, 0x74, 0xf7, 0xe6, 0xb1, 0x95, 0x24, 0xf0, 0x6c, 0x82, 0x5a, 0xac,
		0x0b, 0x03, 0xea, 0x91, 0x87, 0x57, 0xe0, 0x01, 0x46, 0x6b, 0x11, 0x8b, 0xb8, 0x9a, 0x4f, 0x54,
		0xf2, 0x72, 0x47, 0x33, 0x3d, 0x55, 0xb3, 0x9a, 0xea, 0xbe, 0xe6, 0xed, 0x57, 0xa6, 0xa8, 0xc0,
		0x52, 0xba, 0x92, 0x52, 0x4e, 0x52, 0xc3, 0x55, 0x61, 0x57, 0x63, 0x66, 0x8b, 0x56, 0xf3, 0x53,
		0x9a, 0xb7, 0x8f, 0xab, 0x30, 0xcd, 0x54, 0x3c, 0xdf, 0x35, 0xac, 0x96, 0xaa, 0xef, 0x13, 0xfd,
		0xba, 0xda, 0xf1, 0xf7, 0x9e, 0xa9, 0xdc, 0x17, 0xbe, 0x3f, 0xf3, 0xb0, 0xc1, 0x6c, 0x96, 0xa9,
		0xc9, 0x8e, 0xbf, 0xf7, 0x0c, 0x6e, 0x40, 0x89, 0x76, 0x46, 0xdb, 0xb8, 0x45, 0xd4, 0x3d, 0xdb,
		0x65, 0x4b, 0x63, 0x79, 0xc0, 0xd4, 0x14, 0x8a, 0xe0, 0xc2, 0xa6, 0x20, 0xac, 0xdb, 0x4d, 0x52,
		0xcd, 0x35, 0xb6, 0x6a, 0xb5, 0x15, 0xa5, 0x28, 0x55, 0xae, 0xd8, 0x2e, 0x4d, 0xa8, 0x96, 0x1d,
		0x04, 0xb8, 0xc8, 0x13, 0xaa, 0x65, 0xcb, 0xf0, 0x5e, 0x84, 0x49, 0x5d, 0xe7, 0xcf, 0x6c, 0xe8,
		0xaa, 0xd8, 0x63, 0x79, 0x15, 0x14, 0x09, 0x96, 0xae, 0xaf, 0x72, 0x03, 0x91, 0xe3, 0x1e, 0x7e,
		0x16, 0x8e, 0xf7, 0x82, 0x15, 0x26, 0x4e, 0xc4, 0x9e, 0xb2, 0x9f, 0x7a, 0x11, 0x26, 0x9d, 0x6e,
		0x9c, 0x88, 0x23, 0x77, 0x74, 0xba, 0xfd, 0xb4, 0xa7, 0x61, 0xca, 0xd9, 0x77, 0xe2, 0xbc, 0xb3,
		0x61, 0x1e, 0x76, 0xf6, 0x9d, 0x7e, 0xe2, 0xc3, 0x6c, 0xc3, 0xed, 0x12, 0x5d, 0xf3, 0x49, 0xb3,
		0x72, 0x22, 0x6c, 0x1e, 0x6a, 0xc0, 0xe7, 0x00, 0xe9, 0xba, 0x4a, 0x2c, 0x6d, 0xd7, 0x24, 0xaa,
		0xe6, 0x12, 0x4b, 0xf3, 0x2a, 0xa7, 0xc2, 0xc6, 0x65, 0x5d, 0xaf, 0xb1, 0xd6, 0x45, 0xd6, 0x88,
		0xcf, 0xc2, 0x84, 0xbd, 0x7b, 0x4d, 0xe7, 0x29, 0xa9, 0x3a, 0x2e, 0xd9, 0x33, 0x6e, 0x56, 0x1e,
		0x62, 0xf1, 0x1d, 0xa7, 0x0d, 0x2c, 0x21, 0xb7, 0x18, 0x8c, 0x1f, 0x03, 0xa4, 0x7b, 0xfb, 0x9a,
		0xeb, 0xb0, 0x39, 0xd9, 0x73, 0x34, 0x9d, 0x54, 0x1e, 0xe6, 0xa6, 0x1c, 0xdf, 0x90, 0x30, 0x1d,
		0x12, 0xde, 0x81, 0xb1, 0xe7, 0x4b, 0xc5, 0x47, 0xf9, 0x90, 0x60, 0x98, 0x50, 0x9b, 0x07, 0x44,
		0x43, 0x11, 0xb9, 0xf1, 0x3c, 0x33, 0x2b, 0x3b, 0xfb, 0x4e, 0xf8, 0xbe, 0x0f, 0xc2, 0x18, 0xb5,
		0xec, 0xdd, 0xf4, 0x31, 0x5e, 0x90, 0x39, 0xfb, 0xa1, 0x3b, 0x5e, 0x80, 0x69, 0x6a, 0xd4, 0x26,
		0xbe, 0xd6, 0xd4, 0x7c, 0x2d, 0x64, 0xfd, 0x31, 0x66, 0x4d, 0xe3, 0xbe, 0x2e, 0x1a, 0x23, 0x7e,
		0xba, 0x9d, 0xdd, 0x6e, 0x90, 0x59, 0x4f, 0x70, 0x3f, 0x29, 0x26, 0x73, 0xeb, 0x43, 0x2b, 0xba,
		0xe7, 0xaa, 0x50, 0x0a, 0x27, 0x3e, 0x2e, 0x00, 0x4f, 0x7d, 0x94, 0xa2, 0x55, 0xd0, 0xf2, 0xe6,
		0x0a, 0xad, 0x5f, 0x5e, 0xaa, 0xa1, 0x34, 0xad, 0xa3, 0xd6, 0xea, 0xdb, 0x35, 0x55, 0xd9, 0xd9,
		0xd8, 0xae, 0xaf, 0xd7, 0x50, 0x26, 0x5c, 0xb0, 0x7f, 0x2f, 0x0d, 0xe5, 0xe8, 0xde, 0x0b, 0x7f,
		0x1c, 0x4e, 0xc8, 0x83, 0x12, 0x8f, 0xf8, 0xea, 0x81, 0xe1, 0xb2, 0xb1, 0xd8, 0xd6, 0xf8, 0xba,
		0x18, 0x64, 0xc3, 0x94, 0xb0, 0x6a, 0x10, 0xff, 0x05, 0xc3, 0xa5, 0x23, 0xad, 0xad, 0xf9, 0x78,
		0x0d, 0x4e, 0x59, 0xb6, 0xea, 0xf9, 0x9a, 0xd5, 0xd4, 0xdc, 0xa6, 0xda, 0x3b, 0xa2, 0x52, 0x35,
		0x5d, 0x27, 0x9e, 0x67, 0xf3, 0x35, 0x30, 0x50, 0xb9, 0xdf, 0xb2, 0x1b, 0xc2, 0xb8, 0xb7, 0x38,
		0x2c, 0x0a, 0xd3, 0xbe, 0xcc, 0xcd, 0x1c, 0x96, 0xb9, 0xf7, 0x41, 0xa1, 0xad, 0x39, 0x2a, 0xb1,
		0x7c, 0xb7, 0xcb, 0x2a, 0xee, 0xbc, 0x92, 0x6f, 0x6b, 0x4e, 0x8d, 0x5e, 0x7f, 0x34, 0x1b, 0x9f,
		0x7f, 0xca, 0x40, 0x29, 0x5c, 0x75, 0xd3, 0x4d, 0x8c, 0xce, 0x16, 0xa8, 0x14, 0x9b, 0xc2, 0x1e,
		0xbc, 0x67, 0x8d, 0xbe, 0xb0, 0x4c, 0x57, 0xae, 0xea, 0x08, 0xaf, 0x85, 0x15, 0xce, 0xa4, 0x55,
		0x03, 0x4d, 0x2d, 0xc2, 0x6b, 0x8f, 0xbc, 0x22, 0xae, 0xf0, 0x2a, 0x8c, 0x5c, 0xf3, 0x98, 0xf6,
		0x08, 0xd3, 0x7e, 0xe8, 0xde, 0xda, 0xcf, 0x37, 0x98, 0x78, 0xe1, 0xf9, 0x86, 0xba, 0xb1, 0xa9,
		0xac, 0x2f, 0xae, 0x29, 0x82, 0x8e, 0x4f, 0x42, 0xd6, 0xd4, 0x6e, 0x75, 0xa3, 0x6b, 0x1c, 0x83,
		0x86, 0x0d, 0xfc, 0x49, 0xc8, 0x1e, 0x10, 0xed, 0x7a, 0x74, 0x65, 0x61, 0xd0, 0x87, 0x98, 0xfa,
		0xe7, 0x20, 0xc7, 0xe2, 0x85, 0x01, 0x44, 0xc4, 0xd0, 0x31, 0x9c, 0x87, 0xec, 0xf2, 0xa6, 0x42,
		0xd3, 0x1f, 0x41, 0x89, 0xa3, 0xea, 0x56, 0xbd, 0xb6, 0x5c, 0x43, 0xe9, 0xb9, 0x8b, 0x30, 0xc2,
		0x83, 0x40, 0x87, 0x46, 0x10, 0x06, 0x74, 0x4c, 0x5c, 0x0a, 0x8d, 0x94, 0x6c, 0xdd, 0x59, 0x5f,
		0xaa, 0x29, 0x28, 0x1d, 0xee, 0x5e, 0x0f, 0x4a, 0xe1, 0x82, 0xfb, 0xa3, 0xc9, 0xa9, 0xef, 0xa4,
		0xa0, 0x18, 0x2a, 0xa0, 0x69, 0xe5, 0xa3, 0x99, 0xa6, 0x7d, 0xa0, 0x6a, 0xa6, 0xa1, 0x79, 0x22,
		0x29, 0x80, 0x41, 0x8b, 0x14, 0x19, 0xb6, 0xd3, 0x3e, 0x12, 0xe7, 0x5f, 0x4f, 0x01, 0xea, 0xaf,
		0x5d, 0xfb, 0x1c, 0x4c, 0xfd, 0x48, 0x1d, 0x7c, 0x2d, 0x05, 0xe5, 0x68, 0xc1, 0xda, 0xe7, 0xde,
		0x99, 0x1f, 0xa9, 0x7b, 0x6f, 0xa5, 0x61, 0x2c, 0x52, 0xa6, 0x0e, 0xeb, 0xdd, 0xcb, 0x30, 0x61,
		0x34, 0x49, 0xdb, 0xb1, 0x7d, 0x62, 0xe9, 0x5d, 0xd5, 0x24, 0x37, 0x88, 0x59, 0x99, 0x63, 0x13,
		0xc5, 0xb9, 0x7b, 0x17, 0xc2, 0x0b, 0xf5, 0x1e, 0x6f, 0x8d, 0xd2, 0xaa, 0x93, 0xf5, 0x95, 0xda,
		0xfa, 0xd6, 0xe6, 0x76, 0x6d, 0x63, 0xf9, 0xaa, 0xba, 0xb3, 0xf1, 0xe3, 0x1b, 0x9b, 0x2f, 0x6c,
		0x28, 0xc8, 0xe8, 0x33, 0xfb, 0x10, 0x87, 0xfa, 0x16, 0xa0, 0x7e, 0xa7, 0xf0, 0x09, 0x18, 0xe4,
		0x16, 0x3a, 0x86, 0x27, 0x61, 0x7c, 0x63, 0x53, 0x6d, 0xd4, 0x57, 0x6a, 0x6a, 0xed, 0xca, 0x95,
		0xda, 0xf2, 0x76, 0x83, 0x1f, 0x6d, 0x04, 0xd6, 0xdb, 0xd1, 0x41, 0xfd, 0x6a, 0x06, 0x26, 0x07,
		0x78, 0x82, 0x17, 0xc5, 0xa6, 0x84, 0xef, 0x93, 0x9e, 0x18, 0xc6, 0xfb, 0x05, 0x5a, 0x15, 0x6c,
		0x69, 0xae, 0x2f, 0xf6, 0x30, 0x8f, 0x01, 0x8d, 0x92, 0xe5, 0x1b, 0x7b, 0x06, 0x71, 0xc5, 0x49,
		0x10, 0xdf, 0xa9, 0x8c, 0xf7, 0x70, 0x7e, 0x18, 0xf4, 0x31, 0xc0, 0x8e, 0xed, 0x19, 0xbe, 0x71,
		0x83, 0xa8, 0x86, 0x25, 0x8f, 0x8d, 0xe8, 0xce, 0x25, 0xab, 0x20, 0xd9, 0x52, 0xb7, 0xfc, 0xc0,
		0xda, 0x22, 0x2d, 0xad, 0xcf, 0x9a, 0x4e, 0xe0, 0x19, 0x05, 0xc9, 0x96, 0xc0, 0xfa, 0x0c, 0x94,
		0x9a, 0x76, 0x87, 0x96, 0x73, 0xdc, 0x8e, 0xae, 0x17, 0x29, 0xa5, 0xc8, 0xb1, 0xc0, 0x44, 0x14,
		0xea, 0xbd, 0xf3, 0xaa, 0x92, 0x52, 0xe4, 0x18, 0x37, 0x79, 0x14, 0xc6, 0xb5, 0x56, 0xcb, 0xa5,
		0xe2, 0x52, 0x88, 0x6f, 0x3d, 0xca, 0x01, 0xcc, 0x0c, 0x67, 0x9e, 0x87, 0xbc, 0x8c, 0x03, 0x5d,
		0x92, 0x69, 0x24, 0x54, 0x87, 0xef, 0xa7, 0xd3, 0xf3, 0x05, 0x25, 0x6f, 0xc9, 0xc6, 0x33, 0x50,
		0x32, 0x3c, 0xb5, 0x77, 0xfc, 0x9e, 0x3e, 0x9d, 0x9e, 0xcf, 0x2b, 0x45, 0xc3, 0x0b, 0x8e, 0x2e,
		0xe7, 0xde, 0x48, 0x43, 0x39, 0xfa, 0xfa, 0x00, 0xaf, 0x40, 0xde, 0xb4, 0x75, 0x8d, 0xa5, 0x16,
		0x7f, 0x77, 0x35, 0x9f, 0xf0, 0xc6, 0x61, 0x61, 0x4d, 0xd8, 0x2b, 0x01, 0x73, 0xe6, 0xef, 0x53,
		0x90, 0x97, 0x30, 0x9e, 0x86, 0xac, 0xa3, 0xf9, 0xfb, 0x4c, 0x2e, 0xb7, 0x94, 0x46, 0x29, 0x85,
		0x5d, 0x53, 0xdc, 0x73, 0x34, 0x8b, 0xa5, 0x80, 0xc0, 0xe9, 0x35, 0xed, 0x57, 0x93, 0x68, 0x4d,
		0xb6, 0xaf, 0xb1, 0xdb, 0x6d, 0x62, 0xf9, 0x9e, 0xec, 0x57, 0x81, 0x2f, 0x0b, 0x18, 0x3f, 0x0e,
		0x13, 0xbe, 0xab, 0x19, 0x66, 0xc4, 0x36, 0xcb, 0x6c, 0x91, 0x6c, 0x08, 0x8c, 0xab, 0x70, 0x52,
		0xea, 0x36, 0x89, 0xaf, 0xe9, 0xfb, 0xa4, 0xd9, 0x23, 0x8d, 0xb0, 0xf3, 0x8b, 0x13, 0xc2, 0x60,
		0x45, 0xb4, 0x4b, 0xee, 0xdc, 0xf7, 0x53, 0x30, 0x21, 0x77, 0x62, 0xcd, 0x20, 0x58, 0xeb, 0x00,
		0x9a, 0x65, 0xd9, 0x7e, 0x38, 0x5c, 0xf1, 0x54, 0x8e, 0xf1, 0x16, 0x16, 0x03, 0x92, 0x12, 0x12,
		0x98, 0x69, 0x03, 0xf4, 0x5a, 0x0e, 0x0d, 0xdb, 0x29, 0x28, 0x8a, 0x77, 0x43, 0xec, 0x05, 0x23,
		0xdf, 0xbb, 0x03, 0x87, 0xe8, 0x96, 0x0d, 0x4f, 0x41, 0x6e, 0x97, 0xb4, 0x0c, 0x4b, 0x9c, 0xf8,
		0xf2, 0x0b, 0x79, 0xc2, 0x92, 0x0d, 0x4e, 0x58, 0x96, 0x3e, 0x0b, 0x93, 0xba, 0xdd, 0xee, 0x77,
		0x77, 0x09, 0xf5, 0x9d, 0x1f, 0x78, 0x9f, 0x4a, 0xbd, 0x04, 0xbd, 0x12, 0xf3, 0xfd, 0x54, 0xea,
		0xab, 0xe9, 0xcc, 0xea, 0xd6, 0xd2, 0x37, 0xd2, 0x33, 0xab, 0x9c, 0xba, 0x25, 0x9f, 0x54, 0x21,
		0x7b, 0x26, 0xd1, 0xa9, 0xf7, 0xf0, 0xb5, 0xc7, 0xe1, 0x89, 0x96, 0xe1, 0xef, 0x77, 0x76, 0x17,
		0x74, 0xbb, 0x7d, 0xae, 0x65, 0xb7, 0xec, 0xde, 0x3b, 0x55, 0x7a, 0xc5, 0x2e, 0xd8, 0x2f, 0xf1,
		0x5e, 0xb5, 0x10, 0xa0, 0x33, 0x89, 0x2f, 0x61, 0xab, 0x1b, 0x30, 0x29, 0x8c, 0x55, 0xf6, 0x62,
		0x87, 0x6f, 0x4f, 0xf0, 0x3d, 0x0f, 0xc7, 0x2a, 0xdf, 0x7c, 0x87, 0x2d, 0xd7, 0xca, 0x84, 0xa0,
		0xd2, 0x36, 0xbe, 0x83, 0xa9, 0x2a, 0x70, 0x3c, 0xa2, 0xc7, 0x87, 0x26, 0x71, 0x13, 0x14, 0xbf,
		0x27, 0x14, 0x27, 0x43, 0x8a, 0x0d, 0x41, 0xad, 0x2e, 0xc3, 0xd8, 0x51, 0xb4, 0xfe, 0x46, 0x68,
		0x95, 0x48, 0x58, 0x64, 0x15, 0xc6, 0x99, 0x88, 0xde, 0xf1, 0x7c, 0xbb, 0xcd, 0xe6, 0xbd, 0x7b,
		0xcb, 0xfc, 0xed, 0x3b, 0x7c, 0xac, 0x94, 0x29, 0x6d, 0x39, 0x60, 0x55, 0xab, 0xc0, 0xde, 0x65,
		0x35, 0x89, 0x6e, 0x26, 0x28, 0xbc, 0x29, 0x1c, 0x09, 0xec, 0xab, 0x9f, 0x81, 0x29, 0xfa, 0x9b,
		0x4d, 0x4b, 0x61, 0x4f, 0x92, 0x4f, 0xd2, 0x2a, 0xdf, 0x7f, 0x85, 0x0f, 0xc7, 0xc9, 0x40, 0x20,
		0xe4, 0x53, 0xa8, 0x17, 0x5b, 0xc4, 0xf7, 0x89, 0xeb, 0xa9, 0x9a, 0x39, 0xc8, 0xbd, 0xd0, 0x51,
		0x44, 0xe5, 0x0b, 0xef, 0x46, 0x7b, 0x71, 0x95, 0x33, 0x17, 0x4d, 0xb3, 0xba, 0x03, 0x27, 0x06,
		0x64, 0xc5, 0x10, 0x9a, 0xaf, 0x0a, 0xcd, 0xa9, 0x58, 0x66, 0x50, 0xd9, 0x2d, 0x90, 0x78, 0xd0,
		0x97, 0x43, 0x68, 0x7e, 0x51, 0x68, 0x62, 0xc1, 0x95, 0x5d, 0x4a, 0x15, 0x9f, 0x87, 0x89, 0x1b,
		0xc4, 0xdd, 0xb5, 0x3d, 0x71, 0xfc, 0x33, 0x84, 0xdc, 0x6b, 0x42, 0x6e, 0x5c, 0x10, 0xd9, 0x79,
		0x10, 0xd5, 0x7a, 0x16, 0xf2, 0x7b, 0x9a, 0x4e, 0x86, 0x90, 0xf8, 0x92, 0x90, 0x18, 0xa5, 0xf6,
		0x94, 0xba, 0x08, 0xa5, 0x96, 0x2d, 0x56, 0xa6, 0x64, 0xfa, 0xeb, 0x82, 0x5e, 0x94, 0x1c, 0x21,
		0xe1, 0xd8, 0x4e, 0xc7, 0xa4, 0xcb, 0x56, 0xb2, 0xc4, 0x6f, 0x4b, 0x09, 0xc9, 0x11, 0x12, 0x47,
		0x08, 0xeb, 0x97, 0xa5, 0x84, 0x17, 0x8a, 0xe7, 0x73, 0x50, 0xb4, 0x2d, 0xb3, 0x6b, 0x5b, 0xc3,
		0x38, 0xf1, 0x15, 0xa1, 0x00, 0x82, 0x42, 0x05, 0x2e, 0x43, 0x61, 0xd8, 0x8e, 0xf8, 0xdd, 0x77,
		0xe5, 0xf0, 0x90, 0x3d, 0xb0, 0x0a, 0xe3, 0x72, 0x82, 0x32, 0x6c, 0x6b, 0x08, 0x89, 0xaf, 0x09,
		0x89, 0x72, 0x88, 0x26, 0x1e, 0xc3, 0x27, 0x9e, 0xdf, 0x22, 0xc3, 0x88, 0xbc, 0x21, 0x1f, 0x43,
		0x50, 0x44, 0x28, 0x77, 0x89, 0xa5, 0xef, 0x0f, 0xa7, 0xf0, 0x75, 0x19, 0x4a, 0xc9, 0xa1, 0x12,
		0xcb, 0x30, 0xd6, 0xd6, 0x5c, 0x6f, 0x5f, 0x33, 0x87, 0xea, 0x8e, 0xdf, 0x13, 0x1a, 0xa5, 0x80,
		0x24, 0x22, 0xd2, 0xb1, 0x8e, 0x22, 0xf3, 0x0d, 0x19, 0x91, 0x10, 0x4d, 0x0c, 0x3d, 0xcf, 0x67,
		0x67, 0x65, 0x47, 0x51, 0xfb, 0x7d, 0x39, 0xf4, 0x38, 0x77, 0x3d, 0xac, 0x78, 0x19, 0x0a, 0x9e,
		0x71, 0x6b, 0x28, 0x99, 0x3f, 0x90, 0x3d, 0xcd, 0x08, 0x94, 0x7c, 0x15, 0x4e, 0x0e, 0x5c, 0x26,
		0x86, 0x10, 0xfb, 0x43, 0x21, 0x36, 0x3d, 0x60, 0xa9, 0x10, 0x53, 0xc2, 0x51, 0x25, 0xff, 0x48,
		0x4e, 0x09, 0xa4, 0x4f, 0x6b, 0x8b, 0xee, 0x15, 0x3c, 0x6d, 0xef, 0x68, 0x51, 0xfb, 0x63, 0x19,
		0x35, 0xce, 0x8d, 0x44, 0x6d, 0x1b, 0xa6, 0x85, 0xe2, 0xd1, 0xfa, 0xf5, 0x4f, 0xe4, 0xc4, 0xca,
		0xd9, 0x3b, 0xd1, 0xde, 0xfd, 0x2c, 0xcc, 0x04, 0xe1, 0x94, 0x45, 0xa9, 0xa7, 0xb6, 0x35, 0x67,
		0x08, 0xe5, 0x6f, 0x0a, 0x65, 0x39, 0xe3, 0x07, 0x55, 0xad, 0xb7, 0xae, 0x39, 0x54, 0xfc, 0x45,
		0xa8, 0x48, 0xf1, 0x8e, 0xe5, 0x12, 0xdd, 0x6e, 0x59, 0xc6, 0x2d, 0xd2, 0x1c, 0x42, 0xfa, 0x4f,
		0xfb, 0xba, 0x6a, 0x27, 0x44, 0xa7, 0xca, 0x75, 0x40, 0x41, 0xad, 0xa2, 0x1a, 0x6d, 0xc7, 0x76,
		0xfd, 0x04, 0xc5, 0x3f, 0x93, 0x3d, 0x15, 0xf0, 0xea, 0x8c, 0x56, 0xad, 0x41, 0x99, 0x5d, 0x0e,
		0x9b, 0x92, 0x7f, 0x2e, 0x84, 0xc6, 0x7a, 0x2c, 0x31, 0x71, 0xe8, 0x76, 0xdb, 0xd1, 0xdc, 0x61,
		0xe6, 0xbf, 0xbf, 0x90, 0x13, 0x87, 0xa0, 0x88, 0x89, 0xc3, 0xef, 0x3a, 0x84, 0xae, 0xf6, 0x43,
		0x28, 0x7c, 0x4b, 0x4e, 0x1c, 0x92, 0x23, 0x24, 0x64, 0xc1, 0x30, 0x84, 0xc4, 0x5f, 0x4a, 0x09,
		0xc9, 0xa1, 0x12, 0x9f, 0xee, 0x2d, 0xb4, 0x2e, 0x69, 0x19, 0x9e, 0xef, 0xf2, 0x52, 0xf8, 0xde,
		0x52, 0x7f, 0xf5, 0x6e, 0xb4, 0x08, 0x53, 0x42, 0x54, 0x3a, 0x13, 0x89, 0x23, 0x54, 0xb6, 0x53,
		0x4a, 0x76, 0xec, 0xdb, 0x72, 0x26, 0x0a, 0xd1, 0xa8, 0x6f, 0xa1, 0x0a, 0x91, 0x86, 0x5d, 0xa7,
		0xfb, 0x83, 0x21, 0xe4, 0xbe, 0xd3, 0xe7, 0x5c, 0x43, 0x72, 0xa9, 0x66, 0xa8, 0xfe, 0xe9, 0x58,
		0xd7, 0x49, 0x77, 0xa8, 0xec, 0xfc, 0x6e, 0x5f, 0xfd, 0xb3, 0xc3, 0x99, 0x7c, 0x0e, 0x19, 0xef,
		0xab, 0xa7, 0x70, 0xd2, 0x57, 0x40, 0x95, 0x9f, 0xbe, 0x2b, 0x9e, 0x37, 0x5a, 0x4e, 0x55, 0xd7,
		0x68, 0x92, 0x47, 0x8b, 0x9e, 0x64, 0xb1, 0x57, 0xee, 0x06, 0x79, 0x1e, 0xa9, 0x79, 0xaa, 0x57,
		0x60, 0x2c, 0x52, 0xf0, 0x24, 0x4b, 0xfd, 0x8c, 0x90, 0x2a, 0x85, 0xeb, 0x9d, 0xea, 0x45, 0xc8,
		0xd2, 0xe2, 0x25, 0x99, 0xfe, 0xb3, 0x82, 0xce, 0xcc, 0xab, 0x9f, 0x80, 0xbc, 0x2c, 0x5a, 0x92,
		0xa9, 0x3f, 0x27, 0xa8, 0x01, 0x85, 0xd2, 0x65, 0xc1, 0x92, 0x4c, 0xff, 0x79, 0x49, 0x97, 0x14,
		0x4a, 0x1f, 0x3e, 0x84, 0x7f, 0xfd, 0x0b, 0x59, 0xb1, 0xe8, 0xc8, 0xd8, 0x5d, 0x86, 0x51, 0x51,
		0xa9, 0x24, 0xb3, 0x3f, 0x27, 0x6e, 0x2e, 0x19, 0xd5, 0xa7, 0x21, 0x37, 0x64, 0xc0, 0x7f, 0x49,
		0x50, 0xb9, 0x7d, 0x75, 0x19, 0x8a, 0xa1, 0xea, 0x24, 0x99, 0xfe, 0xcb, 0x82, 0x1e, 0x66, 0x51,
		0xd7, 0x45, 0x75, 0x92, 0x2c, 0xf0, 0x2b, 0xd2, 0x75, 0xc1, 0xa0, 0x61, 0x93, 0x85, 0x49, 0x32,
		0xfb, 0x57, 0x65, 0xd4, 0x25, 0xa5, 0xfa, 0x1c, 0x14, 0x82, 0xc5, 0x26, 0x99, 0xff, 0x6b, 0x82,
		0xdf, 0xe3, 0xd0, 0x08, 0x84, 0x16, 0xbb, 0x64, 0x89, 0x5f, 0x97, 0x11, 0x08, 0xb1, 0xe8, 0x30,
		0xea, 0x2f, 0x60, 0x92, 0x95, 0x7e, 0x43, 0x0e, 0xa3, 0xbe, 0xfa, 0x85, 0xf6, 0x26, 0x9b, 0xf3,
		0x93, 0x25, 0x7e, 0x53, 0xf6, 0x26, 0xb3, 0xa7, 0x6e, 0xf4, 0x57, 0x04, 0xc9, 0x1a, 0xbf, 0x25,
		0xdd, 0xe8, 0x2b, 0x08, 0xaa, 0x5b, 0x80, 0xe3, 0xd5, 0x40, 0xb2, 0xde, 0xe7, 0x85, 0xde, 0x44,
		0xac, 0x18, 0xa8, 0xbe, 0x00, 0xd3, 0x83, 0x2b, 0x81, 0x64, 0xd5, 0x2f, 0xdc, 0xed, 0xdb, 0xbb,
		0x85, 0x0b, 0x81, 0xea, 0x76, 0x6f, 0x49, 0x09, 0x57, 0x01, 0xc9, 0xb2, 0xaf, 0xde, 0x8d, 0x4e,
		0xdc, 0xe1, 0x22, 0xa0, 0xba, 0x08, 0xd0, 0x5b, 0x80, 0x93, 0xb5, 0x5e, 0x13, 0x5a, 0x21, 0x12,
		0x1d, 0x1a, 0x62, 0xfd, 0x4d, 0xe6, 0x7f, 0x49, 0x0e, 0x0d, 0xc1, 0xa0, 0x43, 0x43, 0x2e, 0xbd,
		0xc9, 0xec, 0xd7, 0xe5, 0xd0, 0x90, 0x14, 0x9a, 0xd9, 0xa1, 0xd5, 0x2d, 0x59, 0xe1, 0x2b, 0x32,
		0xb3, 0x43, 0xac, 0xea, 0x06, 0x4c, 0xc4, 0x16, 0xc4, 0x64, 0xa9, 0xaf, 0x0a, 0x29, 0xd4, 0xbf,
		0x1e, 0x86, 0x17, 0x2f, 0xb1, 0x18, 0x26, 0xab, 0xfd, 0x4e, 0xdf, 0xe2, 0x25, 0xd6, 0xc2, 0xea,
		0x65, 0xc8, 0x5b, 0x1d, 0xd3, 0xa4, 0x83, 0x07, 0xdf, 0xfb, 0xcb, 0xbd, 0xca, 0xbf, 0x7d, 0x20,
		0xa2, 0x23, 0x09, 0xd5, 0x8b, 0x90, 0x23, 0xed, 0x5d, 0xd2, 0x4c, 0x62, 0xfe, 0xfb, 0x07, 0x72,
		0xc2, 0xa4, 0xd6, 0xd5, 0xe7, 0x00, 0xf8, 0xd1, 0x08, 0x7b, 0xed, 0x97, 0xc0, 0xfd, 0x8f, 0x0f,
		0xc4, 0x37, 0x35, 0x3d, 0x4a, 0x4f, 0x80, 0x7f, 0xa1, 0x73, 0x6f, 0x81, 0x77, 0xa3, 0x02, 0xac,
		0x47, 0x9e, 0x85, 0xd1, 0x6b, 0x9e, 0x6d, 0xf9, 0x5a, 0x2b, 0x89, 0xfd, 0x9f, 0x82, 0x2d, 0xed,
		0x69, 0xc0, 0xda, 0xb6, 0x4b, 0x7c, 0xad, 0xe5, 0x25, 0x71, 0xff, 0x4b, 0x70, 0x03, 0x02, 0x25,
		0xeb, 0x9a, 0xe7, 0x0f, 0xf3, 0xdc, 0xff, 0x2d, 0xc9, 0x92, 0x40, 0x9d, 0xa6, 0xbf, 0xaf, 0x93,
		0x6e, 0x12, 0xf7, 0x3d, 0xe9, 0xb4, 0xb0, 0xaf, 0x7e, 0x02, 0x0a, 0xf4, 0x27, 0xff, 0x50, 0x2e,
		0x81, 0xfc, 0x3f, 0x82, 0xdc, 0x63, 0xd0, 0x3b, 0x7b, 0x7e, 0xd3, 0x37, 0x92, 0x83, 0xfd, 0xbf,
		0xa2, 0xa7, 0xa5, 0x7d, 0x75, 0x11, 0x8a, 0x9e, 0xdf, 0x6c, 0x76, 0x44, 0x7d, 0x9a, 0x40, 0xff,
		0xbf, 0x0f, 0x82, 0x23, 0x8b, 0x80, 0x43, 0x7b, 0xfb, 0xe0, 0xba, 0xef, 0xd8, 0xec, 0x35, 0x47,
		0x92, 0xc2, 0x5d, 0xa1, 0x10, 0xa2, 0x2c, 0xd5, 0x06, 0x1f, 0xdf, 0xc2, 0xaa, 0xbd, 0x6a, 0xf3,
		0x83, 0xdb, 0x97, 0xe6, 0x92, 0x4f, 0x60, 0xe1, 0xbb, 0x45, 0x28, 0xed, 0x6a, 0x96, 0x66, 0x69,
		0xe2, 0x1c, 0x36, 0xdb, 0xd6, 0x0c, 0x6b, 0xe6, 0x68, 0x87, 0xb7, 0x73, 0x7f, 0x97, 0x83, 0xe2,
		0x12, 0x53, 0xd9, 0xee, 0x38, 0x26, 0xc1, 0x0f, 0x01, 0x88, 0x4b, 0x43, 0x7c, 0x79, 0x96, 0x59,
		0xca, 0xbe, 0xf9, 0xcf, 0xa7, 0x8e, 0x29, 0x21, 0x1c, 0xcf, 0x40, 0x6e, 0xab, 0x63, 0x3a, 0x5d,
		0x7e, 0x88, 0x2d, 0x0c, 0x38, 0x44, 0x15, 0xea, 0x1e, 0xfb, 0xd9, 0x20, 0x3e, 0x7f, 0xcf, 0x2a,
		0x15, 0x7a, 0x38, 0x55, 0xb8, 0xda, 0x69, 0xb7, 0xbb, 0xfc, 0xd0, 0x5f, 0x2a, 0x30, 0x88, 0x2b,
		0xb0, 0x9f, 0x54, 0x21, 0x17, 0x55, 0x90, 0x38, 0x55, 0x58, 0xde, 0x27, 0x07, 0x5d, 0xfe, 0x05,
		0xb2, 0x54, 0x60, 0x10, 0x57, 0x60, 0x3f, 0xa9, 0xc2, 0x68, 0x54, 0x41, 0xe2, 0x78, 0x16, 0x46,
		0x1b, 0x2f, 0x77, 0x0c, 0x6f, 0xbf, 0xcb, 0x5f, 0xd9, 0x08, 0x13, 0x09, 0xe2, 0x79, 0x28, 0xd5,
		0x3d, 0x71, 0x41, 0x75, 0x0a, 0x21, 0x9d, 0x48, 0x0b, 0xf5, 0x65, 0xc9, 0xb5, 0x0f, 0x2c, 0xfe,
		0x39, 0xb2, 0xf4, 0x85, 0x41, 0xdc, 0x17, 0xf6, 0x93, 0x6a, 0x14, 0xa3, 0xbe, 0x48, 0x1c, 0xdf,
		0x0f, 0x23, 0x8a, 0xed, 0xfb, 0xc4, 0x62, 0xff, 0xed, 0x31, 0x26, 0x2c, 0x04, 0x86, 0x1f, 0x81,
		0x62, 0xdd, 0xe3, 0xbf, 0xa9, 0xc8, 0x58, 0x48, 0x24, 0xdc, 0x80, 0x2b, 0x90, 0xdd, 0x22, 0xc4,
		0xac, 0x94, 0x43, 0x1a, 0x0c, 0xc1, 0x73, 0x50, 0xa8, 0x7b, 0xf4, 0x17, 0xe5, 0x8f, 0x87, 0xf8,
		0x3d, 0x18, 0x3f, 0x09, 0x79, 0xfa, 0x73, 0xbb, 0xeb, 0x10, 0xf6, 0x81, 0x57, 0xf9, 0x7c, 0x79,
		0x81, 0xe6, 0xd4, 0x82, 0x44, 0x05, 0x25, 0xb0, 0xc2, 0x67, 0x61, 0x8c, 0xd3, 0xe9, 0x15, 0x55,
		0x9e, 0x08, 0x29, 0x47, 0x9b, 0xf0, 0xc7, 0xa1, 0xc4, 0x33, 0x88, 0xbf, 0x85, 0x62, 0x1f, 0x74,
		0x95, 0xcf, 0x63, 0x7e, 0x87, 0x70, 0x8b, 0x8c, 0x70, 0x18, 0xc3, 0xa7, 0x21, 0xdf, 0x30, 0x0d,
		0xc7, 0x21, 0x6e, 0xb7, 0x32, 0x19, 0xba, 0x49, 0x80, 0x56, 0xb3, 0xef, 0x7d, 0xf9, 0x54, 0xea,
		0xec, 0x17, 0xb3, 0xd1, 0xdb, 0x60, 0x0c, 0xe5, 0xf0, 0xb5, 0xfa, 0x32, 0x3a, 0x16, 0xc3, 0x0e,
		0xf8, 0x97, 0xca, 0x11, 0x8c, 0xf0, 0x2f, 0x95, 0x23, 0x98, 0x8b, 0x32, 0x31, 0xcc, 0x47, 0xd9,
		0x18, 0xd6, 0x45, 0xb9, 0x18, 0xd6, 0x41, 0x23, 0x31, 0xcc, 0x40, 0xa3, 0x31, 0xcc, 0x46, 0xf9,
		0x18, 0xe6, 0xa0, 0x42, 0x0c, 0xd3, 0x10, 0xc4, 0x30, 0x0f, 0x15, 0x63, 0x58, 0x13, 0x95, 0x62,
		0xd8, 0x1e, 0x1a, 0x8b, 0x61, 0x2d, 0x54, 0x8e, 0x61, 0xfb, 0x68, 0x3c, 0x86, 0x5d, 0x43, 0x28,
		0x86, 0x5d, 0x47, 0x13, 0x31, 0xcc, 0x44, 0x38, 0x86, 0xdd, 0x42, 0x93, 0x31, 0xec, 0x26, 0x9a,
		0x8a, 0x61, 0x3a, 0x3a, 0x1e, 0xc3, 0x6e, 0xa0, 0xe9, 0x18, 0xb6, 0x8b, 0x4e, 0xc4, 0x30, 0x0b,
		0x55, 0xf0, 0x09, 0x98, 0x0c, 0x63, 0xeb, 0xda, 0x4d, 0xa3, 0xdd, 0x69, 0xa3, 0x93, 0x67, 0x7f,
		0xb2, 0x97, 0xe1, 0xb8, 0xc4, 0x7f, 0x5f, 0x31, 0xdc, 0x36, 0xff, 0xd8, 0x85, 0x5e, 0xad, 0xba,
		0x84, 0x58, 0xfc, 0xc5, 0x38, 0xbd, 0xbc, 0x4a, 0x4c, 0xd3, 0x3e, 0xe0, 0x9f, 0x89, 0xd1, 0xeb,
		0x15, 0xcd, 0xbd, 0x4e, 0x2c, 0xd2, 0x44, 0x19, 0x3c, 0x09, 0xe3, 0x0c, 0x21, 0xb4, 0xb4, 0xb3,
		0x3d, 0xc3, 0x6a, 0xa1, 0xec, 0xd2, 0xfc, 0x3f, 0xdc, 0x99, 0x3d, 0xf6, 0x8f, 0x77, 0x66, 0x8f,
		0xbd, 0x75, 0x67, 0x36, 0xf5, 0xde, 0x9d, 0xd9, 0xd4, 0xfb, 0x77, 0x66, 0x53, 0xb7, 0xdf, 0x9e,
		0x4d, 0x7d, 0xfd, 0xed, 0xd9, 0xd4, 0x5b, 0x6f, 0xcf, 0xa6, 0xde, 0x7f, 0x7b, 0x36, 0x75, 0xfb,
		0x07, 0xb3, 0xa9, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x62, 0x1a, 0x98, 0x67, 0xb2, 0x38, 0x00,
		0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *BananaTuple) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*BananaTuple)
	if !ok {
		that2, ok := that.(BananaTuple)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *BananaTuple")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *BananaTuple but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *BananaTuple but is not nil && this == nil")
	}
	if this.BananaTime != that1.BananaTime {
		return fmt.Errorf("BananaTime this(%v) Not Equal that(%v)", this.BananaTime, that1.BananaTime)
	}
	if this.Pulpy != that1.Pulpy {
		return fmt.Errorf("Pulpy this(%v) Not Equal that(%v)", this.Pulpy, that1.Pulpy)
	}
	if this.IsPulpySet != that1.IsPulpySet {
		return fmt.Errorf("IsPulpySet this(%v) Not Equal that(%v)", this.IsPulpySet, that1.IsPulpySet)
	}
	if this.Yummy != that1.Yummy {
		return fmt.Errorf("Yummy this(%v) Not Equal that(%v)", this.Yummy, that1.Yummy)
	}
	if this.IsYummySet != that1.IsYummySet {
		return fmt.Errorf("IsYummySet this(%v) Not Equal that(%v)", this.IsYummySet, that1.IsYummySet)
	}
	if this.Chewy != that1.Chewy {
		return fmt.Errorf("Chewy this(%v) Not Equal that(%v)", this.Chewy, that1.Chewy)
	}
	if this.IsChewySet != that1.IsChewySet {
		return fmt.Errorf("IsChewySet this(%v) Not Equal that(%v)", this.IsChewySet, that1.IsChewySet)
	}
	if this.Squishy != that1.Squishy {
		return fmt.Errorf("Squishy this(%v) Not Equal that(%v)", this.Squishy, that1.Squishy)
	}
	if this.IsSquishySet != that1.IsSquishySet {
		return fmt.Errorf("IsSquishySet this(%v) Not Equal that(%v)", this.IsSquishySet, that1.IsSquishySet)
	}
	if this.Brown != that1.Brown {
		return fmt.Errorf("Brown this(%v) Not Equal that(%v)", this.Brown, that1.Brown)
	}
	if this.IsBrownSet != that1.IsBrownSet {
		return fmt.Errorf("IsBrownSet this(%v) Not Equal that(%v)", this.IsBrownSet, that1.IsBrownSet)
	}
	if this.Rotten != that1.Rotten {
		return fmt.Errorf("Rotten this(%v) Not Equal that(%v)", this.Rotten, that1.Rotten)
	}
	if this.IsRottenSet != that1.IsRottenSet {
		return fmt.Errorf("IsRottenSet this(%v) Not Equal that(%v)", this.IsRottenSet, that1.IsRottenSet)
	}
	if this.Peel != that1.Peel {
		return fmt.Errorf("Peel this(%v) Not Equal that(%v)", this.Peel, that1.Peel)
	}
	if this.IsPeelSet != that1.IsPeelSet {
		return fmt.Errorf("IsPeelSet this(%v) Not Equal that(%v)", this.IsPeelSet, that1.IsPeelSet)
	}
	if this.PeelType != that1.PeelType {
		return fmt.Errorf("PeelType this(%v) Not Equal that(%v)", this.PeelType, that1.PeelType)
	}
	if this.IsPeelTypeSet != that1.IsPeelTypeSet {
		return fmt.Errorf("IsPeelTypeSet this(%v) Not Equal that(%v)", this.IsPeelTypeSet, that1.IsPeelTypeSet)
	}
	if this.BananaSource != that1.BananaSource {
		return fmt.Errorf("BananaSource this(%v) Not Equal that(%v)", this.BananaSource, that1.BananaSource)
	}
	if this.Slippery != that1.Slippery {
		return fmt.Errorf("Slippery this(%v) Not Equal that(%v)", this.Slippery, that1.Slippery)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *BananaTuple) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BananaTuple)
	if !ok {
		that2, ok := that.(BananaTuple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BananaTime != that1.BananaTime {
		return false
	}
	if this.Pulpy != that1.Pulpy {
		return false
	}
	if this.IsPulpySet != that1.IsPulpySet {
		return false
	}
	if this.Yummy != that1.Yummy {
		return false
	}
	if this.IsYummySet != that1.IsYummySet {
		return false
	}
	if this.Chewy != that1.Chewy {
		return false
	}
	if this.IsChewySet != that1.IsChewySet {
		return false
	}
	if this.Squishy != that1.Squishy {
		return false
	}
	if this.IsSquishySet != that1.IsSquishySet {
		return false
	}
	if this.Brown != that1.Brown {
		return false
	}
	if this.IsBrownSet != that1.IsBrownSet {
		return false
	}
	if this.Rotten != that1.Rotten {
		return false
	}
	if this.IsRottenSet != that1.IsRottenSet {
		return false
	}
	if this.Peel != that1.Peel {
		return false
	}
	if this.IsPeelSet != that1.IsPeelSet {
		return false
	}
	if this.PeelType != that1.PeelType {
		return false
	}
	if this.IsPeelTypeSet != that1.IsPeelTypeSet {
		return false
	}
	if this.BananaSource != that1.BananaSource {
		return false
	}
	if this.Slippery != that1.Slippery {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *BananaTuple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&main.BananaTuple{")
	s = append(s, "BananaTime: "+fmt.Sprintf("%#v", this.BananaTime)+",\n")
	s = append(s, "Pulpy: "+fmt.Sprintf("%#v", this.Pulpy)+",\n")
	s = append(s, "IsPulpySet: "+fmt.Sprintf("%#v", this.IsPulpySet)+",\n")
	s = append(s, "Yummy: "+fmt.Sprintf("%#v", this.Yummy)+",\n")
	s = append(s, "IsYummySet: "+fmt.Sprintf("%#v", this.IsYummySet)+",\n")
	s = append(s, "Chewy: "+fmt.Sprintf("%#v", this.Chewy)+",\n")
	s = append(s, "IsChewySet: "+fmt.Sprintf("%#v", this.IsChewySet)+",\n")
	s = append(s, "Squishy: "+fmt.Sprintf("%#v", this.Squishy)+",\n")
	s = append(s, "IsSquishySet: "+fmt.Sprintf("%#v", this.IsSquishySet)+",\n")
	s = append(s, "Brown: "+fmt.Sprintf("%#v", this.Brown)+",\n")
	s = append(s, "IsBrownSet: "+fmt.Sprintf("%#v", this.IsBrownSet)+",\n")
	s = append(s, "Rotten: "+fmt.Sprintf("%#v", this.Rotten)+",\n")
	s = append(s, "IsRottenSet: "+fmt.Sprintf("%#v", this.IsRottenSet)+",\n")
	s = append(s, "Peel: "+fmt.Sprintf("%#v", this.Peel)+",\n")
	s = append(s, "IsPeelSet: "+fmt.Sprintf("%#v", this.IsPeelSet)+",\n")
	s = append(s, "PeelType: "+fmt.Sprintf("%#v", this.PeelType)+",\n")
	s = append(s, "IsPeelTypeSet: "+fmt.Sprintf("%#v", this.IsPeelTypeSet)+",\n")
	s = append(s, "BananaSource: "+fmt.Sprintf("%#v", this.BananaSource)+",\n")
	s = append(s, "Slippery: "+fmt.Sprintf("%#v", this.Slippery)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBanana(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *BananaTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BananaTuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BananaTuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i--
	if m.Slippery {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i = encodeVarintBanana(dAtA, i, uint64(m.BananaSource))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	i--
	if m.IsPeelTypeSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x88
	i = encodeVarintBanana(dAtA, i, uint64(m.PeelType))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i--
	if m.IsPeelSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x78
	i = encodeVarintBanana(dAtA, i, uint64(m.Peel))
	i--
	dAtA[i] = 0x70
	i--
	if m.IsRottenSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	i = encodeVarintBanana(dAtA, i, uint64(m.Rotten))
	i--
	dAtA[i] = 0x60
	i--
	if m.IsBrownSet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x58
	i -= len(m.Brown)
	copy(dAtA[i:], m.Brown)
	i = encodeVarintBanana(dAtA, i, uint64(len(m.Brown)))
	i--
	dAtA[i] = 0x52
	i--
	if m.IsSquishySet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x48
	i -= len(m.Squishy)
	copy(dAtA[i:], m.Squishy)
	i = encodeVarintBanana(dAtA, i, uint64(len(m.Squishy)))
	i--
	dAtA[i] = 0x42
	i--
	if m.IsChewySet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= len(m.Chewy)
	copy(dAtA[i:], m.Chewy)
	i = encodeVarintBanana(dAtA, i, uint64(len(m.Chewy)))
	i--
	dAtA[i] = 0x32
	i--
	if m.IsYummySet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i -= len(m.Yummy)
	copy(dAtA[i:], m.Yummy)
	i = encodeVarintBanana(dAtA, i, uint64(len(m.Yummy)))
	i--
	dAtA[i] = 0x22
	i--
	if m.IsPulpySet {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.Pulpy)
	copy(dAtA[i:], m.Pulpy)
	i = encodeVarintBanana(dAtA, i, uint64(len(m.Pulpy)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintBanana(dAtA, i, uint64(m.BananaTime))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintBanana(dAtA []byte, offset int, v uint64) int {
	offset -= sovBanana(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedBananaTuple(r randyBanana, easy bool) *BananaTuple {
	this := &BananaTuple{}
	this.BananaTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.BananaTime *= -1
	}
	this.Pulpy = string(randStringBanana(r))
	this.IsPulpySet = bool(bool(r.Intn(2) == 0))
	this.Yummy = string(randStringBanana(r))
	this.IsYummySet = bool(bool(r.Intn(2) == 0))
	this.Chewy = string(randStringBanana(r))
	this.IsChewySet = bool(bool(r.Intn(2) == 0))
	this.Squishy = string(randStringBanana(r))
	this.IsSquishySet = bool(bool(r.Intn(2) == 0))
	this.Brown = string(randStringBanana(r))
	this.IsBrownSet = bool(bool(r.Intn(2) == 0))
	this.Rotten = uint32(r.Uint32())
	this.IsRottenSet = bool(bool(r.Intn(2) == 0))
	this.Peel = uint32(r.Uint32())
	this.IsPeelSet = bool(bool(r.Intn(2) == 0))
	this.PeelType = PeelType([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.IsPeelTypeSet = bool(bool(r.Intn(2) == 0))
	this.BananaSource = BananaSource([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25}[r.Intn(26)])
	this.Slippery = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBanana(r, 20)
	}
	return this
}

type randyBanana interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBanana(r randyBanana) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBanana(r randyBanana) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneBanana(r)
	}
	return string(tmps)
}
func randUnrecognizedBanana(r randyBanana, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldBanana(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldBanana(dAtA []byte, r randyBanana, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateBanana(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateBanana(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateBanana(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateBanana(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateBanana(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateBanana(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateBanana(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *BananaTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovBanana(uint64(m.BananaTime))
	l = len(m.Pulpy)
	n += 1 + l + sovBanana(uint64(l))
	n += 2
	l = len(m.Yummy)
	n += 1 + l + sovBanana(uint64(l))
	n += 2
	l = len(m.Chewy)
	n += 1 + l + sovBanana(uint64(l))
	n += 2
	l = len(m.Squishy)
	n += 1 + l + sovBanana(uint64(l))
	n += 2
	l = len(m.Brown)
	n += 1 + l + sovBanana(uint64(l))
	n += 2
	n += 1 + sovBanana(uint64(m.Rotten))
	n += 2
	n += 1 + sovBanana(uint64(m.Peel))
	n += 2
	n += 2 + sovBanana(uint64(m.PeelType))
	n += 3
	n += 2 + sovBanana(uint64(m.BananaSource))
	n += 3
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBanana(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBanana(x uint64) (n int) {
	return sovBanana(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BananaTuple) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BananaTuple{`,
		`BananaTime:` + fmt.Sprintf("%v", this.BananaTime) + `,`,
		`Pulpy:` + fmt.Sprintf("%v", this.Pulpy) + `,`,
		`IsPulpySet:` + fmt.Sprintf("%v", this.IsPulpySet) + `,`,
		`Yummy:` + fmt.Sprintf("%v", this.Yummy) + `,`,
		`IsYummySet:` + fmt.Sprintf("%v", this.IsYummySet) + `,`,
		`Chewy:` + fmt.Sprintf("%v", this.Chewy) + `,`,
		`IsChewySet:` + fmt.Sprintf("%v", this.IsChewySet) + `,`,
		`Squishy:` + fmt.Sprintf("%v", this.Squishy) + `,`,
		`IsSquishySet:` + fmt.Sprintf("%v", this.IsSquishySet) + `,`,
		`Brown:` + fmt.Sprintf("%v", this.Brown) + `,`,
		`IsBrownSet:` + fmt.Sprintf("%v", this.IsBrownSet) + `,`,
		`Rotten:` + fmt.Sprintf("%v", this.Rotten) + `,`,
		`IsRottenSet:` + fmt.Sprintf("%v", this.IsRottenSet) + `,`,
		`Peel:` + fmt.Sprintf("%v", this.Peel) + `,`,
		`IsPeelSet:` + fmt.Sprintf("%v", this.IsPeelSet) + `,`,
		`PeelType:` + fmt.Sprintf("%v", this.PeelType) + `,`,
		`IsPeelTypeSet:` + fmt.Sprintf("%v", this.IsPeelTypeSet) + `,`,
		`BananaSource:` + fmt.Sprintf("%v", this.BananaSource) + `,`,
		`Slippery:` + fmt.Sprintf("%v", this.Slippery) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBanana(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BananaTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBanana
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BananaTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BananaTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BananaTime", wireType)
			}
			m.BananaTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BananaTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulpy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanana
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanana
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pulpy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPulpySet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPulpySet = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yummy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanana
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanana
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Yummy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsYummySet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsYummySet = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chewy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanana
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanana
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chewy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsChewySet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsChewySet = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Squishy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanana
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanana
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Squishy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSquishySet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSquishySet = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brown", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBanana
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBanana
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brown = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBrownSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBrownSet = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotten", wireType)
			}
			m.Rotten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotten |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRottenSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRottenSet = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peel", wireType)
			}
			m.Peel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Peel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPeelSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPeelSet = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeelType", wireType)
			}
			m.PeelType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeelType |= PeelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPeelTypeSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPeelTypeSet = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BananaSource", wireType)
			}
			m.BananaSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BananaSource |= BananaSource(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slippery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Slippery = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBanana(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBanana
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBanana(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBanana
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBanana
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBanana
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBanana
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBanana
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBanana        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBanana          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBanana = fmt.Errorf("proto: unexpected end of group")
)
