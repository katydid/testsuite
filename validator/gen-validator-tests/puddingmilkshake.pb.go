//Thank you to http://creativitygames.net/random-word-generator/randomwords/2 for helping me to anonymise this data.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: puddingmilkshake.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AltarPlastic int32

const (
	AltarPlastic_Table   AltarPlastic = 0
	AltarPlastic_Dusk    AltarPlastic = 1
	AltarPlastic_Drum    AltarPlastic = 2
	AltarPlastic_Cereal  AltarPlastic = 3
	AltarPlastic_Prophet AltarPlastic = 4
)

// Enum value maps for AltarPlastic.
var (
	AltarPlastic_name = map[int32]string{
		0: "Table",
		1: "Dusk",
		2: "Drum",
		3: "Cereal",
		4: "Prophet",
	}
	AltarPlastic_value = map[string]int32{
		"Table":   0,
		"Dusk":    1,
		"Drum":    2,
		"Cereal":  3,
		"Prophet": 4,
	}
)

func (x AltarPlastic) Enum() *AltarPlastic {
	p := new(AltarPlastic)
	*p = x
	return p
}

func (x AltarPlastic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AltarPlastic) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[0].Descriptor()
}

func (AltarPlastic) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[0]
}

func (x AltarPlastic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AltarPlastic) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AltarPlastic(num)
	return nil
}

// Deprecated: Use AltarPlastic.Descriptor instead.
func (AltarPlastic) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{0}
}

type ArchBubble int32

const (
	ArchBubble_Aroma     ArchBubble = 0
	ArchBubble_Moustache ArchBubble = 1
	ArchBubble_Cup       ArchBubble = 2
	ArchBubble_Toes      ArchBubble = 3
	ArchBubble_Seal      ArchBubble = 4
)

// Enum value maps for ArchBubble.
var (
	ArchBubble_name = map[int32]string{
		0: "Aroma",
		1: "Moustache",
		2: "Cup",
		3: "Toes",
		4: "Seal",
	}
	ArchBubble_value = map[string]int32{
		"Aroma":     0,
		"Moustache": 1,
		"Cup":       2,
		"Toes":      3,
		"Seal":      4,
	}
)

func (x ArchBubble) Enum() *ArchBubble {
	p := new(ArchBubble)
	*p = x
	return p
}

func (x ArchBubble) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArchBubble) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[1].Descriptor()
}

func (ArchBubble) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[1]
}

func (x ArchBubble) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArchBubble) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArchBubble(num)
	return nil
}

// Deprecated: Use ArchBubble.Descriptor instead.
func (ArchBubble) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{1}
}

type PlasticBagCertificate int32

const (
	PlasticBagCertificate_Mustard PlasticBagCertificate = 0
	PlasticBagCertificate_Flood   PlasticBagCertificate = 1
)

// Enum value maps for PlasticBagCertificate.
var (
	PlasticBagCertificate_name = map[int32]string{
		0: "Mustard",
		1: "Flood",
	}
	PlasticBagCertificate_value = map[string]int32{
		"Mustard": 0,
		"Flood":   1,
	}
)

func (x PlasticBagCertificate) Enum() *PlasticBagCertificate {
	p := new(PlasticBagCertificate)
	*p = x
	return p
}

func (x PlasticBagCertificate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlasticBagCertificate) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[2].Descriptor()
}

func (PlasticBagCertificate) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[2]
}

func (x PlasticBagCertificate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PlasticBagCertificate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PlasticBagCertificate(num)
	return nil
}

// Deprecated: Use PlasticBagCertificate.Descriptor instead.
func (PlasticBagCertificate) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{2}
}

type WineMicroscope int32

const (
	WineMicroscope_Amplifier WineMicroscope = 0
	WineMicroscope_Toy       WineMicroscope = 1
	WineMicroscope_Code      WineMicroscope = 2
	WineMicroscope_Perch     WineMicroscope = 3
	WineMicroscope_Tower     WineMicroscope = 4
)

// Enum value maps for WineMicroscope.
var (
	WineMicroscope_name = map[int32]string{
		0: "Amplifier",
		1: "Toy",
		2: "Code",
		3: "Perch",
		4: "Tower",
	}
	WineMicroscope_value = map[string]int32{
		"Amplifier": 0,
		"Toy":       1,
		"Code":      2,
		"Perch":     3,
		"Tower":     4,
	}
)

func (x WineMicroscope) Enum() *WineMicroscope {
	p := new(WineMicroscope)
	*p = x
	return p
}

func (x WineMicroscope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WineMicroscope) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[3].Descriptor()
}

func (WineMicroscope) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[3]
}

func (x WineMicroscope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *WineMicroscope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = WineMicroscope(num)
	return nil
}

// Deprecated: Use WineMicroscope.Descriptor instead.
func (WineMicroscope) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{3}
}

type MicrobeMiser int32

const (
	MicrobeMiser_Parlour      MicrobeMiser = 0
	MicrobeMiser_Encyclopedia MicrobeMiser = 1
	MicrobeMiser_Pebble       MicrobeMiser = 2
	MicrobeMiser_License      MicrobeMiser = 3
	MicrobeMiser_Binge        MicrobeMiser = 4
	MicrobeMiser_Novel        MicrobeMiser = 5
	MicrobeMiser_Class        MicrobeMiser = 6
	MicrobeMiser_Pincer       MicrobeMiser = 7
	MicrobeMiser_Concrete     MicrobeMiser = 8
	MicrobeMiser_Figure       MicrobeMiser = 9
	MicrobeMiser_CruiseShip   MicrobeMiser = 10
	MicrobeMiser_Tongue       MicrobeMiser = 11
	MicrobeMiser_Pepper       MicrobeMiser = 12
	MicrobeMiser_Chameleon    MicrobeMiser = 13
	MicrobeMiser_Snore        MicrobeMiser = 14
)

// Enum value maps for MicrobeMiser.
var (
	MicrobeMiser_name = map[int32]string{
		0:  "Parlour",
		1:  "Encyclopedia",
		2:  "Pebble",
		3:  "License",
		4:  "Binge",
		5:  "Novel",
		6:  "Class",
		7:  "Pincer",
		8:  "Concrete",
		9:  "Figure",
		10: "CruiseShip",
		11: "Tongue",
		12: "Pepper",
		13: "Chameleon",
		14: "Snore",
	}
	MicrobeMiser_value = map[string]int32{
		"Parlour":      0,
		"Encyclopedia": 1,
		"Pebble":       2,
		"License":      3,
		"Binge":        4,
		"Novel":        5,
		"Class":        6,
		"Pincer":       7,
		"Concrete":     8,
		"Figure":       9,
		"CruiseShip":   10,
		"Tongue":       11,
		"Pepper":       12,
		"Chameleon":    13,
		"Snore":        14,
	}
)

func (x MicrobeMiser) Enum() *MicrobeMiser {
	p := new(MicrobeMiser)
	*p = x
	return p
}

func (x MicrobeMiser) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MicrobeMiser) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[4].Descriptor()
}

func (MicrobeMiser) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[4]
}

func (x MicrobeMiser) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MicrobeMiser) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MicrobeMiser(num)
	return nil
}

// Deprecated: Use MicrobeMiser.Descriptor instead.
func (MicrobeMiser) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{4}
}

type CancerUserExperience int32

const (
	CancerUserExperience_Nun       CancerUserExperience = 0
	CancerUserExperience_Massage   CancerUserExperience = 1
	CancerUserExperience_Cough     CancerUserExperience = 2
	CancerUserExperience_Artillery CancerUserExperience = 3
	CancerUserExperience_Cashier   CancerUserExperience = 4
)

// Enum value maps for CancerUserExperience.
var (
	CancerUserExperience_name = map[int32]string{
		0: "Nun",
		1: "Massage",
		2: "Cough",
		3: "Artillery",
		4: "Cashier",
	}
	CancerUserExperience_value = map[string]int32{
		"Nun":       0,
		"Massage":   1,
		"Cough":     2,
		"Artillery": 3,
		"Cashier":   4,
	}
)

func (x CancerUserExperience) Enum() *CancerUserExperience {
	p := new(CancerUserExperience)
	*p = x
	return p
}

func (x CancerUserExperience) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancerUserExperience) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[5].Descriptor()
}

func (CancerUserExperience) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[5]
}

func (x CancerUserExperience) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CancerUserExperience) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CancerUserExperience(num)
	return nil
}

// Deprecated: Use CancerUserExperience.Descriptor instead.
func (CancerUserExperience) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{5}
}

type EnzymeLift int32

const (
	EnzymeLift_Market    EnzymeLift = 0
	EnzymeLift_Bishop    EnzymeLift = 1
	EnzymeLift_Crispy    EnzymeLift = 2
	EnzymeLift_Friar     EnzymeLift = 3
	EnzymeLift_Telescope EnzymeLift = 4
)

// Enum value maps for EnzymeLift.
var (
	EnzymeLift_name = map[int32]string{
		0: "Market",
		1: "Bishop",
		2: "Crispy",
		3: "Friar",
		4: "Telescope",
	}
	EnzymeLift_value = map[string]int32{
		"Market":    0,
		"Bishop":    1,
		"Crispy":    2,
		"Friar":     3,
		"Telescope": 4,
	}
)

func (x EnzymeLift) Enum() *EnzymeLift {
	p := new(EnzymeLift)
	*p = x
	return p
}

func (x EnzymeLift) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnzymeLift) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[6].Descriptor()
}

func (EnzymeLift) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[6]
}

func (x EnzymeLift) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EnzymeLift) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EnzymeLift(num)
	return nil
}

// Deprecated: Use EnzymeLift.Descriptor instead.
func (EnzymeLift) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{6}
}

type RadarBox int32

const (
	RadarBox_Gutter      RadarBox = 0
	RadarBox_Sea         RadarBox = 1
	RadarBox_Purse       RadarBox = 2
	RadarBox_Bomb        RadarBox = 3
	RadarBox_Research    RadarBox = 4
	RadarBox_Staff       RadarBox = 5
	RadarBox_Dance       RadarBox = 6
	RadarBox_Soldier     RadarBox = 7
	RadarBox_Spine       RadarBox = 8
	RadarBox_Butterfly   RadarBox = 9
	RadarBox_Olive       RadarBox = 10
	RadarBox_Grade       RadarBox = 11
	RadarBox_Paranoia    RadarBox = 12
	RadarBox_Number      RadarBox = 13
	RadarBox_Task        RadarBox = 14
	RadarBox_Fountain    RadarBox = 15
	RadarBox_Hospital    RadarBox = 16
	RadarBox_Apetite     RadarBox = 17
	RadarBox_Garlic      RadarBox = 18
	RadarBox_Photograph  RadarBox = 19
	RadarBox_Nib         RadarBox = 20
	RadarBox_Wheelbarrow RadarBox = 21
	RadarBox_Poverty     RadarBox = 22
	RadarBox_Piano       RadarBox = 23
	RadarBox_Poster      RadarBox = 24
	RadarBox_Toast       RadarBox = 25
	RadarBox_Pub         RadarBox = 26
	RadarBox_Fungus      RadarBox = 27
	RadarBox_Bulb        RadarBox = 28
	RadarBox_Ambiguous   RadarBox = 29
	RadarBox_Arms        RadarBox = 30
	RadarBox_Pillow      RadarBox = 31
	RadarBox_Carrot      RadarBox = 32
	RadarBox_Scallop     RadarBox = 33
	RadarBox_Nappy       RadarBox = 34
	RadarBox_Plug        RadarBox = 35
	RadarBox_Peacock     RadarBox = 36
	RadarBox_Bribe       RadarBox = 37
	RadarBox_Cat         RadarBox = 38
	RadarBox_Mat         RadarBox = 39
	RadarBox_Press       RadarBox = 40
	RadarBox_Fireplace   RadarBox = 41
	RadarBox_Carpet      RadarBox = 42
	RadarBox_Hunt        RadarBox = 43
	RadarBox_Mirror      RadarBox = 44
	RadarBox_Stairs      RadarBox = 45
	RadarBox_Saviour     RadarBox = 46
	RadarBox_Plate       RadarBox = 47
	RadarBox_Fall        RadarBox = 48
	RadarBox_Alphabet    RadarBox = 49
	RadarBox_Daisy       RadarBox = 50
	RadarBox_Degree      RadarBox = 51
	RadarBox_Fire        RadarBox = 52
	RadarBox_Chandelier  RadarBox = 53
)

// Enum value maps for RadarBox.
var (
	RadarBox_name = map[int32]string{
		0:  "Gutter",
		1:  "Sea",
		2:  "Purse",
		3:  "Bomb",
		4:  "Research",
		5:  "Staff",
		6:  "Dance",
		7:  "Soldier",
		8:  "Spine",
		9:  "Butterfly",
		10: "Olive",
		11: "Grade",
		12: "Paranoia",
		13: "Number",
		14: "Task",
		15: "Fountain",
		16: "Hospital",
		17: "Apetite",
		18: "Garlic",
		19: "Photograph",
		20: "Nib",
		21: "Wheelbarrow",
		22: "Poverty",
		23: "Piano",
		24: "Poster",
		25: "Toast",
		26: "Pub",
		27: "Fungus",
		28: "Bulb",
		29: "Ambiguous",
		30: "Arms",
		31: "Pillow",
		32: "Carrot",
		33: "Scallop",
		34: "Nappy",
		35: "Plug",
		36: "Peacock",
		37: "Bribe",
		38: "Cat",
		39: "Mat",
		40: "Press",
		41: "Fireplace",
		42: "Carpet",
		43: "Hunt",
		44: "Mirror",
		45: "Stairs",
		46: "Saviour",
		47: "Plate",
		48: "Fall",
		49: "Alphabet",
		50: "Daisy",
		51: "Degree",
		52: "Fire",
		53: "Chandelier",
	}
	RadarBox_value = map[string]int32{
		"Gutter":      0,
		"Sea":         1,
		"Purse":       2,
		"Bomb":        3,
		"Research":    4,
		"Staff":       5,
		"Dance":       6,
		"Soldier":     7,
		"Spine":       8,
		"Butterfly":   9,
		"Olive":       10,
		"Grade":       11,
		"Paranoia":    12,
		"Number":      13,
		"Task":        14,
		"Fountain":    15,
		"Hospital":    16,
		"Apetite":     17,
		"Garlic":      18,
		"Photograph":  19,
		"Nib":         20,
		"Wheelbarrow": 21,
		"Poverty":     22,
		"Piano":       23,
		"Poster":      24,
		"Toast":       25,
		"Pub":         26,
		"Fungus":      27,
		"Bulb":        28,
		"Ambiguous":   29,
		"Arms":        30,
		"Pillow":      31,
		"Carrot":      32,
		"Scallop":     33,
		"Nappy":       34,
		"Plug":        35,
		"Peacock":     36,
		"Bribe":       37,
		"Cat":         38,
		"Mat":         39,
		"Press":       40,
		"Fireplace":   41,
		"Carpet":      42,
		"Hunt":        43,
		"Mirror":      44,
		"Stairs":      45,
		"Saviour":     46,
		"Plate":       47,
		"Fall":        48,
		"Alphabet":    49,
		"Daisy":       50,
		"Degree":      51,
		"Fire":        52,
		"Chandelier":  53,
	}
)

func (x RadarBox) Enum() *RadarBox {
	p := new(RadarBox)
	*p = x
	return p
}

func (x RadarBox) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RadarBox) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[7].Descriptor()
}

func (RadarBox) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[7]
}

func (x RadarBox) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RadarBox) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RadarBox(num)
	return nil
}

// Deprecated: Use RadarBox.Descriptor instead.
func (RadarBox) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{7}
}

type AccountantPowder int32

const (
	AccountantPowder_Dolphin  AccountantPowder = 0
	AccountantPowder_Jump     AccountantPowder = 1
	AccountantPowder_Sausage  AccountantPowder = 2
	AccountantPowder_Holiday  AccountantPowder = 3
	AccountantPowder_Flamenco AccountantPowder = 4
)

// Enum value maps for AccountantPowder.
var (
	AccountantPowder_name = map[int32]string{
		0: "Dolphin",
		1: "Jump",
		2: "Sausage",
		3: "Holiday",
		4: "Flamenco",
	}
	AccountantPowder_value = map[string]int32{
		"Dolphin":  0,
		"Jump":     1,
		"Sausage":  2,
		"Holiday":  3,
		"Flamenco": 4,
	}
)

func (x AccountantPowder) Enum() *AccountantPowder {
	p := new(AccountantPowder)
	*p = x
	return p
}

func (x AccountantPowder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountantPowder) Descriptor() protoreflect.EnumDescriptor {
	return file_puddingmilkshake_proto_enumTypes[8].Descriptor()
}

func (AccountantPowder) Type() protoreflect.EnumType {
	return &file_puddingmilkshake_proto_enumTypes[8]
}

func (x AccountantPowder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AccountantPowder) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AccountantPowder(num)
	return nil
}

// Deprecated: Use AccountantPowder.Descriptor instead.
func (AccountantPowder) EnumDescriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{8}
}

type PuddingMilkshake struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FinanceJudo   *FinanceJudo           `protobuf:"bytes,1,opt,name=FinanceJudo" json:"FinanceJudo,omitempty"`
	RainInterlude *MudRiddle             `protobuf:"bytes,2,opt,name=RainInterlude" json:"RainInterlude,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PuddingMilkshake) Reset() {
	*x = PuddingMilkshake{}
	mi := &file_puddingmilkshake_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PuddingMilkshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PuddingMilkshake) ProtoMessage() {}

func (x *PuddingMilkshake) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PuddingMilkshake.ProtoReflect.Descriptor instead.
func (*PuddingMilkshake) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{0}
}

func (x *PuddingMilkshake) GetFinanceJudo() *FinanceJudo {
	if x != nil {
		return x.FinanceJudo
	}
	return nil
}

func (x *PuddingMilkshake) GetRainInterlude() *MudRiddle {
	if x != nil {
		return x.RainInterlude
	}
	return nil
}

type FinanceJudo struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SaladWorry           *SaladWorry            `protobuf:"bytes,1,opt,name=SaladWorry" json:"SaladWorry,omitempty"`
	RumourSpirit         *int64                 `protobuf:"varint,2,opt,name=RumourSpirit" json:"RumourSpirit,omitempty"`
	UserInterfaceSpanner *int64                 `protobuf:"varint,3,opt,name=UserInterfaceSpanner" json:"UserInterfaceSpanner,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FinanceJudo) Reset() {
	*x = FinanceJudo{}
	mi := &file_puddingmilkshake_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinanceJudo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinanceJudo) ProtoMessage() {}

func (x *FinanceJudo) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinanceJudo.ProtoReflect.Descriptor instead.
func (*FinanceJudo) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{1}
}

func (x *FinanceJudo) GetSaladWorry() *SaladWorry {
	if x != nil {
		return x.SaladWorry
	}
	return nil
}

func (x *FinanceJudo) GetRumourSpirit() int64 {
	if x != nil && x.RumourSpirit != nil {
		return *x.RumourSpirit
	}
	return 0
}

func (x *FinanceJudo) GetUserInterfaceSpanner() int64 {
	if x != nil && x.UserInterfaceSpanner != nil {
		return *x.UserInterfaceSpanner
	}
	return 0
}

type SaladWorry struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MeasureGrade         []byte                 `protobuf:"bytes,1,opt,name=MeasureGrade" json:"MeasureGrade,omitempty"`
	HooliganValley       *KeyQueen              `protobuf:"bytes,2,opt,name=HooliganValley" json:"HooliganValley,omitempty"`
	MagazineFrame        []string               `protobuf:"bytes,3,rep,name=MagazineFrame" json:"MagazineFrame,omitempty"`
	XrayPilot            *XrayPilot             `protobuf:"bytes,4,opt,name=XrayPilot" json:"XrayPilot,omitempty"`
	LogMicrophone        *bool                  `protobuf:"varint,5,opt,name=LogMicrophone" json:"LogMicrophone,omitempty"`
	NeonLightEnd         *MicrobeMiser          `protobuf:"varint,6,opt,name=NeonLightEnd,enum=main.MicrobeMiser" json:"NeonLightEnd,omitempty"`
	LeafTrellis          *string                `protobuf:"bytes,7,opt,name=LeafTrellis" json:"LeafTrellis,omitempty"`
	CancerUserExperience *CancerUserExperience  `protobuf:"varint,8,opt,name=CancerUserExperience,enum=main.CancerUserExperience" json:"CancerUserExperience,omitempty"`
	RadarBox             *RadarBox              `protobuf:"varint,9,opt,name=RadarBox,enum=main.RadarBox" json:"RadarBox,omitempty"`
	AccidentStadium      *bool                  `protobuf:"varint,10,opt,name=AccidentStadium" json:"AccidentStadium,omitempty"`
	SpyCarpenter         *SpyCarpenter          `protobuf:"bytes,11,opt,name=SpyCarpenter" json:"SpyCarpenter,omitempty"`
	PrizeRemoteControl   *string                `protobuf:"bytes,12,opt,name=PrizeRemoteControl" json:"PrizeRemoteControl,omitempty"`
	TableScandal         *TravelBallRoom        `protobuf:"bytes,13,opt,name=TableScandal" json:"TableScandal,omitempty"`
	StormTermite         []uint32               `protobuf:"varint,14,rep,name=StormTermite" json:"StormTermite,omitempty"`
	ParliamentChime      [][]byte               `protobuf:"bytes,15,rep,name=ParliamentChime" json:"ParliamentChime,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SaladWorry) Reset() {
	*x = SaladWorry{}
	mi := &file_puddingmilkshake_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaladWorry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaladWorry) ProtoMessage() {}

func (x *SaladWorry) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaladWorry.ProtoReflect.Descriptor instead.
func (*SaladWorry) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{2}
}

func (x *SaladWorry) GetMeasureGrade() []byte {
	if x != nil {
		return x.MeasureGrade
	}
	return nil
}

func (x *SaladWorry) GetHooliganValley() *KeyQueen {
	if x != nil {
		return x.HooliganValley
	}
	return nil
}

func (x *SaladWorry) GetMagazineFrame() []string {
	if x != nil {
		return x.MagazineFrame
	}
	return nil
}

func (x *SaladWorry) GetXrayPilot() *XrayPilot {
	if x != nil {
		return x.XrayPilot
	}
	return nil
}

func (x *SaladWorry) GetLogMicrophone() bool {
	if x != nil && x.LogMicrophone != nil {
		return *x.LogMicrophone
	}
	return false
}

func (x *SaladWorry) GetNeonLightEnd() MicrobeMiser {
	if x != nil && x.NeonLightEnd != nil {
		return *x.NeonLightEnd
	}
	return MicrobeMiser_Parlour
}

func (x *SaladWorry) GetLeafTrellis() string {
	if x != nil && x.LeafTrellis != nil {
		return *x.LeafTrellis
	}
	return ""
}

func (x *SaladWorry) GetCancerUserExperience() CancerUserExperience {
	if x != nil && x.CancerUserExperience != nil {
		return *x.CancerUserExperience
	}
	return CancerUserExperience_Nun
}

func (x *SaladWorry) GetRadarBox() RadarBox {
	if x != nil && x.RadarBox != nil {
		return *x.RadarBox
	}
	return RadarBox_Gutter
}

func (x *SaladWorry) GetAccidentStadium() bool {
	if x != nil && x.AccidentStadium != nil {
		return *x.AccidentStadium
	}
	return false
}

func (x *SaladWorry) GetSpyCarpenter() *SpyCarpenter {
	if x != nil {
		return x.SpyCarpenter
	}
	return nil
}

func (x *SaladWorry) GetPrizeRemoteControl() string {
	if x != nil && x.PrizeRemoteControl != nil {
		return *x.PrizeRemoteControl
	}
	return ""
}

func (x *SaladWorry) GetTableScandal() *TravelBallRoom {
	if x != nil {
		return x.TableScandal
	}
	return nil
}

func (x *SaladWorry) GetStormTermite() []uint32 {
	if x != nil {
		return x.StormTermite
	}
	return nil
}

func (x *SaladWorry) GetParliamentChime() [][]byte {
	if x != nil {
		return x.ParliamentChime
	}
	return nil
}

type KeyQueen struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SkyscraperUniversity []int32                `protobuf:"varint,1,rep,name=SkyscraperUniversity" json:"SkyscraperUniversity,omitempty"`
	RevengeMirror        [][]byte               `protobuf:"bytes,2,rep,name=RevengeMirror" json:"RevengeMirror,omitempty"`
	TrailerGallery       []uint64               `protobuf:"varint,3,rep,name=TrailerGallery" json:"TrailerGallery,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *KeyQueen) Reset() {
	*x = KeyQueen{}
	mi := &file_puddingmilkshake_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyQueen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyQueen) ProtoMessage() {}

func (x *KeyQueen) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyQueen.ProtoReflect.Descriptor instead.
func (*KeyQueen) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{3}
}

func (x *KeyQueen) GetSkyscraperUniversity() []int32 {
	if x != nil {
		return x.SkyscraperUniversity
	}
	return nil
}

func (x *KeyQueen) GetRevengeMirror() [][]byte {
	if x != nil {
		return x.RevengeMirror
	}
	return nil
}

func (x *KeyQueen) GetTrailerGallery() []uint64 {
	if x != nil {
		return x.TrailerGallery
	}
	return nil
}

type TravelBallRoom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DanceShooting []AccountantPowder     `protobuf:"varint,1,rep,name=DanceShooting,enum=main.AccountantPowder" json:"DanceShooting,omitempty"`
	ReasonCoat    []string               `protobuf:"bytes,2,rep,name=ReasonCoat" json:"ReasonCoat,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TravelBallRoom) Reset() {
	*x = TravelBallRoom{}
	mi := &file_puddingmilkshake_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TravelBallRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TravelBallRoom) ProtoMessage() {}

func (x *TravelBallRoom) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TravelBallRoom.ProtoReflect.Descriptor instead.
func (*TravelBallRoom) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{4}
}

func (x *TravelBallRoom) GetDanceShooting() []AccountantPowder {
	if x != nil {
		return x.DanceShooting
	}
	return nil
}

func (x *TravelBallRoom) GetReasonCoat() []string {
	if x != nil {
		return x.ReasonCoat
	}
	return nil
}

type SpyCarpenter struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	PartyBrakes           []uint32                `protobuf:"varint,1,rep,name=PartyBrakes" json:"PartyBrakes,omitempty"`
	WireOyster            []uint32                `protobuf:"varint,2,rep,name=WireOyster" json:"WireOyster,omitempty"`
	XrayPilots            *XrayPilots             `protobuf:"bytes,3,opt,name=XrayPilots" json:"XrayPilots,omitempty"`
	RussiaBasket          []PlasticBagCertificate `protobuf:"varint,4,rep,name=RussiaBasket,enum=main.PlasticBagCertificate" json:"RussiaBasket,omitempty"`
	AccidentStockMarket   *StarTusk               `protobuf:"bytes,5,opt,name=AccidentStockMarket" json:"AccidentStockMarket,omitempty"`
	BulldozerHandkerchief *StarTusk               `protobuf:"bytes,6,opt,name=BulldozerHandkerchief" json:"BulldozerHandkerchief,omitempty"`
	VelcroBench           []WineMicroscope        `protobuf:"varint,7,rep,name=VelcroBench,enum=main.WineMicroscope" json:"VelcroBench,omitempty"`
	BridgePepper          []string                `protobuf:"bytes,8,rep,name=BridgePepper" json:"BridgePepper,omitempty"`
	FountainTarget        []string                `protobuf:"bytes,9,rep,name=FountainTarget" json:"FountainTarget,omitempty"`
	SoleFin               []string                `protobuf:"bytes,10,rep,name=SoleFin" json:"SoleFin,omitempty"`
	MigraneLemonade       *MigraneLemonade        `protobuf:"bytes,11,opt,name=MigraneLemonade" json:"MigraneLemonade,omitempty"`
	WhaleColour           []uint32                `protobuf:"varint,12,rep,name=WhaleColour" json:"WhaleColour,omitempty"`
	LawyerRumour          [][]byte                `protobuf:"bytes,13,rep,name=LawyerRumour" json:"LawyerRumour,omitempty"`
	ToothSale             []uint32                `protobuf:"varint,14,rep,name=ToothSale" json:"ToothSale,omitempty"`
	PearLeader            [][]byte                `protobuf:"bytes,15,rep,name=PearLeader" json:"PearLeader,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SpyCarpenter) Reset() {
	*x = SpyCarpenter{}
	mi := &file_puddingmilkshake_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpyCarpenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpyCarpenter) ProtoMessage() {}

func (x *SpyCarpenter) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpyCarpenter.ProtoReflect.Descriptor instead.
func (*SpyCarpenter) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{5}
}

func (x *SpyCarpenter) GetPartyBrakes() []uint32 {
	if x != nil {
		return x.PartyBrakes
	}
	return nil
}

func (x *SpyCarpenter) GetWireOyster() []uint32 {
	if x != nil {
		return x.WireOyster
	}
	return nil
}

func (x *SpyCarpenter) GetXrayPilots() *XrayPilots {
	if x != nil {
		return x.XrayPilots
	}
	return nil
}

func (x *SpyCarpenter) GetRussiaBasket() []PlasticBagCertificate {
	if x != nil {
		return x.RussiaBasket
	}
	return nil
}

func (x *SpyCarpenter) GetAccidentStockMarket() *StarTusk {
	if x != nil {
		return x.AccidentStockMarket
	}
	return nil
}

func (x *SpyCarpenter) GetBulldozerHandkerchief() *StarTusk {
	if x != nil {
		return x.BulldozerHandkerchief
	}
	return nil
}

func (x *SpyCarpenter) GetVelcroBench() []WineMicroscope {
	if x != nil {
		return x.VelcroBench
	}
	return nil
}

func (x *SpyCarpenter) GetBridgePepper() []string {
	if x != nil {
		return x.BridgePepper
	}
	return nil
}

func (x *SpyCarpenter) GetFountainTarget() []string {
	if x != nil {
		return x.FountainTarget
	}
	return nil
}

func (x *SpyCarpenter) GetSoleFin() []string {
	if x != nil {
		return x.SoleFin
	}
	return nil
}

func (x *SpyCarpenter) GetMigraneLemonade() *MigraneLemonade {
	if x != nil {
		return x.MigraneLemonade
	}
	return nil
}

func (x *SpyCarpenter) GetWhaleColour() []uint32 {
	if x != nil {
		return x.WhaleColour
	}
	return nil
}

func (x *SpyCarpenter) GetLawyerRumour() [][]byte {
	if x != nil {
		return x.LawyerRumour
	}
	return nil
}

func (x *SpyCarpenter) GetToothSale() []uint32 {
	if x != nil {
		return x.ToothSale
	}
	return nil
}

func (x *SpyCarpenter) GetPearLeader() [][]byte {
	if x != nil {
		return x.PearLeader
	}
	return nil
}

type StarTusk struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ViolinDuty      []AltarPlastic         `protobuf:"varint,1,rep,name=ViolinDuty,enum=main.AltarPlastic" json:"ViolinDuty,omitempty"`
	CloakPlayground []string               `protobuf:"bytes,2,rep,name=CloakPlayground" json:"CloakPlayground,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StarTusk) Reset() {
	*x = StarTusk{}
	mi := &file_puddingmilkshake_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StarTusk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StarTusk) ProtoMessage() {}

func (x *StarTusk) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StarTusk.ProtoReflect.Descriptor instead.
func (*StarTusk) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{6}
}

func (x *StarTusk) GetViolinDuty() []AltarPlastic {
	if x != nil {
		return x.ViolinDuty
	}
	return nil
}

func (x *StarTusk) GetCloakPlayground() []string {
	if x != nil {
		return x.CloakPlayground
	}
	return nil
}

type MigraneLemonade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ArchBubbles   []ArchBubble           `protobuf:"varint,1,rep,name=ArchBubbles,enum=main.ArchBubble" json:"ArchBubbles,omitempty"`
	FactParrot    []string               `protobuf:"bytes,2,rep,name=FactParrot" json:"FactParrot,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MigraneLemonade) Reset() {
	*x = MigraneLemonade{}
	mi := &file_puddingmilkshake_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigraneLemonade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigraneLemonade) ProtoMessage() {}

func (x *MigraneLemonade) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigraneLemonade.ProtoReflect.Descriptor instead.
func (*MigraneLemonade) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{7}
}

func (x *MigraneLemonade) GetArchBubbles() []ArchBubble {
	if x != nil {
		return x.ArchBubbles
	}
	return nil
}

func (x *MigraneLemonade) GetFactParrot() []string {
	if x != nil {
		return x.FactParrot
	}
	return nil
}

type MudRiddle struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	XrayPilots       *XrayPilots            `protobuf:"bytes,1,opt,name=XrayPilots" json:"XrayPilots,omitempty"`
	RunwayGenius     []uint32               `protobuf:"varint,2,rep,name=RunwayGenius" json:"RunwayGenius,omitempty"`
	BingleDaisy      *BingleDaisy           `protobuf:"bytes,3,opt,name=BingleDaisy" json:"BingleDaisy,omitempty"`
	Merit            []uint32               `protobuf:"varint,4,rep,name=Merit" json:"Merit,omitempty"`
	CreationBirthday []string               `protobuf:"bytes,5,rep,name=CreationBirthday" json:"CreationBirthday,omitempty"`
	HardwareFood     []string               `protobuf:"bytes,6,rep,name=HardwareFood" json:"HardwareFood,omitempty"`
	TurkeyValley     []string               `protobuf:"bytes,7,rep,name=TurkeyValley" json:"TurkeyValley,omitempty"`
	TramPuppet       []string               `protobuf:"bytes,8,rep,name=TramPuppet" json:"TramPuppet,omitempty"`
	InsultSquare     []EnzymeLift           `protobuf:"varint,9,rep,name=InsultSquare,enum=main.EnzymeLift" json:"InsultSquare,omitempty"`
	HospitalVideo    []string               `protobuf:"bytes,10,rep,name=HospitalVideo" json:"HospitalVideo,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MudRiddle) Reset() {
	*x = MudRiddle{}
	mi := &file_puddingmilkshake_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MudRiddle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MudRiddle) ProtoMessage() {}

func (x *MudRiddle) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MudRiddle.ProtoReflect.Descriptor instead.
func (*MudRiddle) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{8}
}

func (x *MudRiddle) GetXrayPilots() *XrayPilots {
	if x != nil {
		return x.XrayPilots
	}
	return nil
}

func (x *MudRiddle) GetRunwayGenius() []uint32 {
	if x != nil {
		return x.RunwayGenius
	}
	return nil
}

func (x *MudRiddle) GetBingleDaisy() *BingleDaisy {
	if x != nil {
		return x.BingleDaisy
	}
	return nil
}

func (x *MudRiddle) GetMerit() []uint32 {
	if x != nil {
		return x.Merit
	}
	return nil
}

func (x *MudRiddle) GetCreationBirthday() []string {
	if x != nil {
		return x.CreationBirthday
	}
	return nil
}

func (x *MudRiddle) GetHardwareFood() []string {
	if x != nil {
		return x.HardwareFood
	}
	return nil
}

func (x *MudRiddle) GetTurkeyValley() []string {
	if x != nil {
		return x.TurkeyValley
	}
	return nil
}

func (x *MudRiddle) GetTramPuppet() []string {
	if x != nil {
		return x.TramPuppet
	}
	return nil
}

func (x *MudRiddle) GetInsultSquare() []EnzymeLift {
	if x != nil {
		return x.InsultSquare
	}
	return nil
}

func (x *MudRiddle) GetHospitalVideo() []string {
	if x != nil {
		return x.HospitalVideo
	}
	return nil
}

type XrayPilot struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AnkleCoat         *int64                 `protobuf:"varint,1,opt,name=AnkleCoat" json:"AnkleCoat,omitempty"`
	ShelfSunglass     *int64                 `protobuf:"varint,2,opt,name=ShelfSunglass" json:"ShelfSunglass,omitempty"`
	BacteriaPaperclip *int64                 `protobuf:"varint,3,opt,name=BacteriaPaperclip" json:"BacteriaPaperclip,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *XrayPilot) Reset() {
	*x = XrayPilot{}
	mi := &file_puddingmilkshake_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XrayPilot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrayPilot) ProtoMessage() {}

func (x *XrayPilot) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrayPilot.ProtoReflect.Descriptor instead.
func (*XrayPilot) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{9}
}

func (x *XrayPilot) GetAnkleCoat() int64 {
	if x != nil && x.AnkleCoat != nil {
		return *x.AnkleCoat
	}
	return 0
}

func (x *XrayPilot) GetShelfSunglass() int64 {
	if x != nil && x.ShelfSunglass != nil {
		return *x.ShelfSunglass
	}
	return 0
}

func (x *XrayPilot) GetBacteriaPaperclip() int64 {
	if x != nil && x.BacteriaPaperclip != nil {
		return *x.BacteriaPaperclip
	}
	return 0
}

type XrayPilots struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AnkleCoats         []uint64               `protobuf:"varint,1,rep,name=AnkleCoats" json:"AnkleCoats,omitempty"`
	ShelfSunglasses    []uint64               `protobuf:"varint,2,rep,name=ShelfSunglasses" json:"ShelfSunglasses,omitempty"`
	BacteriaPaperclips []uint64               `protobuf:"varint,3,rep,name=BacteriaPaperclips" json:"BacteriaPaperclips,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *XrayPilots) Reset() {
	*x = XrayPilots{}
	mi := &file_puddingmilkshake_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XrayPilots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XrayPilots) ProtoMessage() {}

func (x *XrayPilots) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XrayPilots.ProtoReflect.Descriptor instead.
func (*XrayPilots) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{10}
}

func (x *XrayPilots) GetAnkleCoats() []uint64 {
	if x != nil {
		return x.AnkleCoats
	}
	return nil
}

func (x *XrayPilots) GetShelfSunglasses() []uint64 {
	if x != nil {
		return x.ShelfSunglasses
	}
	return nil
}

func (x *XrayPilots) GetBacteriaPaperclips() []uint64 {
	if x != nil {
		return x.BacteriaPaperclips
	}
	return nil
}

type BingleDaisy struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AccountantPowders []AccountantPowder     `protobuf:"varint,1,rep,name=AccountantPowders,enum=main.AccountantPowder" json:"AccountantPowders,omitempty"`
	DecoratorTask     []uint32               `protobuf:"varint,2,rep,name=DecoratorTask" json:"DecoratorTask,omitempty"`
	TailTable         [][]byte               `protobuf:"bytes,3,rep,name=TailTable" json:"TailTable,omitempty"`
	MachineCurtain    []string               `protobuf:"bytes,4,rep,name=MachineCurtain" json:"MachineCurtain,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BingleDaisy) Reset() {
	*x = BingleDaisy{}
	mi := &file_puddingmilkshake_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BingleDaisy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BingleDaisy) ProtoMessage() {}

func (x *BingleDaisy) ProtoReflect() protoreflect.Message {
	mi := &file_puddingmilkshake_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BingleDaisy.ProtoReflect.Descriptor instead.
func (*BingleDaisy) Descriptor() ([]byte, []int) {
	return file_puddingmilkshake_proto_rawDescGZIP(), []int{11}
}

func (x *BingleDaisy) GetAccountantPowders() []AccountantPowder {
	if x != nil {
		return x.AccountantPowders
	}
	return nil
}

func (x *BingleDaisy) GetDecoratorTask() []uint32 {
	if x != nil {
		return x.DecoratorTask
	}
	return nil
}

func (x *BingleDaisy) GetTailTable() [][]byte {
	if x != nil {
		return x.TailTable
	}
	return nil
}

func (x *BingleDaisy) GetMachineCurtain() []string {
	if x != nil {
		return x.MachineCurtain
	}
	return nil
}

var File_puddingmilkshake_proto protoreflect.FileDescriptor

var file_puddingmilkshake_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x75, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x6d, 0x69, 0x6c, 0x6b, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x7e,
	0x0a, 0x10, 0x50, 0x75, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x6c, 0x6b, 0x73, 0x68, 0x61,
	0x6b, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x75, 0x64,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x75, 0x64, 0x6f, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x4a, 0x75, 0x64, 0x6f, 0x12, 0x35, 0x0a, 0x0d, 0x52, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x75, 0x64, 0x52, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x52,
	0x0d, 0x52, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x75, 0x64, 0x65, 0x22, 0x97,
	0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4a, 0x75, 0x64, 0x6f, 0x12, 0x30,
	0x0a, 0x0a, 0x53, 0x61, 0x6c, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x61, 0x6c, 0x61, 0x64, 0x57,
	0x6f, 0x72, 0x72, 0x79, 0x52, 0x0a, 0x53, 0x61, 0x6c, 0x61, 0x64, 0x57, 0x6f, 0x72, 0x72, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x75, 0x6d, 0x6f, 0x75, 0x72, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x52, 0x75, 0x6d, 0x6f, 0x75, 0x72, 0x53, 0x70,
	0x69, 0x72, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x14, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x53, 0x70, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xd3, 0x05, 0x0a, 0x0a, 0x53, 0x61, 0x6c,
	0x61, 0x64, 0x57, 0x6f, 0x72, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x0e, 0x48,
	0x6f, 0x6f, 0x6c, 0x69, 0x67, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x51, 0x75,
	0x65, 0x65, 0x6e, 0x52, 0x0e, 0x48, 0x6f, 0x6f, 0x6c, 0x69, 0x67, 0x61, 0x6e, 0x56, 0x61, 0x6c,
	0x6c, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x67, 0x61, 0x7a, 0x69, 0x6e, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x67, 0x61,
	0x7a, 0x69, 0x6e, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x58, 0x72, 0x61,
	0x79, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x58, 0x72, 0x61, 0x79, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x52, 0x09, 0x58,
	0x72, 0x61, 0x79, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x4c, 0x6f, 0x67, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x36,
	0x0a, 0x0c, 0x4e, 0x65, 0x6f, 0x6e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x62, 0x65, 0x4d, 0x69, 0x73, 0x65, 0x72, 0x52, 0x0c, 0x4e, 0x65, 0x6f, 0x6e, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x66, 0x54, 0x72,
	0x65, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c, 0x65, 0x61,
	0x66, 0x54, 0x72, 0x65, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x4e, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x52, 0x61, 0x64, 0x61,
	0x72, 0x42, 0x6f, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x42, 0x6f, 0x78, 0x52, 0x08, 0x52, 0x61, 0x64, 0x61,
	0x72, 0x42, 0x6f, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x41,
	0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x36,
	0x0a, 0x0c, 0x53, 0x70, 0x79, 0x43, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x70, 0x79, 0x43,
	0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x53, 0x70, 0x79, 0x43, 0x61, 0x72,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x50, 0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x64, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x50,
	0x61, 0x72, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x69, 0x6d, 0x65, 0x22, 0x8c,
	0x01, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x53,
	0x6b, 0x79, 0x73, 0x63, 0x72, 0x61, 0x70, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x53, 0x6b, 0x79, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x67, 0x65, 0x4d,
	0x69, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72,
	0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x47, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x22, 0x6e, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x42, 0x61, 0x6c, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x12,
	0x3c, 0x0a, 0x0d, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x64, 0x65, 0x72, 0x52, 0x0d,
	0x44, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x6f, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x61, 0x74, 0x22, 0xae, 0x05,
	0x0a, 0x0c, 0x53, 0x70, 0x79, 0x43, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x72, 0x61, 0x6b, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x79, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x57, 0x69, 0x72, 0x65, 0x4f, 0x79, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x0a, 0x58, 0x72, 0x61, 0x79, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x58, 0x72, 0x61, 0x79,
	0x50, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x0a, 0x58, 0x72, 0x61, 0x79, 0x50, 0x69, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x42, 0x61, 0x73, 0x6b,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x42, 0x61, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x52, 0x75, 0x73, 0x73, 0x69, 0x61, 0x42, 0x61, 0x73,
	0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x54, 0x75, 0x73, 0x6b,
	0x52, 0x13, 0x41, 0x63, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x44, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6c, 0x64, 0x6f, 0x7a,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6b, 0x65, 0x72, 0x63, 0x68, 0x69, 0x65, 0x66, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x54, 0x75, 0x73, 0x6b, 0x52, 0x15, 0x42, 0x75, 0x6c, 0x6c, 0x64, 0x6f, 0x7a, 0x65, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x6b, 0x65, 0x72, 0x63, 0x68, 0x69, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x0b, 0x56,
	0x65, 0x6c, 0x63, 0x72, 0x6f, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x57, 0x69, 0x6e, 0x65, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0b, 0x56, 0x65, 0x6c, 0x63, 0x72, 0x6f, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x65, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x42, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x50, 0x65, 0x70, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x53, 0x6f, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0f, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x6e, 0x65, 0x4c, 0x65, 0x6d, 0x6f, 0x6e, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x6e,
	0x65, 0x4c, 0x65, 0x6d, 0x6f, 0x6e, 0x61, 0x64, 0x65, 0x52, 0x0f, 0x4d, 0x69, 0x67, 0x72, 0x61,
	0x6e, 0x65, 0x4c, 0x65, 0x6d, 0x6f, 0x6e, 0x61, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x68,
	0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0b, 0x57, 0x68, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x4c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x52, 0x75, 0x6d, 0x6f, 0x75, 0x72, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0c, 0x4c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x52, 0x75, 0x6d, 0x6f, 0x75, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0a, 0x50, 0x65, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x68,
	0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x54, 0x75, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x0a, 0x56, 0x69,
	0x6f, 0x6c, 0x69, 0x6e, 0x44, 0x75, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x6c, 0x74, 0x61, 0x72, 0x50, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x0a, 0x56, 0x69, 0x6f, 0x6c, 0x69, 0x6e, 0x44, 0x75, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x50, 0x6c, 0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6c, 0x6f, 0x61, 0x6b, 0x50, 0x6c,
	0x61, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x65, 0x0a, 0x0f, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x6e, 0x65, 0x4c, 0x65, 0x6d, 0x6f, 0x6e, 0x61, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x41,
	0x72, 0x63, 0x68, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x42, 0x75, 0x62, 0x62,
	0x6c, 0x65, 0x52, 0x0b, 0x41, 0x72, 0x63, 0x68, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x72, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x72, 0x6f, 0x74, 0x22,
	0x9c, 0x03, 0x0a, 0x09, 0x4d, 0x75, 0x64, 0x52, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x12, 0x30, 0x0a,
	0x0a, 0x58, 0x72, 0x61, 0x79, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x58, 0x72, 0x61, 0x79, 0x50, 0x69, 0x6c,
	0x6f, 0x74, 0x73, 0x52, 0x0a, 0x58, 0x72, 0x61, 0x79, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x77, 0x61, 0x79, 0x47, 0x65, 0x6e, 0x69, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x75, 0x6e, 0x77, 0x61, 0x79, 0x47, 0x65, 0x6e,
	0x69, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x69,
	0x73, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x42, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x73, 0x79, 0x52, 0x0b, 0x42, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x44, 0x61, 0x69, 0x73, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x65, 0x72, 0x69,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x4d, 0x65, 0x72, 0x69, 0x74, 0x12, 0x2a,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x46, 0x6f, 0x6f, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x75, 0x72, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x6c, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x75, 0x72, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x6c,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6d, 0x50, 0x75, 0x70, 0x70, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x6d, 0x50, 0x75, 0x70, 0x70,
	0x65, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x71, 0x75, 0x61,
	0x72, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x45, 0x6e, 0x7a, 0x79, 0x6d, 0x65, 0x4c, 0x69, 0x66, 0x74, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x22, 0x7d,
	0x0a, 0x09, 0x58, 0x72, 0x61, 0x79, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x6e, 0x6b, 0x6c, 0x65, 0x43, 0x6f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x41, 0x6e, 0x6b, 0x6c, 0x65, 0x43, 0x6f, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x68, 0x65,
	0x6c, 0x66, 0x53, 0x75, 0x6e, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x53, 0x75, 0x6e, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x42, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x61, 0x50, 0x61, 0x70, 0x65, 0x72,
	0x63, 0x6c, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x42, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x50, 0x61, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x70, 0x22, 0x86, 0x01,
	0x0a, 0x0a, 0x58, 0x72, 0x61, 0x79, 0x50, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x6e, 0x6b, 0x6c, 0x65, 0x43, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0a, 0x41, 0x6e, 0x6b, 0x6c, 0x65, 0x43, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x68, 0x65, 0x6c, 0x66, 0x53, 0x75, 0x6e, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0f, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x53, 0x75, 0x6e, 0x67,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x50, 0x61, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x12, 0x42, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x61, 0x50, 0x61, 0x70, 0x65,
	0x72, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x44, 0x61, 0x69, 0x73, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x61, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x64, 0x65, 0x72, 0x52, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x61, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x0d, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x54, 0x61, 0x69, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x75, 0x72, 0x74, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x43, 0x75, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x2a, 0x46, 0x0a, 0x0c, 0x41, 0x6c, 0x74, 0x61,
	0x72, 0x50, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x75, 0x73, 0x6b, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x72, 0x75, 0x6d, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x65, 0x72, 0x65, 0x61,
	0x6c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x74, 0x10, 0x04,
	0x2a, 0x43, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x42, 0x75, 0x62, 0x62, 0x6c, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x72, 0x6f, 0x6d, 0x61, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x75,
	0x73, 0x74, 0x61, 0x63, 0x68, 0x65, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x75, 0x70, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x6f, 0x65, 0x73, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x65, 0x61, 0x6c, 0x10, 0x04, 0x2a, 0x2f, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63,
	0x42, 0x61, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x75, 0x73, 0x74, 0x61, 0x72, 0x64, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x01, 0x2a, 0x48, 0x0a, 0x0e, 0x57, 0x69, 0x6e, 0x65, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x6f, 0x79, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x65,
	0x72, 0x63, 0x68, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x04,
	0x2a, 0xcf, 0x01, 0x0a, 0x0c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x62, 0x65, 0x4d, 0x69, 0x73, 0x65,
	0x72, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x6c, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x70, 0x65, 0x64, 0x69, 0x61, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x65, 0x62, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x69, 0x6e,
	0x67, 0x65, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x6f, 0x76, 0x65, 0x6c, 0x10, 0x05, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69,
	0x6e, 0x63, 0x65, 0x72, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x63, 0x72, 0x65,
	0x74, 0x65, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x10, 0x09,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x72, 0x75, 0x69, 0x73, 0x65, 0x53, 0x68, 0x69, 0x70, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x6f, 0x6e, 0x67, 0x75, 0x65, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x65, 0x70, 0x70, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6d,
	0x65, 0x6c, 0x65, 0x6f, 0x6e, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6e, 0x6f, 0x72, 0x65,
	0x10, 0x0e, 0x2a, 0x53, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x75,
	0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x67, 0x68, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x72, 0x74, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x79, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x61,
	0x73, 0x68, 0x69, 0x65, 0x72, 0x10, 0x04, 0x2a, 0x4a, 0x0a, 0x0a, 0x45, 0x6e, 0x7a, 0x79, 0x6d,
	0x65, 0x4c, 0x69, 0x66, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x69, 0x73, 0x68, 0x6f, 0x70, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x72, 0x69, 0x73, 0x70, 0x79, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x72, 0x69,
	0x61, 0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x10, 0x04, 0x2a, 0x8c, 0x05, 0x0a, 0x08, 0x52, 0x61, 0x64, 0x61, 0x72, 0x42, 0x6f, 0x78,
	0x12, 0x0a, 0x0a, 0x06, 0x47, 0x75, 0x74, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x65, 0x61, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x75, 0x72, 0x73, 0x65, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6d, 0x62, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x66,
	0x66, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x6f, 0x6c, 0x64, 0x69, 0x65, 0x72, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x70, 0x69, 0x6e, 0x65, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x66, 0x6c, 0x79, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x0a,
	0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x64, 0x65, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x61, 0x72, 0x61, 0x6e, 0x6f, 0x69, 0x61, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x0e, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x10, 0x0f, 0x12, 0x0c, 0x0a,
	0x08, 0x48, 0x6f, 0x73, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x65, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x61, 0x72, 0x6c,
	0x69, 0x63, 0x10, 0x12, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x69, 0x62, 0x10, 0x14, 0x12, 0x0f, 0x0a,
	0x0b, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x62, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x15, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x6f, 0x76, 0x65, 0x72, 0x74, 0x79, 0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x69, 0x61, 0x6e, 0x6f, 0x10, 0x17, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x10, 0x19, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x75, 0x62, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x75, 0x6e, 0x67, 0x75, 0x73,
	0x10, 0x1b, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x75, 0x6c, 0x62, 0x10, 0x1c, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x10, 0x1d, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x72, 0x6d, 0x73, 0x10, 0x1e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x69, 0x6c, 0x6c, 0x6f, 0x77, 0x10,
	0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x72, 0x6f, 0x74, 0x10, 0x20, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x63, 0x61, 0x6c, 0x6c, 0x6f, 0x70, 0x10, 0x21, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x61,
	0x70, 0x70, 0x79, 0x10, 0x22, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6c, 0x75, 0x67, 0x10, 0x23, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x65, 0x61, 0x63, 0x6f, 0x63, 0x6b, 0x10, 0x24, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x72, 0x69, 0x62, 0x65, 0x10, 0x25, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x61, 0x74, 0x10, 0x26,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x74, 0x10, 0x27, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x72, 0x65,
	0x73, 0x73, 0x10, 0x28, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x10, 0x29, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x72, 0x70, 0x65, 0x74, 0x10, 0x2a, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x75, 0x6e, 0x74, 0x10, 0x2b, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x2c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x69, 0x72, 0x73, 0x10,
	0x2d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x61, 0x76, 0x69, 0x6f, 0x75, 0x72, 0x10, 0x2e, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x2f, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x6c,
	0x6c, 0x10, 0x30, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x10,
	0x31, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61, 0x69, 0x73, 0x79, 0x10, 0x32, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x10, 0x33, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x72, 0x65,
	0x10, 0x34, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x69, 0x65, 0x72,
	0x10, 0x35, 0x2a, 0x51, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x6e, 0x74,
	0x50, 0x6f, 0x77, 0x64, 0x65, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x6f, 0x6c, 0x70, 0x68, 0x69,
	0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x75, 0x6d, 0x70, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x61, 0x75, 0x73, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x6f,
	0x6c, 0x69, 0x64, 0x61, 0x79, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x6c, 0x61, 0x6d, 0x65,
	0x6e, 0x63, 0x6f, 0x10, 0x04, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x74, 0x79, 0x64, 0x69, 0x64, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
}

var (
	file_puddingmilkshake_proto_rawDescOnce sync.Once
	file_puddingmilkshake_proto_rawDescData = file_puddingmilkshake_proto_rawDesc
)

func file_puddingmilkshake_proto_rawDescGZIP() []byte {
	file_puddingmilkshake_proto_rawDescOnce.Do(func() {
		file_puddingmilkshake_proto_rawDescData = protoimpl.X.CompressGZIP(file_puddingmilkshake_proto_rawDescData)
	})
	return file_puddingmilkshake_proto_rawDescData
}

var file_puddingmilkshake_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_puddingmilkshake_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_puddingmilkshake_proto_goTypes = []any{
	(AltarPlastic)(0),          // 0: main.AltarPlastic
	(ArchBubble)(0),            // 1: main.ArchBubble
	(PlasticBagCertificate)(0), // 2: main.PlasticBagCertificate
	(WineMicroscope)(0),        // 3: main.WineMicroscope
	(MicrobeMiser)(0),          // 4: main.MicrobeMiser
	(CancerUserExperience)(0),  // 5: main.CancerUserExperience
	(EnzymeLift)(0),            // 6: main.EnzymeLift
	(RadarBox)(0),              // 7: main.RadarBox
	(AccountantPowder)(0),      // 8: main.AccountantPowder
	(*PuddingMilkshake)(nil),   // 9: main.PuddingMilkshake
	(*FinanceJudo)(nil),        // 10: main.FinanceJudo
	(*SaladWorry)(nil),         // 11: main.SaladWorry
	(*KeyQueen)(nil),           // 12: main.KeyQueen
	(*TravelBallRoom)(nil),     // 13: main.TravelBallRoom
	(*SpyCarpenter)(nil),       // 14: main.SpyCarpenter
	(*StarTusk)(nil),           // 15: main.StarTusk
	(*MigraneLemonade)(nil),    // 16: main.MigraneLemonade
	(*MudRiddle)(nil),          // 17: main.MudRiddle
	(*XrayPilot)(nil),          // 18: main.XrayPilot
	(*XrayPilots)(nil),         // 19: main.XrayPilots
	(*BingleDaisy)(nil),        // 20: main.BingleDaisy
}
var file_puddingmilkshake_proto_depIdxs = []int32{
	10, // 0: main.PuddingMilkshake.FinanceJudo:type_name -> main.FinanceJudo
	17, // 1: main.PuddingMilkshake.RainInterlude:type_name -> main.MudRiddle
	11, // 2: main.FinanceJudo.SaladWorry:type_name -> main.SaladWorry
	12, // 3: main.SaladWorry.HooliganValley:type_name -> main.KeyQueen
	18, // 4: main.SaladWorry.XrayPilot:type_name -> main.XrayPilot
	4,  // 5: main.SaladWorry.NeonLightEnd:type_name -> main.MicrobeMiser
	5,  // 6: main.SaladWorry.CancerUserExperience:type_name -> main.CancerUserExperience
	7,  // 7: main.SaladWorry.RadarBox:type_name -> main.RadarBox
	14, // 8: main.SaladWorry.SpyCarpenter:type_name -> main.SpyCarpenter
	13, // 9: main.SaladWorry.TableScandal:type_name -> main.TravelBallRoom
	8,  // 10: main.TravelBallRoom.DanceShooting:type_name -> main.AccountantPowder
	19, // 11: main.SpyCarpenter.XrayPilots:type_name -> main.XrayPilots
	2,  // 12: main.SpyCarpenter.RussiaBasket:type_name -> main.PlasticBagCertificate
	15, // 13: main.SpyCarpenter.AccidentStockMarket:type_name -> main.StarTusk
	15, // 14: main.SpyCarpenter.BulldozerHandkerchief:type_name -> main.StarTusk
	3,  // 15: main.SpyCarpenter.VelcroBench:type_name -> main.WineMicroscope
	16, // 16: main.SpyCarpenter.MigraneLemonade:type_name -> main.MigraneLemonade
	0,  // 17: main.StarTusk.ViolinDuty:type_name -> main.AltarPlastic
	1,  // 18: main.MigraneLemonade.ArchBubbles:type_name -> main.ArchBubble
	19, // 19: main.MudRiddle.XrayPilots:type_name -> main.XrayPilots
	20, // 20: main.MudRiddle.BingleDaisy:type_name -> main.BingleDaisy
	6,  // 21: main.MudRiddle.InsultSquare:type_name -> main.EnzymeLift
	8,  // 22: main.BingleDaisy.AccountantPowders:type_name -> main.AccountantPowder
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_puddingmilkshake_proto_init() }
func file_puddingmilkshake_proto_init() {
	if File_puddingmilkshake_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_puddingmilkshake_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_puddingmilkshake_proto_goTypes,
		DependencyIndexes: file_puddingmilkshake_proto_depIdxs,
		EnumInfos:         file_puddingmilkshake_proto_enumTypes,
		MessageInfos:      file_puddingmilkshake_proto_msgTypes,
	}.Build()
	File_puddingmilkshake_proto = out.File
	file_puddingmilkshake_proto_rawDesc = nil
	file_puddingmilkshake_proto_goTypes = nil
	file_puddingmilkshake_proto_depIdxs = nil
}
