// Code generated by goderive DO NOT EDIT.

package main

import (
	"bytes"
	"fmt"
)

// deriveGoStringBananaTuple returns a recursive representation of this as a valid go string.
func deriveGoStringBananaTuple(this *BananaTuple) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.BananaTuple {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.BananaTuple{}\n")
		fmt.Fprintf(buf, "this.BananaTime = %#v\n", this.BananaTime)
		fmt.Fprintf(buf, "this.Pulpy = %#v\n", this.Pulpy)
		fmt.Fprintf(buf, "this.IsPulpySet = %#v\n", this.IsPulpySet)
		fmt.Fprintf(buf, "this.Yummy = %#v\n", this.Yummy)
		fmt.Fprintf(buf, "this.IsYummySet = %#v\n", this.IsYummySet)
		fmt.Fprintf(buf, "this.Chewy = %#v\n", this.Chewy)
		fmt.Fprintf(buf, "this.IsChewySet = %#v\n", this.IsChewySet)
		fmt.Fprintf(buf, "this.Squishy = %#v\n", this.Squishy)
		fmt.Fprintf(buf, "this.IsSquishySet = %#v\n", this.IsSquishySet)
		fmt.Fprintf(buf, "this.Brown = %#v\n", this.Brown)
		fmt.Fprintf(buf, "this.IsBrownSet = %#v\n", this.IsBrownSet)
		fmt.Fprintf(buf, "this.Rotten = %#v\n", this.Rotten)
		fmt.Fprintf(buf, "this.IsRottenSet = %#v\n", this.IsRottenSet)
		fmt.Fprintf(buf, "this.Peel = %#v\n", this.Peel)
		fmt.Fprintf(buf, "this.IsPeelSet = %#v\n", this.IsPeelSet)
		fmt.Fprintf(buf, "this.PeelType = %#v\n", this.PeelType)
		fmt.Fprintf(buf, "this.IsPeelTypeSet = %#v\n", this.IsPeelTypeSet)
		fmt.Fprintf(buf, "this.BananaSource = %#v\n", this.BananaSource)
		fmt.Fprintf(buf, "this.Slippery = %#v\n", this.Slippery)
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringKnot returns a recursive representation of this as a valid go string.
func deriveGoStringKnot(this *Knot) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Knot {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Knot{}\n")
		if this.Bight != nil {
			fmt.Fprintf(buf, "this.Bight = %s\n", deriveGoString_(this.Bight))
		}
		if this.Elbow != nil {
			fmt.Fprintf(buf, "this.Elbow = func (v bool) *bool { return &v }(%#v)\n", *this.Elbow)
		}
		if this.BitterEnd != nil {
			fmt.Fprintf(buf, "this.BitterEnd = %s\n", deriveGoStringKnot(this.BitterEnd))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringBightKnot returns a recursive representation of this as a valid go string.
func deriveGoStringBightKnot(this *BightKnot) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.BightKnot {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.BightKnot{}\n")
		if this.Loop != nil {
			fmt.Fprintf(buf, "this.Loop = %s\n", deriveGoStringKnot(this.Loop))
		}
		if this.Turn != nil {
			fmt.Fprintf(buf, "this.Turn = func (v bool) *bool { return &v }(%#v)\n", *this.Turn)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringPerson returns a recursive representation of this as a valid go string.
func deriveGoStringPerson(this *Person) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Person {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Person{}\n")
		if this.Name != nil {
			fmt.Fprintf(buf, "this.Name = func (v string) *string { return &v }(%#v)\n", *this.Name)
		}
		if this.Addresses != nil {
			fmt.Fprintf(buf, "this.Addresses = %s\n", deriveGoString_1(this.Addresses))
		}
		if this.Telephone != nil {
			fmt.Fprintf(buf, "this.Telephone = func (v string) *string { return &v }(%#v)\n", *this.Telephone)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringAddress returns a recursive representation of this as a valid go string.
func deriveGoStringAddress(this *Address) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Address {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Address{}\n")
		if this.Number != nil {
			fmt.Fprintf(buf, "this.Number = func (v int64) *int64 { return &v }(%#v)\n", *this.Number)
		}
		if this.Street != nil {
			fmt.Fprintf(buf, "this.Street = func (v string) *string { return &v }(%#v)\n", *this.Street)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringPuddingMilkshake returns a recursive representation of this as a valid go string.
func deriveGoStringPuddingMilkshake(this *PuddingMilkshake) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.PuddingMilkshake {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.PuddingMilkshake{}\n")
		if this.FinanceJudo != nil {
			fmt.Fprintf(buf, "this.FinanceJudo = %s\n", deriveGoStringFinanceJudo(this.FinanceJudo))
		}
		if this.RainInterlude != nil {
			fmt.Fprintf(buf, "this.RainInterlude = %s\n", deriveGoStringMudRiddle(this.RainInterlude))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringFinanceJudo returns a recursive representation of this as a valid go string.
func deriveGoStringFinanceJudo(this *FinanceJudo) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.FinanceJudo {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.FinanceJudo{}\n")
		if this.SaladWorry != nil {
			fmt.Fprintf(buf, "this.SaladWorry = %s\n", deriveGoStringSaladWorry(this.SaladWorry))
		}
		if this.RumourSpirit != nil {
			fmt.Fprintf(buf, "this.RumourSpirit = func (v int64) *int64 { return &v }(%#v)\n", *this.RumourSpirit)
		}
		if this.UserInterfaceSpanner != nil {
			fmt.Fprintf(buf, "this.UserInterfaceSpanner = func (v int64) *int64 { return &v }(%#v)\n", *this.UserInterfaceSpanner)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringSaladWorry returns a recursive representation of this as a valid go string.
func deriveGoStringSaladWorry(this *SaladWorry) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.SaladWorry {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.SaladWorry{}\n")
		if this.MeasureGrade != nil {
			fmt.Fprintf(buf, "this.MeasureGrade = %#v\n", this.MeasureGrade)
		}
		if this.HooliganValley != nil {
			fmt.Fprintf(buf, "this.HooliganValley = %s\n", deriveGoStringKeyQueen(this.HooliganValley))
		}
		if this.MagazineFrame != nil {
			fmt.Fprintf(buf, "this.MagazineFrame = %#v\n", this.MagazineFrame)
		}
		if this.XrayPilot != nil {
			fmt.Fprintf(buf, "this.XrayPilot = %s\n", deriveGoStringXrayPilot(this.XrayPilot))
		}
		if this.LogMicrophone != nil {
			fmt.Fprintf(buf, "this.LogMicrophone = func (v bool) *bool { return &v }(%#v)\n", *this.LogMicrophone)
		}
		if this.NeonLightEnd != nil {
			fmt.Fprintf(buf, "this.NeonLightEnd = %s\n", deriveGoString_2(this.NeonLightEnd))
		}
		if this.LeafTrellis != nil {
			fmt.Fprintf(buf, "this.LeafTrellis = func (v string) *string { return &v }(%#v)\n", *this.LeafTrellis)
		}
		if this.CancerUserExperience != nil {
			fmt.Fprintf(buf, "this.CancerUserExperience = %s\n", deriveGoString_3(this.CancerUserExperience))
		}
		if this.RadarBox != nil {
			fmt.Fprintf(buf, "this.RadarBox = %s\n", deriveGoString_4(this.RadarBox))
		}
		if this.AccidentStadium != nil {
			fmt.Fprintf(buf, "this.AccidentStadium = func (v bool) *bool { return &v }(%#v)\n", *this.AccidentStadium)
		}
		if this.SpyCarpenter != nil {
			fmt.Fprintf(buf, "this.SpyCarpenter = %s\n", deriveGoStringSpyCarpenter(this.SpyCarpenter))
		}
		if this.PrizeRemoteControl != nil {
			fmt.Fprintf(buf, "this.PrizeRemoteControl = func (v string) *string { return &v }(%#v)\n", *this.PrizeRemoteControl)
		}
		if this.TableScandal != nil {
			fmt.Fprintf(buf, "this.TableScandal = %s\n", deriveGoStringTravelBallRoom(this.TableScandal))
		}
		if this.StormTermite != nil {
			fmt.Fprintf(buf, "this.StormTermite = %#v\n", this.StormTermite)
		}
		if this.ParliamentChime != nil {
			fmt.Fprintf(buf, "this.ParliamentChime = %s\n", deriveGoString_5(this.ParliamentChime))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringKeyQueen returns a recursive representation of this as a valid go string.
func deriveGoStringKeyQueen(this *KeyQueen) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.KeyQueen {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.KeyQueen{}\n")
		if this.SkyscraperUniversity != nil {
			fmt.Fprintf(buf, "this.SkyscraperUniversity = %#v\n", this.SkyscraperUniversity)
		}
		if this.RevengeMirror != nil {
			fmt.Fprintf(buf, "this.RevengeMirror = %s\n", deriveGoString_5(this.RevengeMirror))
		}
		if this.TrailerGallery != nil {
			fmt.Fprintf(buf, "this.TrailerGallery = %#v\n", this.TrailerGallery)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringTravelBallRoom returns a recursive representation of this as a valid go string.
func deriveGoStringTravelBallRoom(this *TravelBallRoom) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.TravelBallRoom {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.TravelBallRoom{}\n")
		if this.DanceShooting != nil {
			fmt.Fprintf(buf, "this.DanceShooting = %s\n", deriveGoString_6(this.DanceShooting))
		}
		if this.ReasonCoat != nil {
			fmt.Fprintf(buf, "this.ReasonCoat = %#v\n", this.ReasonCoat)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringSpyCarpenter returns a recursive representation of this as a valid go string.
func deriveGoStringSpyCarpenter(this *SpyCarpenter) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.SpyCarpenter {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.SpyCarpenter{}\n")
		if this.PartyBrakes != nil {
			fmt.Fprintf(buf, "this.PartyBrakes = %#v\n", this.PartyBrakes)
		}
		if this.WireOyster != nil {
			fmt.Fprintf(buf, "this.WireOyster = %#v\n", this.WireOyster)
		}
		if this.XrayPilots != nil {
			fmt.Fprintf(buf, "this.XrayPilots = %s\n", deriveGoStringXrayPilots(this.XrayPilots))
		}
		if this.RussiaBasket != nil {
			fmt.Fprintf(buf, "this.RussiaBasket = %s\n", deriveGoString_7(this.RussiaBasket))
		}
		if this.AccidentStockMarket != nil {
			fmt.Fprintf(buf, "this.AccidentStockMarket = %s\n", deriveGoStringStarTusk(this.AccidentStockMarket))
		}
		if this.BulldozerHandkerchief != nil {
			fmt.Fprintf(buf, "this.BulldozerHandkerchief = %s\n", deriveGoStringStarTusk(this.BulldozerHandkerchief))
		}
		if this.VelcroBench != nil {
			fmt.Fprintf(buf, "this.VelcroBench = %s\n", deriveGoString_8(this.VelcroBench))
		}
		if this.BridgePepper != nil {
			fmt.Fprintf(buf, "this.BridgePepper = %#v\n", this.BridgePepper)
		}
		if this.FountainTarget != nil {
			fmt.Fprintf(buf, "this.FountainTarget = %#v\n", this.FountainTarget)
		}
		if this.SoleFin != nil {
			fmt.Fprintf(buf, "this.SoleFin = %#v\n", this.SoleFin)
		}
		if this.MigraneLemonade != nil {
			fmt.Fprintf(buf, "this.MigraneLemonade = %s\n", deriveGoStringMigraneLemonade(this.MigraneLemonade))
		}
		if this.WhaleColour != nil {
			fmt.Fprintf(buf, "this.WhaleColour = %#v\n", this.WhaleColour)
		}
		if this.LawyerRumour != nil {
			fmt.Fprintf(buf, "this.LawyerRumour = %s\n", deriveGoString_5(this.LawyerRumour))
		}
		if this.ToothSale != nil {
			fmt.Fprintf(buf, "this.ToothSale = %#v\n", this.ToothSale)
		}
		if this.PearLeader != nil {
			fmt.Fprintf(buf, "this.PearLeader = %s\n", deriveGoString_5(this.PearLeader))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringStarTusk returns a recursive representation of this as a valid go string.
func deriveGoStringStarTusk(this *StarTusk) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.StarTusk {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.StarTusk{}\n")
		if this.ViolinDuty != nil {
			fmt.Fprintf(buf, "this.ViolinDuty = %s\n", deriveGoString_9(this.ViolinDuty))
		}
		if this.CloakPlayground != nil {
			fmt.Fprintf(buf, "this.CloakPlayground = %#v\n", this.CloakPlayground)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringMigraneLemonade returns a recursive representation of this as a valid go string.
func deriveGoStringMigraneLemonade(this *MigraneLemonade) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.MigraneLemonade {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.MigraneLemonade{}\n")
		if this.ArchBubbles != nil {
			fmt.Fprintf(buf, "this.ArchBubbles = %s\n", deriveGoString_10(this.ArchBubbles))
		}
		if this.FactParrot != nil {
			fmt.Fprintf(buf, "this.FactParrot = %#v\n", this.FactParrot)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringMudRiddle returns a recursive representation of this as a valid go string.
func deriveGoStringMudRiddle(this *MudRiddle) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.MudRiddle {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.MudRiddle{}\n")
		if this.XrayPilots != nil {
			fmt.Fprintf(buf, "this.XrayPilots = %s\n", deriveGoStringXrayPilots(this.XrayPilots))
		}
		if this.RunwayGenius != nil {
			fmt.Fprintf(buf, "this.RunwayGenius = %#v\n", this.RunwayGenius)
		}
		if this.BingleDaisy != nil {
			fmt.Fprintf(buf, "this.BingleDaisy = %s\n", deriveGoStringBingleDaisy(this.BingleDaisy))
		}
		if this.Merit != nil {
			fmt.Fprintf(buf, "this.Merit = %#v\n", this.Merit)
		}
		if this.CreationBirthday != nil {
			fmt.Fprintf(buf, "this.CreationBirthday = %#v\n", this.CreationBirthday)
		}
		if this.HardwareFood != nil {
			fmt.Fprintf(buf, "this.HardwareFood = %#v\n", this.HardwareFood)
		}
		if this.TurkeyValley != nil {
			fmt.Fprintf(buf, "this.TurkeyValley = %#v\n", this.TurkeyValley)
		}
		if this.TramPuppet != nil {
			fmt.Fprintf(buf, "this.TramPuppet = %#v\n", this.TramPuppet)
		}
		if this.InsultSquare != nil {
			fmt.Fprintf(buf, "this.InsultSquare = %s\n", deriveGoString_11(this.InsultSquare))
		}
		if this.HospitalVideo != nil {
			fmt.Fprintf(buf, "this.HospitalVideo = %#v\n", this.HospitalVideo)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringXrayPilot returns a recursive representation of this as a valid go string.
func deriveGoStringXrayPilot(this *XrayPilot) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.XrayPilot {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.XrayPilot{}\n")
		if this.AnkleCoat != nil {
			fmt.Fprintf(buf, "this.AnkleCoat = func (v int64) *int64 { return &v }(%#v)\n", *this.AnkleCoat)
		}
		if this.ShelfSunglass != nil {
			fmt.Fprintf(buf, "this.ShelfSunglass = func (v int64) *int64 { return &v }(%#v)\n", *this.ShelfSunglass)
		}
		if this.BacteriaPaperclip != nil {
			fmt.Fprintf(buf, "this.BacteriaPaperclip = func (v int64) *int64 { return &v }(%#v)\n", *this.BacteriaPaperclip)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringXrayPilots returns a recursive representation of this as a valid go string.
func deriveGoStringXrayPilots(this *XrayPilots) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.XrayPilots {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.XrayPilots{}\n")
		if this.AnkleCoats != nil {
			fmt.Fprintf(buf, "this.AnkleCoats = %#v\n", this.AnkleCoats)
		}
		if this.ShelfSunglasses != nil {
			fmt.Fprintf(buf, "this.ShelfSunglasses = %#v\n", this.ShelfSunglasses)
		}
		if this.BacteriaPaperclips != nil {
			fmt.Fprintf(buf, "this.BacteriaPaperclips = %#v\n", this.BacteriaPaperclips)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringBingleDaisy returns a recursive representation of this as a valid go string.
func deriveGoStringBingleDaisy(this *BingleDaisy) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.BingleDaisy {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.BingleDaisy{}\n")
		if this.AccountantPowders != nil {
			fmt.Fprintf(buf, "this.AccountantPowders = %s\n", deriveGoString_6(this.AccountantPowders))
		}
		if this.DecoratorTask != nil {
			fmt.Fprintf(buf, "this.DecoratorTask = %#v\n", this.DecoratorTask)
		}
		if this.TailTable != nil {
			fmt.Fprintf(buf, "this.TailTable = %s\n", deriveGoString_5(this.TailTable))
		}
		if this.MachineCurtain != nil {
			fmt.Fprintf(buf, "this.MachineCurtain = %#v\n", this.MachineCurtain)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringSrcTree returns a recursive representation of this as a valid go string.
func deriveGoStringSrcTree(this *SrcTree) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.SrcTree {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.SrcTree{}\n")
		if this.PackageName != nil {
			fmt.Fprintf(buf, "this.PackageName = func (v string) *string { return &v }(%#v)\n", *this.PackageName)
		}
		if this.Imports != nil {
			fmt.Fprintf(buf, "this.Imports = %s\n", deriveGoString_12(this.Imports))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringTopsyTurvy returns a recursive representation of this as a valid go string.
func deriveGoStringTopsyTurvy(this *TopsyTurvy) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.TopsyTurvy {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.TopsyTurvy{}\n")
		if this.Top != nil {
			fmt.Fprintf(buf, "this.Top = %s\n", deriveGoStringTopsy(this.Top))
		}
		if this.Turf != nil {
			fmt.Fprintf(buf, "this.Turf = %s\n", deriveGoStringTurvy(this.Turf))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringTopsy returns a recursive representation of this as a valid go string.
func deriveGoStringTopsy(this *Topsy) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Topsy {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Topsy{}\n")
		if this.Top != nil {
			fmt.Fprintf(buf, "this.Top = func (v int64) *int64 { return &v }(%#v)\n", *this.Top)
		}
		if this.Turf != nil {
			fmt.Fprintf(buf, "this.Turf = func (v int64) *int64 { return &v }(%#v)\n", *this.Turf)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringTurvy returns a recursive representation of this as a valid go string.
func deriveGoStringTurvy(this *Turvy) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Turvy {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Turvy{}\n")
		if this.Turf != nil {
			fmt.Fprintf(buf, "this.Turf = func (v int64) *int64 { return &v }(%#v)\n", *this.Turf)
		}
		if this.Top != nil {
			fmt.Fprintf(buf, "this.Top = func (v int64) *int64 { return &v }(%#v)\n", *this.Top)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringTreeRegister returns a recursive representation of this as a valid go string.
func deriveGoStringTreeRegister(this *TreeRegister) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.TreeRegister {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.TreeRegister{}\n")
		if this.Trees != nil {
			fmt.Fprintf(buf, "this.Trees = %s\n", deriveGoString_13(this.Trees))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringTree returns a recursive representation of this as a valid go string.
func deriveGoStringTree(this *Tree) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Tree {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Tree{}\n")
		if this.GeneralInformation != nil {
			fmt.Fprintf(buf, "this.GeneralInformation = %s\n", deriveGoStringGeneralInformation(this.GeneralInformation))
		}
		if this.OtherInformation != nil {
			fmt.Fprintf(buf, "this.OtherInformation = %s\n", deriveGoStringOtherInformation(this.OtherInformation))
		}
		if this.Measurements != nil {
			fmt.Fprintf(buf, "this.Measurements = %s\n", deriveGoStringMeasurements(this.Measurements))
		}
		if this.Condition != nil {
			fmt.Fprintf(buf, "this.Condition = %s\n", deriveGoStringCondition(this.Condition))
		}
		if this.AdditionalInformation != nil {
			fmt.Fprintf(buf, "this.AdditionalInformation = %s\n", deriveGoStringAdditionalInformation(this.AdditionalInformation))
		}
		if this.Sender != nil {
			fmt.Fprintf(buf, "this.Sender = %s\n", deriveGoStringSender(this.Sender))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringGeneralInformation returns a recursive representation of this as a valid go string.
func deriveGoStringGeneralInformation(this *GeneralInformation) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.GeneralInformation {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.GeneralInformation{}\n")
		if this.TypeOfTree != nil {
			fmt.Fprintf(buf, "this.TypeOfTree = func (v string) *string { return &v }(%#v)\n", *this.TypeOfTree)
		}
		if this.Ownership != nil {
			fmt.Fprintf(buf, "this.Ownership = func (v string) *string { return &v }(%#v)\n", *this.Ownership)
		}
		if this.CountryState != nil {
			fmt.Fprintf(buf, "this.CountryState = func (v string) *string { return &v }(%#v)\n", *this.CountryState)
		}
		if this.PostCodeZipCode != nil {
			fmt.Fprintf(buf, "this.PostCodeZipCode = func (v string) *string { return &v }(%#v)\n", *this.PostCodeZipCode)
		}
		if this.Location != nil {
			fmt.Fprintf(buf, "this.Location = func (v string) *string { return &v }(%#v)\n", *this.Location)
		}
		if this.FullAddress != nil {
			fmt.Fprintf(buf, "this.FullAddress = func (v string) *string { return &v }(%#v)\n", *this.FullAddress)
		}
		if this.Country != nil {
			fmt.Fprintf(buf, "this.Country = func (v string) *string { return &v }(%#v)\n", *this.Country)
		}
		if this.GridReference != nil {
			fmt.Fprintf(buf, "this.GridReference = func (v string) *string { return &v }(%#v)\n", *this.GridReference)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringOtherInformation returns a recursive representation of this as a valid go string.
func deriveGoStringOtherInformation(this *OtherInformation) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.OtherInformation {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.OtherInformation{}\n")
		if this.PlantingDate != nil {
			fmt.Fprintf(buf, "this.PlantingDate = func (v string) *string { return &v }(%#v)\n", *this.PlantingDate)
		}
		if this.SeedCollectionNo != nil {
			fmt.Fprintf(buf, "this.SeedCollectionNo = func (v string) *string { return &v }(%#v)\n", *this.SeedCollectionNo)
		}
		if this.PlantedBy != nil {
			fmt.Fprintf(buf, "this.PlantedBy = func (v string) *string { return &v }(%#v)\n", *this.PlantedBy)
		}
		if this.SeedCollector != nil {
			fmt.Fprintf(buf, "this.SeedCollector = func (v string) *string { return &v }(%#v)\n", *this.SeedCollector)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringMeasurements returns a recursive representation of this as a valid go string.
func deriveGoStringMeasurements(this *Measurements) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Measurements {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Measurements{}\n")
		if this.HeightMeasurement != nil {
			fmt.Fprintf(buf, "this.HeightMeasurement = %s\n", deriveGoStringHeightMeasurement(this.HeightMeasurement))
		}
		if this.WasHeightEstimated != nil {
			fmt.Fprintf(buf, "this.WasHeightEstimated = func (v bool) *bool { return &v }(%#v)\n", *this.WasHeightEstimated)
		}
		if this.Girth != nil {
			fmt.Fprintf(buf, "this.Girth = %s\n", deriveGoStringMeasurement(this.Girth))
		}
		if this.HeightOfGirthMeasurement != nil {
			fmt.Fprintf(buf, "this.HeightOfGirthMeasurement = %s\n", deriveGoStringMeasurement(this.HeightOfGirthMeasurement))
		}
		if this.GirthExaggerated != nil {
			fmt.Fprintf(buf, "this.GirthExaggerated = func (v bool) *bool { return &v }(%#v)\n", *this.GirthExaggerated)
		}
		if this.TreeGrowthCategory != nil {
			fmt.Fprintf(buf, "this.TreeGrowthCategory = %s\n", deriveGoString_14(this.TreeGrowthCategory))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringHeightMeasurement returns a recursive representation of this as a valid go string.
func deriveGoStringHeightMeasurement(this *HeightMeasurement) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.HeightMeasurement {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.HeightMeasurement{}\n")
		if this.Metres != nil {
			fmt.Fprintf(buf, "this.Metres = func (v float64) *float64 { return &v }(%#v)\n", *this.Metres)
		}
		if this.Feet != nil {
			fmt.Fprintf(buf, "this.Feet = func (v float64) *float64 { return &v }(%#v)\n", *this.Feet)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringMeasurement returns a recursive representation of this as a valid go string.
func deriveGoStringMeasurement(this *Measurement) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Measurement {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Measurement{}\n")
		if this.Metres != nil {
			fmt.Fprintf(buf, "this.Metres = func (v float64) *float64 { return &v }(%#v)\n", *this.Metres)
		}
		if this.Feet != nil {
			fmt.Fprintf(buf, "this.Feet = func (v int64) *int64 { return &v }(%#v)\n", *this.Feet)
		}
		if this.Inches != nil {
			fmt.Fprintf(buf, "this.Inches = func (v int64) *int64 { return &v }(%#v)\n", *this.Inches)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringCondition returns a recursive representation of this as a valid go string.
func deriveGoStringCondition(this *Condition) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Condition {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Condition{}\n")
		if this.GeneralAppearance != nil {
			fmt.Fprintf(buf, "this.GeneralAppearance = %s\n", deriveGoString_15(this.GeneralAppearance))
		}
		if this.TrunkStemming != nil {
			fmt.Fprintf(buf, "this.TrunkStemming = %s\n", deriveGoString_16(this.TrunkStemming))
		}
		if this.Ground != nil {
			fmt.Fprintf(buf, "this.Ground = %s\n", deriveGoString_17(this.Ground))
		}
		if this.Lead != nil {
			fmt.Fprintf(buf, "this.Lead = %s\n", deriveGoString_18(this.Lead))
		}
		if this.DeadBranches != nil {
			fmt.Fprintf(buf, "this.DeadBranches = %s\n", deriveGoString_19(this.DeadBranches))
		}
		if this.StormDamage != nil {
			fmt.Fprintf(buf, "this.StormDamage = %s\n", deriveGoString_20(this.StormDamage))
		}
		if this.PastManagement != nil {
			fmt.Fprintf(buf, "this.PastManagement = %s\n", deriveGoString_21(this.PastManagement))
		}
		if this.LocalOrNationalHistoricalInterest != nil {
			fmt.Fprintf(buf, "this.LocalOrNationalHistoricalInterest = %s\n", deriveGoString_22(this.LocalOrNationalHistoricalInterest))
		}
		if this.LocalLandmark != nil {
			fmt.Fprintf(buf, "this.LocalLandmark = %s\n", deriveGoString_22(this.LocalLandmark))
		}
		if this.RemarkableOrUnusual != nil {
			fmt.Fprintf(buf, "this.RemarkableOrUnusual = func (v bool) *bool { return &v }(%#v)\n", *this.RemarkableOrUnusual)
		}
		if this.Veteran != nil {
			fmt.Fprintf(buf, "this.Veteran = %s\n", deriveGoString_22(this.Veteran))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringAdditionalInformation returns a recursive representation of this as a valid go string.
func deriveGoStringAdditionalInformation(this *AdditionalInformation) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.AdditionalInformation {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.AdditionalInformation{}\n")
		if this.Comments != nil {
			fmt.Fprintf(buf, "this.Comments = func (v string) *string { return &v }(%#v)\n", *this.Comments)
		}
		if this.Other != nil {
			fmt.Fprintf(buf, "this.Other = func (v string) *string { return &v }(%#v)\n", *this.Other)
		}
		if this.Photos != nil {
			fmt.Fprintf(buf, "this.Photos = %s\n", deriveGoString_23(this.Photos))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringPhoto returns a recursive representation of this as a valid go string.
func deriveGoStringPhoto(this *Photo) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Photo {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Photo{}\n")
		if this.Filename != nil {
			fmt.Fprintf(buf, "this.Filename = func (v string) *string { return &v }(%#v)\n", *this.Filename)
		}
		if this.Data != nil {
			fmt.Fprintf(buf, "this.Data = %#v\n", this.Data)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringSender returns a recursive representation of this as a valid go string.
func deriveGoStringSender(this *Sender) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Sender {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.Sender{}\n")
		if this.Name != nil {
			fmt.Fprintf(buf, "this.Name = func (v string) *string { return &v }(%#v)\n", *this.Name)
		}
		if this.Address != nil {
			fmt.Fprintf(buf, "this.Address = func (v string) *string { return &v }(%#v)\n", *this.Address)
		}
		if this.Email != nil {
			fmt.Fprintf(buf, "this.Email = func (v string) *string { return &v }(%#v)\n", *this.Email)
		}
		if this.Telephone != nil {
			fmt.Fprintf(buf, "this.Telephone = func (v string) *string { return &v }(%#v)\n", *this.Telephone)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringTypewriterPrison returns a recursive representation of this as a valid go string.
func deriveGoStringTypewriterPrison(this *TypewriterPrison) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.TypewriterPrison {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.TypewriterPrison{}\n")
		if this.WineMessenger != nil {
			fmt.Fprintf(buf, "this.WineMessenger = %#v\n", this.WineMessenger)
		}
		if this.ShoelaceBeer != nil {
			fmt.Fprintf(buf, "this.ShoelaceBeer = %#v\n", this.ShoelaceBeer)
		}
		if this.PocketRoses != nil {
			fmt.Fprintf(buf, "this.PocketRoses = %s\n", deriveGoStringPocketRoses(this.PocketRoses))
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoStringPocketRoses returns a recursive representation of this as a valid go string.
func deriveGoStringPocketRoses(this *PocketRoses) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.PocketRoses {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := &main.PocketRoses{}\n")
		if this.ScarBusStop != nil {
			fmt.Fprintf(buf, "this.ScarBusStop = func (v string) *string { return &v }(%#v)\n", *this.ScarBusStop)
		}
		if this.BadgeShopping != nil {
			fmt.Fprintf(buf, "this.BadgeShopping = func (v int64) *int64 { return &v }(%#v)\n", *this.BadgeShopping)
		}
		if this.DaisySled != nil {
			fmt.Fprintf(buf, "this.DaisySled = func (v int64) *int64 { return &v }(%#v)\n", *this.DaisySled)
		}
		if this.SubmarineSaw != nil {
			fmt.Fprintf(buf, "this.SubmarineSaw = func (v int64) *int64 { return &v }(%#v)\n", *this.SubmarineSaw)
		}
		if this.SmileLetter != nil {
			fmt.Fprintf(buf, "this.SmileLetter = func (v bool) *bool { return &v }(%#v)\n", *this.SmileLetter)
		}
		if this.IconHope != nil {
			fmt.Fprintf(buf, "this.IconHope = %s\n", deriveGoString_24(this.IconHope))
		}
		if this.VanPurse != nil {
			fmt.Fprintf(buf, "this.VanPurse = %s\n", deriveGoString_25(this.VanPurse))
		}
		if this.MenuPaperclip != nil {
			fmt.Fprintf(buf, "this.MenuPaperclip = %#v\n", this.MenuPaperclip)
		}
		if this.BeetlePoker != nil {
			fmt.Fprintf(buf, "this.BeetlePoker = %#v\n", this.BeetlePoker)
		}
		if this.WigPride != nil {
			fmt.Fprintf(buf, "this.WigPride = %#v\n", this.WigPride)
		}
		if this.DivorceFair != nil {
			fmt.Fprintf(buf, "this.DivorceFair = %s\n", deriveGoString_26(this.DivorceFair))
		}
		if this.FlightParachute != nil {
			fmt.Fprintf(buf, "this.FlightParachute = %#v\n", this.FlightParachute)
		}
		if this.BeerRace != nil {
			fmt.Fprintf(buf, "this.BeerRace = %#v\n", this.BeerRace)
		}
		if this.LoftQuarry != nil {
			fmt.Fprintf(buf, "this.LoftQuarry = %s\n", deriveGoString_5(this.LoftQuarry))
		}
		if this.TaxiDivorce != nil {
			fmt.Fprintf(buf, "this.TaxiDivorce = %s\n", deriveGoString_5(this.TaxiDivorce))
		}
		if this.ElectionButter != nil {
			fmt.Fprintf(buf, "this.ElectionButter = %#v\n", this.ElectionButter)
		}
		if this.BriefcaseBaboon != nil {
			fmt.Fprintf(buf, "this.BriefcaseBaboon = %s\n", deriveGoString_5(this.BriefcaseBaboon))
		}
		if this.MapShark != nil {
			fmt.Fprintf(buf, "this.MapShark = func (v string) *string { return &v }(%#v)\n", *this.MapShark)
		}
		if this.NetInterlude != nil {
			fmt.Fprintf(buf, "this.NetInterlude = func (v bool) *bool { return &v }(%#v)\n", *this.NetInterlude)
		}
		fmt.Fprintf(buf, "this.XXX_NoUnkeyedLiteral = %s\n", deriveGoString(this.XXX_NoUnkeyedLiteral))
		if this.XXX_unrecognized != nil {
			fmt.Fprintf(buf, "this.XXX_unrecognized = %#v\n", this.XXX_unrecognized)
		}
		fmt.Fprintf(buf, "this.XXX_sizecache = %#v\n", this.XXX_sizecache)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString returns a recursive representation of this as a valid go string.
func deriveGoString(this struct{}) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() struct{} {\n")
	fmt.Fprintf(buf, "this := &struct{}{}\n")
	fmt.Fprintf(buf, "return *this\n")
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_ returns a recursive representation of this as a valid go string.
func deriveGoString_(this []*BightKnot) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*main.BightKnot {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*main.BightKnot, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringBightKnot(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_1 returns a recursive representation of this as a valid go string.
func deriveGoString_1(this []*Address) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*main.Address {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*main.Address, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringAddress(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_2 returns a recursive representation of this as a valid go string.
func deriveGoString_2(this *MicrobeMiser) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.MicrobeMiser {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.MicrobeMiser)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_3 returns a recursive representation of this as a valid go string.
func deriveGoString_3(this *CancerUserExperience) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.CancerUserExperience {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.CancerUserExperience)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_4 returns a recursive representation of this as a valid go string.
func deriveGoString_4(this *RadarBox) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.RadarBox {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.RadarBox)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_5 returns a recursive representation of this as a valid go string.
func deriveGoString_5(this [][]byte) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() [][]byte {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([][]byte, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_27(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_6 returns a recursive representation of this as a valid go string.
func deriveGoString_6(this []AccountantPowder) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []main.AccountantPowder {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]main.AccountantPowder, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_A(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_7 returns a recursive representation of this as a valid go string.
func deriveGoString_7(this []PlasticBagCertificate) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []main.PlasticBagCertificate {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]main.PlasticBagCertificate, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_P(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_8 returns a recursive representation of this as a valid go string.
func deriveGoString_8(this []WineMicroscope) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []main.WineMicroscope {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]main.WineMicroscope, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_W(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_9 returns a recursive representation of this as a valid go string.
func deriveGoString_9(this []AltarPlastic) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []main.AltarPlastic {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]main.AltarPlastic, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_Al(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_10 returns a recursive representation of this as a valid go string.
func deriveGoString_10(this []ArchBubble) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []main.ArchBubble {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]main.ArchBubble, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_Ar(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_11 returns a recursive representation of this as a valid go string.
func deriveGoString_11(this []EnzymeLift) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []main.EnzymeLift {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]main.EnzymeLift, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoString_E(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_12 returns a recursive representation of this as a valid go string.
func deriveGoString_12(this []*SrcTree) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*main.SrcTree {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*main.SrcTree, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringSrcTree(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_13 returns a recursive representation of this as a valid go string.
func deriveGoString_13(this []*Tree) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*main.Tree {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*main.Tree, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringTree(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_14 returns a recursive representation of this as a valid go string.
func deriveGoString_14(this *TreeGrowthCategory) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.TreeGrowthCategory {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.TreeGrowthCategory)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_15 returns a recursive representation of this as a valid go string.
func deriveGoString_15(this *GeneralAppearance) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.GeneralAppearance {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.GeneralAppearance)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_16 returns a recursive representation of this as a valid go string.
func deriveGoString_16(this *TrunkStemming) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.TrunkStemming {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.TrunkStemming)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_17 returns a recursive representation of this as a valid go string.
func deriveGoString_17(this *Ground) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Ground {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.Ground)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_18 returns a recursive representation of this as a valid go string.
func deriveGoString_18(this *Lean) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.Lean {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.Lean)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_19 returns a recursive representation of this as a valid go string.
func deriveGoString_19(this *DeadBranches) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.DeadBranches {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.DeadBranches)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_20 returns a recursive representation of this as a valid go string.
func deriveGoString_20(this *StormDamage) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.StormDamage {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.StormDamage)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_21 returns a recursive representation of this as a valid go string.
func deriveGoString_21(this *PastManagement) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.PastManagement {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.PastManagement)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_22 returns a recursive representation of this as a valid go string.
func deriveGoString_22(this *NotSureBool) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.NotSureBool {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.NotSureBool)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_23 returns a recursive representation of this as a valid go string.
func deriveGoString_23(this []*Photo) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []*main.Photo {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := make([]*main.Photo, %d)\n", len(this))
		for i := range this {
			fmt.Fprintf(buf, "this[%d] = %s\n", i, deriveGoStringPhoto(this[i]))
		}
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_24 returns a recursive representation of this as a valid go string.
func deriveGoString_24(this *BullySunrise) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.BullySunrise {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.BullySunrise)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_25 returns a recursive representation of this as a valid go string.
func deriveGoString_25(this *HopeArch) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.HopeArch {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.HopeArch)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_26 returns a recursive representation of this as a valid go string.
func deriveGoString_26(this *DivorceFair) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() *main.DivorceFair {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "this := new(main.DivorceFair)\n")
		fmt.Fprintf(buf, "*this = %#v\n", *this)
		fmt.Fprintf(buf, "return this\n")
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_27 returns a recursive representation of this as a valid go string.
func deriveGoString_27(this []byte) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() []byte {\n")
	if this == nil {
		fmt.Fprintf(buf, "return nil\n")
	} else {
		fmt.Fprintf(buf, "return %#v\n", this)
	}
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_A returns a recursive representation of this as a valid go string.
func deriveGoString_A(this AccountantPowder) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() main.AccountantPowder {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_P returns a recursive representation of this as a valid go string.
func deriveGoString_P(this PlasticBagCertificate) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() main.PlasticBagCertificate {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_W returns a recursive representation of this as a valid go string.
func deriveGoString_W(this WineMicroscope) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() main.WineMicroscope {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_Al returns a recursive representation of this as a valid go string.
func deriveGoString_Al(this AltarPlastic) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() main.AltarPlastic {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_Ar returns a recursive representation of this as a valid go string.
func deriveGoString_Ar(this ArchBubble) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() main.ArchBubble {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}

// deriveGoString_E returns a recursive representation of this as a valid go string.
func deriveGoString_E(this EnzymeLift) string {
	buf := bytes.NewBuffer(nil)
	fmt.Fprintf(buf, "func() main.EnzymeLift {\n")
	fmt.Fprintf(buf, "return %#v\n", this)
	fmt.Fprintf(buf, "}()\n")
	return buf.String()
}
