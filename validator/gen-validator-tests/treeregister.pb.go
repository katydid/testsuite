//Created using information from http://www.treeregister.org/measuringform.php

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: treeregister.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TreeGrowthCategory int32

const (
	TreeGrowthCategory_A TreeGrowthCategory = 1
	TreeGrowthCategory_B TreeGrowthCategory = 2
	TreeGrowthCategory_C TreeGrowthCategory = 3
)

// Enum value maps for TreeGrowthCategory.
var (
	TreeGrowthCategory_name = map[int32]string{
		1: "A",
		2: "B",
		3: "C",
	}
	TreeGrowthCategory_value = map[string]int32{
		"A": 1,
		"B": 2,
		"C": 3,
	}
)

func (x TreeGrowthCategory) Enum() *TreeGrowthCategory {
	p := new(TreeGrowthCategory)
	*p = x
	return p
}

func (x TreeGrowthCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreeGrowthCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[0].Descriptor()
}

func (TreeGrowthCategory) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[0]
}

func (x TreeGrowthCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TreeGrowthCategory) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TreeGrowthCategory(num)
	return nil
}

// Deprecated: Use TreeGrowthCategory.Descriptor instead.
func (TreeGrowthCategory) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{0}
}

type GeneralAppearance int32

const (
	GeneralAppearance_Excellent                 GeneralAppearance = 1
	GeneralAppearance_Good                      GeneralAppearance = 2
	GeneralAppearance_Fair                      GeneralAppearance = 3
	GeneralAppearance_Poor                      GeneralAppearance = 4
	GeneralAppearance_DyingOrDead               GeneralAppearance = 5
	GeneralAppearance_GeneralAppearance_NotSure GeneralAppearance = 6
)

// Enum value maps for GeneralAppearance.
var (
	GeneralAppearance_name = map[int32]string{
		1: "Excellent",
		2: "Good",
		3: "Fair",
		4: "Poor",
		5: "DyingOrDead",
		6: "GeneralAppearance_NotSure",
	}
	GeneralAppearance_value = map[string]int32{
		"Excellent":                 1,
		"Good":                      2,
		"Fair":                      3,
		"Poor":                      4,
		"DyingOrDead":               5,
		"GeneralAppearance_NotSure": 6,
	}
)

func (x GeneralAppearance) Enum() *GeneralAppearance {
	p := new(GeneralAppearance)
	*p = x
	return p
}

func (x GeneralAppearance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneralAppearance) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[1].Descriptor()
}

func (GeneralAppearance) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[1]
}

func (x GeneralAppearance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GeneralAppearance) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GeneralAppearance(num)
	return nil
}

// Deprecated: Use GeneralAppearance.Descriptor instead.
func (GeneralAppearance) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{1}
}

type TrunkStemming int32

const (
	TrunkStemming_GoodSingleStem        TrunkStemming = 1
	TrunkStemming_MultipleStemmed       TrunkStemming = 2
	TrunkStemming_TwinStemmed           TrunkStemming = 3
	TrunkStemming_TrunkStemming_NotSure TrunkStemming = 4
)

// Enum value maps for TrunkStemming.
var (
	TrunkStemming_name = map[int32]string{
		1: "GoodSingleStem",
		2: "MultipleStemmed",
		3: "TwinStemmed",
		4: "TrunkStemming_NotSure",
	}
	TrunkStemming_value = map[string]int32{
		"GoodSingleStem":        1,
		"MultipleStemmed":       2,
		"TwinStemmed":           3,
		"TrunkStemming_NotSure": 4,
	}
)

func (x TrunkStemming) Enum() *TrunkStemming {
	p := new(TrunkStemming)
	*p = x
	return p
}

func (x TrunkStemming) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrunkStemming) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[2].Descriptor()
}

func (TrunkStemming) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[2]
}

func (x TrunkStemming) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TrunkStemming) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TrunkStemming(num)
	return nil
}

// Deprecated: Use TrunkStemming.Descriptor instead.
func (TrunkStemming) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{2}
}

type Ground int32

const (
	Ground_Level       Ground = 1
	Ground_SlightSlope Ground = 2
	Ground_SteepSlope  Ground = 3
)

// Enum value maps for Ground.
var (
	Ground_name = map[int32]string{
		1: "Level",
		2: "SlightSlope",
		3: "SteepSlope",
	}
	Ground_value = map[string]int32{
		"Level":       1,
		"SlightSlope": 2,
		"SteepSlope":  3,
	}
)

func (x Ground) Enum() *Ground {
	p := new(Ground)
	*p = x
	return p
}

func (x Ground) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ground) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[3].Descriptor()
}

func (Ground) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[3]
}

func (x Ground) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ground) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ground(num)
	return nil
}

// Deprecated: Use Ground.Descriptor instead.
func (Ground) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{3}
}

type Lean int32

const (
	Lean_Lean_No               Lean = 1
	Lean_SlightlyWindswept     Lean = 2
	Lean_SixtyDegreesOrLess    Lean = 3
	Lean_HorizontalOrCollapsed Lean = 4
)

// Enum value maps for Lean.
var (
	Lean_name = map[int32]string{
		1: "Lean_No",
		2: "SlightlyWindswept",
		3: "SixtyDegreesOrLess",
		4: "HorizontalOrCollapsed",
	}
	Lean_value = map[string]int32{
		"Lean_No":               1,
		"SlightlyWindswept":     2,
		"SixtyDegreesOrLess":    3,
		"HorizontalOrCollapsed": 4,
	}
)

func (x Lean) Enum() *Lean {
	p := new(Lean)
	*p = x
	return p
}

func (x Lean) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Lean) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[4].Descriptor()
}

func (Lean) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[4]
}

func (x Lean) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Lean) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Lean(num)
	return nil
}

// Deprecated: Use Lean.Descriptor instead.
func (Lean) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{4}
}

type DeadBranches int32

const (
	DeadBranches_NoneOrVeryLittle          DeadBranches = 1
	DeadBranches_Some                      DeadBranches = 2
	DeadBranches_LotsAndOrExtensiveDieBack DeadBranches = 3
	DeadBranches_DeadBranches_NotSure      DeadBranches = 4
)

// Enum value maps for DeadBranches.
var (
	DeadBranches_name = map[int32]string{
		1: "NoneOrVeryLittle",
		2: "Some",
		3: "LotsAndOrExtensiveDieBack",
		4: "DeadBranches_NotSure",
	}
	DeadBranches_value = map[string]int32{
		"NoneOrVeryLittle":          1,
		"Some":                      2,
		"LotsAndOrExtensiveDieBack": 3,
		"DeadBranches_NotSure":      4,
	}
)

func (x DeadBranches) Enum() *DeadBranches {
	p := new(DeadBranches)
	*p = x
	return p
}

func (x DeadBranches) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeadBranches) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[5].Descriptor()
}

func (DeadBranches) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[5]
}

func (x DeadBranches) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeadBranches) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeadBranches(num)
	return nil
}

// Deprecated: Use DeadBranches.Descriptor instead.
func (DeadBranches) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{5}
}

type StormDamage int32

const (
	StormDamage_NoObviousDamage     StormDamage = 1
	StormDamage_SomeDamage          StormDamage = 2
	StormDamage_LossOfLargeLimbs    StormDamage = 3
	StormDamage_StormDamage_NotSure StormDamage = 4
)

// Enum value maps for StormDamage.
var (
	StormDamage_name = map[int32]string{
		1: "NoObviousDamage",
		2: "SomeDamage",
		3: "LossOfLargeLimbs",
		4: "StormDamage_NotSure",
	}
	StormDamage_value = map[string]int32{
		"NoObviousDamage":     1,
		"SomeDamage":          2,
		"LossOfLargeLimbs":    3,
		"StormDamage_NotSure": 4,
	}
)

func (x StormDamage) Enum() *StormDamage {
	p := new(StormDamage)
	*p = x
	return p
}

func (x StormDamage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StormDamage) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[6].Descriptor()
}

func (StormDamage) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[6]
}

func (x StormDamage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *StormDamage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = StormDamage(num)
	return nil
}

// Deprecated: Use StormDamage.Descriptor instead.
func (StormDamage) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{6}
}

type PastManagement int32

const (
	PastManagement_NothingObvious          PastManagement = 1
	PastManagement_SomePruning             PastManagement = 2
	PastManagement_LoppedOrReducedInHeight PastManagement = 3
	PastManagement_OldPollard              PastManagement = 4
	PastManagement_RecentPollard           PastManagement = 5
	PastManagement_CoppiceStool            PastManagement = 6
	PastManagement_CableBraced             PastManagement = 7
	PastManagement_PastManagement_NotSure  PastManagement = 8
)

// Enum value maps for PastManagement.
var (
	PastManagement_name = map[int32]string{
		1: "NothingObvious",
		2: "SomePruning",
		3: "LoppedOrReducedInHeight",
		4: "OldPollard",
		5: "RecentPollard",
		6: "CoppiceStool",
		7: "CableBraced",
		8: "PastManagement_NotSure",
	}
	PastManagement_value = map[string]int32{
		"NothingObvious":          1,
		"SomePruning":             2,
		"LoppedOrReducedInHeight": 3,
		"OldPollard":              4,
		"RecentPollard":           5,
		"CoppiceStool":            6,
		"CableBraced":             7,
		"PastManagement_NotSure":  8,
	}
)

func (x PastManagement) Enum() *PastManagement {
	p := new(PastManagement)
	*p = x
	return p
}

func (x PastManagement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PastManagement) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[7].Descriptor()
}

func (PastManagement) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[7]
}

func (x PastManagement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PastManagement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PastManagement(num)
	return nil
}

// Deprecated: Use PastManagement.Descriptor instead.
func (PastManagement) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{7}
}

type NotSureBool int32

const (
	NotSureBool_NotSure NotSureBool = 1
	NotSureBool_Yes     NotSureBool = 2
	NotSureBool_No      NotSureBool = 3
)

// Enum value maps for NotSureBool.
var (
	NotSureBool_name = map[int32]string{
		1: "NotSure",
		2: "Yes",
		3: "No",
	}
	NotSureBool_value = map[string]int32{
		"NotSure": 1,
		"Yes":     2,
		"No":      3,
	}
)

func (x NotSureBool) Enum() *NotSureBool {
	p := new(NotSureBool)
	*p = x
	return p
}

func (x NotSureBool) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotSureBool) Descriptor() protoreflect.EnumDescriptor {
	return file_treeregister_proto_enumTypes[8].Descriptor()
}

func (NotSureBool) Type() protoreflect.EnumType {
	return &file_treeregister_proto_enumTypes[8]
}

func (x NotSureBool) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NotSureBool) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NotSureBool(num)
	return nil
}

// Deprecated: Use NotSureBool.Descriptor instead.
func (NotSureBool) EnumDescriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{8}
}

type TreeRegister struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trees         []*Tree                `protobuf:"bytes,1,rep,name=Trees" json:"Trees,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TreeRegister) Reset() {
	*x = TreeRegister{}
	mi := &file_treeregister_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TreeRegister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeRegister) ProtoMessage() {}

func (x *TreeRegister) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeRegister.ProtoReflect.Descriptor instead.
func (*TreeRegister) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{0}
}

func (x *TreeRegister) GetTrees() []*Tree {
	if x != nil {
		return x.Trees
	}
	return nil
}

type Tree struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	GeneralInformation    *GeneralInformation    `protobuf:"bytes,1,opt,name=GeneralInformation" json:"GeneralInformation,omitempty"`
	OtherInformation      *OtherInformation      `protobuf:"bytes,2,opt,name=OtherInformation" json:"OtherInformation,omitempty"`
	Measurements          *Measurements          `protobuf:"bytes,3,opt,name=Measurements" json:"Measurements,omitempty"`
	Condition             *Condition             `protobuf:"bytes,4,opt,name=Condition" json:"Condition,omitempty"`
	AdditionalInformation *AdditionalInformation `protobuf:"bytes,5,opt,name=AdditionalInformation" json:"AdditionalInformation,omitempty"`
	Sender                *Sender                `protobuf:"bytes,6,opt,name=Sender" json:"Sender,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Tree) Reset() {
	*x = Tree{}
	mi := &file_treeregister_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{1}
}

func (x *Tree) GetGeneralInformation() *GeneralInformation {
	if x != nil {
		return x.GeneralInformation
	}
	return nil
}

func (x *Tree) GetOtherInformation() *OtherInformation {
	if x != nil {
		return x.OtherInformation
	}
	return nil
}

func (x *Tree) GetMeasurements() *Measurements {
	if x != nil {
		return x.Measurements
	}
	return nil
}

func (x *Tree) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Tree) GetAdditionalInformation() *AdditionalInformation {
	if x != nil {
		return x.AdditionalInformation
	}
	return nil
}

func (x *Tree) GetSender() *Sender {
	if x != nil {
		return x.Sender
	}
	return nil
}

type GeneralInformation struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TypeOfTree      *string                `protobuf:"bytes,1,opt,name=TypeOfTree" json:"TypeOfTree,omitempty"`
	Ownership       *string                `protobuf:"bytes,2,opt,name=Ownership" json:"Ownership,omitempty"`
	CountryState    *string                `protobuf:"bytes,3,opt,name=CountryState" json:"CountryState,omitempty"`
	PostCodeZipCode *string                `protobuf:"bytes,4,opt,name=PostCodeZipCode" json:"PostCodeZipCode,omitempty"`
	Location        *string                `protobuf:"bytes,5,opt,name=Location" json:"Location,omitempty"`
	FullAddress     *string                `protobuf:"bytes,6,opt,name=FullAddress" json:"FullAddress,omitempty"`
	Country         *string                `protobuf:"bytes,7,opt,name=Country" json:"Country,omitempty"`
	GridReference   *string                `protobuf:"bytes,8,opt,name=GridReference" json:"GridReference,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GeneralInformation) Reset() {
	*x = GeneralInformation{}
	mi := &file_treeregister_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneralInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralInformation) ProtoMessage() {}

func (x *GeneralInformation) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralInformation.ProtoReflect.Descriptor instead.
func (*GeneralInformation) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralInformation) GetTypeOfTree() string {
	if x != nil && x.TypeOfTree != nil {
		return *x.TypeOfTree
	}
	return ""
}

func (x *GeneralInformation) GetOwnership() string {
	if x != nil && x.Ownership != nil {
		return *x.Ownership
	}
	return ""
}

func (x *GeneralInformation) GetCountryState() string {
	if x != nil && x.CountryState != nil {
		return *x.CountryState
	}
	return ""
}

func (x *GeneralInformation) GetPostCodeZipCode() string {
	if x != nil && x.PostCodeZipCode != nil {
		return *x.PostCodeZipCode
	}
	return ""
}

func (x *GeneralInformation) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *GeneralInformation) GetFullAddress() string {
	if x != nil && x.FullAddress != nil {
		return *x.FullAddress
	}
	return ""
}

func (x *GeneralInformation) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *GeneralInformation) GetGridReference() string {
	if x != nil && x.GridReference != nil {
		return *x.GridReference
	}
	return ""
}

type OtherInformation struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PlantingDate     *string                `protobuf:"bytes,1,opt,name=PlantingDate" json:"PlantingDate,omitempty"`
	SeedCollectionNo *string                `protobuf:"bytes,2,opt,name=SeedCollectionNo" json:"SeedCollectionNo,omitempty"`
	PlantedBy        *string                `protobuf:"bytes,3,opt,name=PlantedBy" json:"PlantedBy,omitempty"`
	SeedCollector    *string                `protobuf:"bytes,4,opt,name=SeedCollector" json:"SeedCollector,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *OtherInformation) Reset() {
	*x = OtherInformation{}
	mi := &file_treeregister_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OtherInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherInformation) ProtoMessage() {}

func (x *OtherInformation) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherInformation.ProtoReflect.Descriptor instead.
func (*OtherInformation) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{3}
}

func (x *OtherInformation) GetPlantingDate() string {
	if x != nil && x.PlantingDate != nil {
		return *x.PlantingDate
	}
	return ""
}

func (x *OtherInformation) GetSeedCollectionNo() string {
	if x != nil && x.SeedCollectionNo != nil {
		return *x.SeedCollectionNo
	}
	return ""
}

func (x *OtherInformation) GetPlantedBy() string {
	if x != nil && x.PlantedBy != nil {
		return *x.PlantedBy
	}
	return ""
}

func (x *OtherInformation) GetSeedCollector() string {
	if x != nil && x.SeedCollector != nil {
		return *x.SeedCollector
	}
	return ""
}

type Measurements struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	HeightMeasurement        *HeightMeasurement     `protobuf:"bytes,1,opt,name=HeightMeasurement" json:"HeightMeasurement,omitempty"`
	WasHeightEstimated       *bool                  `protobuf:"varint,2,opt,name=WasHeightEstimated" json:"WasHeightEstimated,omitempty"`
	Girth                    *Measurement           `protobuf:"bytes,3,opt,name=Girth" json:"Girth,omitempty"`
	HeightOfGirthMeasurement *Measurement           `protobuf:"bytes,4,opt,name=HeightOfGirthMeasurement" json:"HeightOfGirthMeasurement,omitempty"`
	GirthExaggerated         *bool                  `protobuf:"varint,5,opt,name=GirthExaggerated" json:"GirthExaggerated,omitempty"`
	TreeGrowthCategory       *TreeGrowthCategory    `protobuf:"varint,6,opt,name=TreeGrowthCategory,enum=main.TreeGrowthCategory" json:"TreeGrowthCategory,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *Measurements) Reset() {
	*x = Measurements{}
	mi := &file_treeregister_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Measurements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Measurements) ProtoMessage() {}

func (x *Measurements) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Measurements.ProtoReflect.Descriptor instead.
func (*Measurements) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{4}
}

func (x *Measurements) GetHeightMeasurement() *HeightMeasurement {
	if x != nil {
		return x.HeightMeasurement
	}
	return nil
}

func (x *Measurements) GetWasHeightEstimated() bool {
	if x != nil && x.WasHeightEstimated != nil {
		return *x.WasHeightEstimated
	}
	return false
}

func (x *Measurements) GetGirth() *Measurement {
	if x != nil {
		return x.Girth
	}
	return nil
}

func (x *Measurements) GetHeightOfGirthMeasurement() *Measurement {
	if x != nil {
		return x.HeightOfGirthMeasurement
	}
	return nil
}

func (x *Measurements) GetGirthExaggerated() bool {
	if x != nil && x.GirthExaggerated != nil {
		return *x.GirthExaggerated
	}
	return false
}

func (x *Measurements) GetTreeGrowthCategory() TreeGrowthCategory {
	if x != nil && x.TreeGrowthCategory != nil {
		return *x.TreeGrowthCategory
	}
	return TreeGrowthCategory_A
}

type HeightMeasurement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metres        *float64               `protobuf:"fixed64,1,opt,name=Metres" json:"Metres,omitempty"`
	Feet          *float64               `protobuf:"fixed64,2,opt,name=Feet" json:"Feet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeightMeasurement) Reset() {
	*x = HeightMeasurement{}
	mi := &file_treeregister_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeightMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeightMeasurement) ProtoMessage() {}

func (x *HeightMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeightMeasurement.ProtoReflect.Descriptor instead.
func (*HeightMeasurement) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{5}
}

func (x *HeightMeasurement) GetMetres() float64 {
	if x != nil && x.Metres != nil {
		return *x.Metres
	}
	return 0
}

func (x *HeightMeasurement) GetFeet() float64 {
	if x != nil && x.Feet != nil {
		return *x.Feet
	}
	return 0
}

type Measurement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metres        *float64               `protobuf:"fixed64,1,opt,name=Metres" json:"Metres,omitempty"`
	Feet          *int64                 `protobuf:"varint,2,opt,name=Feet" json:"Feet,omitempty"`
	Inches        *int64                 `protobuf:"varint,3,opt,name=Inches" json:"Inches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Measurement) Reset() {
	*x = Measurement{}
	mi := &file_treeregister_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Measurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Measurement) ProtoMessage() {}

func (x *Measurement) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Measurement.ProtoReflect.Descriptor instead.
func (*Measurement) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{6}
}

func (x *Measurement) GetMetres() float64 {
	if x != nil && x.Metres != nil {
		return *x.Metres
	}
	return 0
}

func (x *Measurement) GetFeet() int64 {
	if x != nil && x.Feet != nil {
		return *x.Feet
	}
	return 0
}

func (x *Measurement) GetInches() int64 {
	if x != nil && x.Inches != nil {
		return *x.Inches
	}
	return 0
}

type Condition struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	GeneralAppearance                 *GeneralAppearance     `protobuf:"varint,1,opt,name=GeneralAppearance,enum=main.GeneralAppearance" json:"GeneralAppearance,omitempty"`
	TrunkStemming                     *TrunkStemming         `protobuf:"varint,2,opt,name=TrunkStemming,enum=main.TrunkStemming" json:"TrunkStemming,omitempty"`
	Ground                            *Ground                `protobuf:"varint,3,opt,name=Ground,enum=main.Ground" json:"Ground,omitempty"`
	Lead                              *Lean                  `protobuf:"varint,4,opt,name=Lead,enum=main.Lean" json:"Lead,omitempty"`
	DeadBranches                      *DeadBranches          `protobuf:"varint,5,opt,name=DeadBranches,enum=main.DeadBranches" json:"DeadBranches,omitempty"`
	StormDamage                       *StormDamage           `protobuf:"varint,6,opt,name=StormDamage,enum=main.StormDamage" json:"StormDamage,omitempty"`
	PastManagement                    *PastManagement        `protobuf:"varint,7,opt,name=PastManagement,enum=main.PastManagement" json:"PastManagement,omitempty"`
	LocalOrNationalHistoricalInterest *NotSureBool           `protobuf:"varint,8,opt,name=LocalOrNationalHistoricalInterest,enum=main.NotSureBool" json:"LocalOrNationalHistoricalInterest,omitempty"`
	LocalLandmark                     *NotSureBool           `protobuf:"varint,9,opt,name=LocalLandmark,enum=main.NotSureBool" json:"LocalLandmark,omitempty"`
	RemarkableOrUnusual               *bool                  `protobuf:"varint,10,opt,name=RemarkableOrUnusual" json:"RemarkableOrUnusual,omitempty"`
	Veteran                           *NotSureBool           `protobuf:"varint,11,opt,name=Veteran,enum=main.NotSureBool" json:"Veteran,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_treeregister_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{7}
}

func (x *Condition) GetGeneralAppearance() GeneralAppearance {
	if x != nil && x.GeneralAppearance != nil {
		return *x.GeneralAppearance
	}
	return GeneralAppearance_Excellent
}

func (x *Condition) GetTrunkStemming() TrunkStemming {
	if x != nil && x.TrunkStemming != nil {
		return *x.TrunkStemming
	}
	return TrunkStemming_GoodSingleStem
}

func (x *Condition) GetGround() Ground {
	if x != nil && x.Ground != nil {
		return *x.Ground
	}
	return Ground_Level
}

func (x *Condition) GetLead() Lean {
	if x != nil && x.Lead != nil {
		return *x.Lead
	}
	return Lean_Lean_No
}

func (x *Condition) GetDeadBranches() DeadBranches {
	if x != nil && x.DeadBranches != nil {
		return *x.DeadBranches
	}
	return DeadBranches_NoneOrVeryLittle
}

func (x *Condition) GetStormDamage() StormDamage {
	if x != nil && x.StormDamage != nil {
		return *x.StormDamage
	}
	return StormDamage_NoObviousDamage
}

func (x *Condition) GetPastManagement() PastManagement {
	if x != nil && x.PastManagement != nil {
		return *x.PastManagement
	}
	return PastManagement_NothingObvious
}

func (x *Condition) GetLocalOrNationalHistoricalInterest() NotSureBool {
	if x != nil && x.LocalOrNationalHistoricalInterest != nil {
		return *x.LocalOrNationalHistoricalInterest
	}
	return NotSureBool_NotSure
}

func (x *Condition) GetLocalLandmark() NotSureBool {
	if x != nil && x.LocalLandmark != nil {
		return *x.LocalLandmark
	}
	return NotSureBool_NotSure
}

func (x *Condition) GetRemarkableOrUnusual() bool {
	if x != nil && x.RemarkableOrUnusual != nil {
		return *x.RemarkableOrUnusual
	}
	return false
}

func (x *Condition) GetVeteran() NotSureBool {
	if x != nil && x.Veteran != nil {
		return *x.Veteran
	}
	return NotSureBool_NotSure
}

type AdditionalInformation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Comments      *string                `protobuf:"bytes,1,opt,name=Comments" json:"Comments,omitempty"`
	Other         *string                `protobuf:"bytes,2,opt,name=Other" json:"Other,omitempty"`
	Photos        []*Photo               `protobuf:"bytes,3,rep,name=Photos" json:"Photos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdditionalInformation) Reset() {
	*x = AdditionalInformation{}
	mi := &file_treeregister_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdditionalInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdditionalInformation) ProtoMessage() {}

func (x *AdditionalInformation) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdditionalInformation.ProtoReflect.Descriptor instead.
func (*AdditionalInformation) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{8}
}

func (x *AdditionalInformation) GetComments() string {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return ""
}

func (x *AdditionalInformation) GetOther() string {
	if x != nil && x.Other != nil {
		return *x.Other
	}
	return ""
}

func (x *AdditionalInformation) GetPhotos() []*Photo {
	if x != nil {
		return x.Photos
	}
	return nil
}

type Photo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      *string                `protobuf:"bytes,1,opt,name=Filename" json:"Filename,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=Data" json:"Data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Photo) Reset() {
	*x = Photo{}
	mi := &file_treeregister_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{9}
}

func (x *Photo) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *Photo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Sender struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Address       *string                `protobuf:"bytes,2,opt,name=Address" json:"Address,omitempty"`
	Email         *string                `protobuf:"bytes,3,opt,name=Email" json:"Email,omitempty"`
	Telephone     *string                `protobuf:"bytes,4,opt,name=Telephone" json:"Telephone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Sender) Reset() {
	*x = Sender{}
	mi := &file_treeregister_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Sender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sender) ProtoMessage() {}

func (x *Sender) ProtoReflect() protoreflect.Message {
	mi := &file_treeregister_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sender.ProtoReflect.Descriptor instead.
func (*Sender) Descriptor() ([]byte, []int) {
	return file_treeregister_proto_rawDescGZIP(), []int{10}
}

func (x *Sender) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Sender) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *Sender) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *Sender) GetTelephone() string {
	if x != nil && x.Telephone != nil {
		return *x.Telephone
	}
	return ""
}

var File_treeregister_proto protoreflect.FileDescriptor

var file_treeregister_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x72, 0x65, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x30, 0x0a, 0x0c, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x72,
	0x65, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x54, 0x72, 0x65, 0x65, 0x73, 0x22, 0xf4, 0x02, 0x0a,
	0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x10, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x15, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x06, 0x53, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x22, 0x9e, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x66, 0x54, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x5a,
	0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x53, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xf3, 0x02,
	0x0a, 0x0c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x45,
	0x0a, 0x11, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x11, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x61, 0x73, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x57, 0x61, 0x73, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x47, 0x69, 0x72, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x47, 0x69, 0x72, 0x74, 0x68, 0x12, 0x4d,
	0x0a, 0x18, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x47, 0x69, 0x72, 0x74, 0x68, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x18, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x66, 0x47, 0x69, 0x72,
	0x74, 0x68, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x47, 0x69, 0x72, 0x74, 0x68, 0x45, 0x78, 0x61, 0x67, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x47, 0x69, 0x72, 0x74, 0x68, 0x45, 0x78,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x54, 0x72, 0x65,
	0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x65,
	0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x12, 0x54, 0x72, 0x65, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x3f, 0x0a, 0x11, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x46, 0x65, 0x65, 0x74, 0x22, 0x51, 0x0a, 0x0b, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x46,
	0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x46, 0x65, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x49, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x22, 0xf7, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0d,
	0x54, 0x72, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x53, 0x74, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x53,
	0x74, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x04, 0x4c, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x4c, 0x65, 0x61, 0x6e, 0x52, 0x04, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x36, 0x0a,
	0x0c, 0x44, 0x65, 0x61, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x61, 0x64, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x0c, 0x44, 0x65, 0x61, 0x64, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x44, 0x61,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x53,
	0x74, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0e, 0x50, 0x61,
	0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x50, 0x61, 0x73, 0x74, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x21, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x4f, 0x72, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x53, 0x75,
	0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x21, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x4e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0d, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x72, 0x65, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x64, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x72, 0x55, 0x6e, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x55, 0x6e, 0x75,
	0x73, 0x75, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x56, 0x65, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x74,
	0x53, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x56, 0x65, 0x74, 0x65, 0x72, 0x61,
	0x6e, 0x22, 0x6e, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x06,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x73, 0x22, 0x37, 0x0a, 0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x6a, 0x0a, 0x06, 0x53, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x65, 0x6c,
	0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2a, 0x29, 0x0a, 0x12, 0x54, 0x72, 0x65, 0x65, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x05, 0x0a, 0x01,
	0x41, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10, 0x02, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10,
	0x03, 0x2a, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x78, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x6f, 0x6f, 0x64, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x6f,
	0x72, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x79, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x44, 0x65,
	0x61, 0x64, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x72,
	0x65, 0x10, 0x06, 0x2a, 0x64, 0x0a, 0x0d, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x65, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x53, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x65, 0x6d, 0x6d, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x77, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x6d, 0x6d, 0x65, 0x64, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x65, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x4e, 0x6f, 0x74, 0x53, 0x75, 0x72, 0x65, 0x10, 0x04, 0x2a, 0x34, 0x0a, 0x06, 0x47, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x6c, 0x6f, 0x70, 0x65, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x65, 0x65, 0x70, 0x53, 0x6c, 0x6f, 0x70, 0x65, 0x10, 0x03, 0x2a,
	0x5d, 0x0a, 0x04, 0x4c, 0x65, 0x61, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x65, 0x61, 0x6e, 0x5f,
	0x4e, 0x6f, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6c, 0x79,
	0x57, 0x69, 0x6e, 0x64, 0x73, 0x77, 0x65, 0x70, 0x74, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x69, 0x78, 0x74, 0x79, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x73, 0x4f, 0x72, 0x4c, 0x65, 0x73,
	0x73, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x67,
	0x0a, 0x0c, 0x44, 0x65, 0x61, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x6f, 0x6e, 0x65, 0x4f, 0x72, 0x56, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x74, 0x74,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x6f, 0x6d, 0x65, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x4c, 0x6f, 0x74, 0x73, 0x41, 0x6e, 0x64, 0x4f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x76, 0x65, 0x44, 0x69, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x44, 0x65, 0x61, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x4e, 0x6f,
	0x74, 0x53, 0x75, 0x72, 0x65, 0x10, 0x04, 0x2a, 0x61, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x6d,
	0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x4f, 0x62, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x6f, 0x6d, 0x65, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4c,
	0x6f, 0x73, 0x73, 0x4f, 0x66, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x62, 0x73, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x72, 0x65, 0x10, 0x04, 0x2a, 0xb4, 0x01, 0x0a, 0x0e, 0x50,
	0x61, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6f, 0x6d, 0x65, 0x50, 0x72, 0x75, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x72, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x64, 0x49, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x6c, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x64, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x64,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x70, 0x70, 0x69, 0x63, 0x65, 0x53, 0x74, 0x6f,
	0x6f, 0x6c, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x61,
	0x63, 0x65, 0x64, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x72, 0x65, 0x10,
	0x08, 0x2a, 0x2b, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x72, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x59, 0x65, 0x73, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x6f, 0x10, 0x03, 0x42, 0x41,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x74,
	0x79, 0x64, 0x69, 0x64, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x69,
	0x6e,
}

var (
	file_treeregister_proto_rawDescOnce sync.Once
	file_treeregister_proto_rawDescData = file_treeregister_proto_rawDesc
)

func file_treeregister_proto_rawDescGZIP() []byte {
	file_treeregister_proto_rawDescOnce.Do(func() {
		file_treeregister_proto_rawDescData = protoimpl.X.CompressGZIP(file_treeregister_proto_rawDescData)
	})
	return file_treeregister_proto_rawDescData
}

var file_treeregister_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_treeregister_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_treeregister_proto_goTypes = []any{
	(TreeGrowthCategory)(0),       // 0: main.TreeGrowthCategory
	(GeneralAppearance)(0),        // 1: main.GeneralAppearance
	(TrunkStemming)(0),            // 2: main.TrunkStemming
	(Ground)(0),                   // 3: main.Ground
	(Lean)(0),                     // 4: main.Lean
	(DeadBranches)(0),             // 5: main.DeadBranches
	(StormDamage)(0),              // 6: main.StormDamage
	(PastManagement)(0),           // 7: main.PastManagement
	(NotSureBool)(0),              // 8: main.NotSureBool
	(*TreeRegister)(nil),          // 9: main.TreeRegister
	(*Tree)(nil),                  // 10: main.Tree
	(*GeneralInformation)(nil),    // 11: main.GeneralInformation
	(*OtherInformation)(nil),      // 12: main.OtherInformation
	(*Measurements)(nil),          // 13: main.Measurements
	(*HeightMeasurement)(nil),     // 14: main.HeightMeasurement
	(*Measurement)(nil),           // 15: main.Measurement
	(*Condition)(nil),             // 16: main.Condition
	(*AdditionalInformation)(nil), // 17: main.AdditionalInformation
	(*Photo)(nil),                 // 18: main.Photo
	(*Sender)(nil),                // 19: main.Sender
}
var file_treeregister_proto_depIdxs = []int32{
	10, // 0: main.TreeRegister.Trees:type_name -> main.Tree
	11, // 1: main.Tree.GeneralInformation:type_name -> main.GeneralInformation
	12, // 2: main.Tree.OtherInformation:type_name -> main.OtherInformation
	13, // 3: main.Tree.Measurements:type_name -> main.Measurements
	16, // 4: main.Tree.Condition:type_name -> main.Condition
	17, // 5: main.Tree.AdditionalInformation:type_name -> main.AdditionalInformation
	19, // 6: main.Tree.Sender:type_name -> main.Sender
	14, // 7: main.Measurements.HeightMeasurement:type_name -> main.HeightMeasurement
	15, // 8: main.Measurements.Girth:type_name -> main.Measurement
	15, // 9: main.Measurements.HeightOfGirthMeasurement:type_name -> main.Measurement
	0,  // 10: main.Measurements.TreeGrowthCategory:type_name -> main.TreeGrowthCategory
	1,  // 11: main.Condition.GeneralAppearance:type_name -> main.GeneralAppearance
	2,  // 12: main.Condition.TrunkStemming:type_name -> main.TrunkStemming
	3,  // 13: main.Condition.Ground:type_name -> main.Ground
	4,  // 14: main.Condition.Lead:type_name -> main.Lean
	5,  // 15: main.Condition.DeadBranches:type_name -> main.DeadBranches
	6,  // 16: main.Condition.StormDamage:type_name -> main.StormDamage
	7,  // 17: main.Condition.PastManagement:type_name -> main.PastManagement
	8,  // 18: main.Condition.LocalOrNationalHistoricalInterest:type_name -> main.NotSureBool
	8,  // 19: main.Condition.LocalLandmark:type_name -> main.NotSureBool
	8,  // 20: main.Condition.Veteran:type_name -> main.NotSureBool
	18, // 21: main.AdditionalInformation.Photos:type_name -> main.Photo
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_treeregister_proto_init() }
func file_treeregister_proto_init() {
	if File_treeregister_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_treeregister_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_treeregister_proto_goTypes,
		DependencyIndexes: file_treeregister_proto_depIdxs,
		EnumInfos:         file_treeregister_proto_enumTypes,
		MessageInfos:      file_treeregister_proto_msgTypes,
	}.Build()
	File_treeregister_proto = out.File
	file_treeregister_proto_rawDesc = nil
	file_treeregister_proto_goTypes = nil
	file_treeregister_proto_depIdxs = nil
}
