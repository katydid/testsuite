//Thank you to http://creativitygames.net/random-word-generator/randomwords/2 for helping me to anonymise this data.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: typewriterprison.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DivorceFair int32

const (
	DivorceFair_Lawyer    DivorceFair = 4
	DivorceFair_OldMan    DivorceFair = 5
	DivorceFair_Help      DivorceFair = 6
	DivorceFair_Radar     DivorceFair = 9
	DivorceFair_Arm       DivorceFair = 10
	DivorceFair_Verse     DivorceFair = 11
	DivorceFair_Nuts      DivorceFair = 15
	DivorceFair_Briefcase DivorceFair = 21
	DivorceFair_Palace    DivorceFair = 22
)

// Enum value maps for DivorceFair.
var (
	DivorceFair_name = map[int32]string{
		4:  "Lawyer",
		5:  "OldMan",
		6:  "Help",
		9:  "Radar",
		10: "Arm",
		11: "Verse",
		15: "Nuts",
		21: "Briefcase",
		22: "Palace",
	}
	DivorceFair_value = map[string]int32{
		"Lawyer":    4,
		"OldMan":    5,
		"Help":      6,
		"Radar":     9,
		"Arm":       10,
		"Verse":     11,
		"Nuts":      15,
		"Briefcase": 21,
		"Palace":    22,
	}
)

func (x DivorceFair) Enum() *DivorceFair {
	p := new(DivorceFair)
	*p = x
	return p
}

func (x DivorceFair) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DivorceFair) Descriptor() protoreflect.EnumDescriptor {
	return file_typewriterprison_proto_enumTypes[0].Descriptor()
}

func (DivorceFair) Type() protoreflect.EnumType {
	return &file_typewriterprison_proto_enumTypes[0]
}

func (x DivorceFair) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DivorceFair) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DivorceFair(num)
	return nil
}

// Deprecated: Use DivorceFair.Descriptor instead.
func (DivorceFair) EnumDescriptor() ([]byte, []int) {
	return file_typewriterprison_proto_rawDescGZIP(), []int{0}
}

type HopeArch int32

const (
	HopeArch_Mind       HopeArch = 0
	HopeArch_Kennel     HopeArch = 1
	HopeArch_Corn       HopeArch = 2
	HopeArch_Silence    HopeArch = 3
	HopeArch_Lobster    HopeArch = 4
	HopeArch_Oven       HopeArch = 5
	HopeArch_Nose       HopeArch = 6
	HopeArch_Navel      HopeArch = 7
	HopeArch_Pill       HopeArch = 8
	HopeArch_Holly      HopeArch = 9
	HopeArch_Doctrine   HopeArch = 10
	HopeArch_Fork       HopeArch = 11
	HopeArch_Belt       HopeArch = 12
	HopeArch_Cult       HopeArch = 13
	HopeArch_Tusk       HopeArch = 14
	HopeArch_Chips      HopeArch = 15
	HopeArch_Tent       HopeArch = 16
	HopeArch_Coat       HopeArch = 17
	HopeArch_Court      HopeArch = 18
	HopeArch_Runaway    HopeArch = 19
	HopeArch_Mulberry   HopeArch = 20
	HopeArch_Politician HopeArch = 21
	HopeArch_Message    HopeArch = 22
	HopeArch_Teacher    HopeArch = 23
	HopeArch_Lift       HopeArch = 24
	HopeArch_Danger     HopeArch = 25
	HopeArch_Order      HopeArch = 26
	HopeArch_Title      HopeArch = 27
	HopeArch_Meatmarrow HopeArch = 28
	HopeArch_Hosepipe   HopeArch = 29
	HopeArch_Carpenter  HopeArch = 30
	HopeArch_Shop       HopeArch = 31
	HopeArch_Nile       HopeArch = 32
	HopeArch_Cloud      HopeArch = 33
	HopeArch_Mill       HopeArch = 34
	HopeArch_Wallet     HopeArch = 35
	HopeArch_Sugar      HopeArch = 36
	HopeArch_Crisis     HopeArch = 37
	HopeArch_Duty       HopeArch = 38
	HopeArch_Milkshake  HopeArch = 39
	HopeArch_Tap        HopeArch = 40
	HopeArch_Clay       HopeArch = 41
	HopeArch_Coronet    HopeArch = 42
	HopeArch_Breakfast  HopeArch = 43
	HopeArch_File       HopeArch = 44
	HopeArch_Bulldozer  HopeArch = 45
	HopeArch_Mattress   HopeArch = 46
	HopeArch_Minute     HopeArch = 47
	HopeArch_Chisel     HopeArch = 48
	HopeArch_Aspirin    HopeArch = 49
	HopeArch_Roulette   HopeArch = 50
	HopeArch_Ham        HopeArch = 51
	HopeArch_Bench      HopeArch = 52
	HopeArch_Miner      HopeArch = 53
)

// Enum value maps for HopeArch.
var (
	HopeArch_name = map[int32]string{
		0:  "Mind",
		1:  "Kennel",
		2:  "Corn",
		3:  "Silence",
		4:  "Lobster",
		5:  "Oven",
		6:  "Nose",
		7:  "Navel",
		8:  "Pill",
		9:  "Holly",
		10: "Doctrine",
		11: "Fork",
		12: "Belt",
		13: "Cult",
		14: "Tusk",
		15: "Chips",
		16: "Tent",
		17: "Coat",
		18: "Court",
		19: "Runaway",
		20: "Mulberry",
		21: "Politician",
		22: "Message",
		23: "Teacher",
		24: "Lift",
		25: "Danger",
		26: "Order",
		27: "Title",
		28: "Meatmarrow",
		29: "Hosepipe",
		30: "Carpenter",
		31: "Shop",
		32: "Nile",
		33: "Cloud",
		34: "Mill",
		35: "Wallet",
		36: "Sugar",
		37: "Crisis",
		38: "Duty",
		39: "Milkshake",
		40: "Tap",
		41: "Clay",
		42: "Coronet",
		43: "Breakfast",
		44: "File",
		45: "Bulldozer",
		46: "Mattress",
		47: "Minute",
		48: "Chisel",
		49: "Aspirin",
		50: "Roulette",
		51: "Ham",
		52: "Bench",
		53: "Miner",
	}
	HopeArch_value = map[string]int32{
		"Mind":       0,
		"Kennel":     1,
		"Corn":       2,
		"Silence":    3,
		"Lobster":    4,
		"Oven":       5,
		"Nose":       6,
		"Navel":      7,
		"Pill":       8,
		"Holly":      9,
		"Doctrine":   10,
		"Fork":       11,
		"Belt":       12,
		"Cult":       13,
		"Tusk":       14,
		"Chips":      15,
		"Tent":       16,
		"Coat":       17,
		"Court":      18,
		"Runaway":    19,
		"Mulberry":   20,
		"Politician": 21,
		"Message":    22,
		"Teacher":    23,
		"Lift":       24,
		"Danger":     25,
		"Order":      26,
		"Title":      27,
		"Meatmarrow": 28,
		"Hosepipe":   29,
		"Carpenter":  30,
		"Shop":       31,
		"Nile":       32,
		"Cloud":      33,
		"Mill":       34,
		"Wallet":     35,
		"Sugar":      36,
		"Crisis":     37,
		"Duty":       38,
		"Milkshake":  39,
		"Tap":        40,
		"Clay":       41,
		"Coronet":    42,
		"Breakfast":  43,
		"File":       44,
		"Bulldozer":  45,
		"Mattress":   46,
		"Minute":     47,
		"Chisel":     48,
		"Aspirin":    49,
		"Roulette":   50,
		"Ham":        51,
		"Bench":      52,
		"Miner":      53,
	}
)

func (x HopeArch) Enum() *HopeArch {
	p := new(HopeArch)
	*p = x
	return p
}

func (x HopeArch) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HopeArch) Descriptor() protoreflect.EnumDescriptor {
	return file_typewriterprison_proto_enumTypes[1].Descriptor()
}

func (HopeArch) Type() protoreflect.EnumType {
	return &file_typewriterprison_proto_enumTypes[1]
}

func (x HopeArch) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HopeArch) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HopeArch(num)
	return nil
}

// Deprecated: Use HopeArch.Descriptor instead.
func (HopeArch) EnumDescriptor() ([]byte, []int) {
	return file_typewriterprison_proto_rawDescGZIP(), []int{1}
}

type BullySunrise int32

const (
	BullySunrise_Sandals  BullySunrise = 0
	BullySunrise_Showcase BullySunrise = 1
	BullySunrise_Florist  BullySunrise = 2
	BullySunrise_Fridge   BullySunrise = 3
	BullySunrise_Tram     BullySunrise = 4
	BullySunrise_Porch    BullySunrise = 5
	BullySunrise_Skylight BullySunrise = 6
	BullySunrise_Joke     BullySunrise = 7
	BullySunrise_Leather  BullySunrise = 8
	BullySunrise_Crane    BullySunrise = 9
	BullySunrise_Tour     BullySunrise = 10
)

// Enum value maps for BullySunrise.
var (
	BullySunrise_name = map[int32]string{
		0:  "Sandals",
		1:  "Showcase",
		2:  "Florist",
		3:  "Fridge",
		4:  "Tram",
		5:  "Porch",
		6:  "Skylight",
		7:  "Joke",
		8:  "Leather",
		9:  "Crane",
		10: "Tour",
	}
	BullySunrise_value = map[string]int32{
		"Sandals":  0,
		"Showcase": 1,
		"Florist":  2,
		"Fridge":   3,
		"Tram":     4,
		"Porch":    5,
		"Skylight": 6,
		"Joke":     7,
		"Leather":  8,
		"Crane":    9,
		"Tour":     10,
	}
)

func (x BullySunrise) Enum() *BullySunrise {
	p := new(BullySunrise)
	*p = x
	return p
}

func (x BullySunrise) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BullySunrise) Descriptor() protoreflect.EnumDescriptor {
	return file_typewriterprison_proto_enumTypes[2].Descriptor()
}

func (BullySunrise) Type() protoreflect.EnumType {
	return &file_typewriterprison_proto_enumTypes[2]
}

func (x BullySunrise) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BullySunrise) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BullySunrise(num)
	return nil
}

// Deprecated: Use BullySunrise.Descriptor instead.
func (BullySunrise) EnumDescriptor() ([]byte, []int) {
	return file_typewriterprison_proto_rawDescGZIP(), []int{2}
}

type TypewriterPrison struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WineMessenger []byte                 `protobuf:"bytes,1,opt,name=WineMessenger" json:"WineMessenger,omitempty"`
	ShoelaceBeer  []byte                 `protobuf:"bytes,2,opt,name=ShoelaceBeer" json:"ShoelaceBeer,omitempty"`
	PocketRoses   *PocketRoses           `protobuf:"bytes,3,opt,name=PocketRoses" json:"PocketRoses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypewriterPrison) Reset() {
	*x = TypewriterPrison{}
	mi := &file_typewriterprison_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypewriterPrison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypewriterPrison) ProtoMessage() {}

func (x *TypewriterPrison) ProtoReflect() protoreflect.Message {
	mi := &file_typewriterprison_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypewriterPrison.ProtoReflect.Descriptor instead.
func (*TypewriterPrison) Descriptor() ([]byte, []int) {
	return file_typewriterprison_proto_rawDescGZIP(), []int{0}
}

func (x *TypewriterPrison) GetWineMessenger() []byte {
	if x != nil {
		return x.WineMessenger
	}
	return nil
}

func (x *TypewriterPrison) GetShoelaceBeer() []byte {
	if x != nil {
		return x.ShoelaceBeer
	}
	return nil
}

func (x *TypewriterPrison) GetPocketRoses() *PocketRoses {
	if x != nil {
		return x.PocketRoses
	}
	return nil
}

type PocketRoses struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ScarBusStop     *string                `protobuf:"bytes,1,opt,name=ScarBusStop" json:"ScarBusStop,omitempty"`
	BadgeShopping   *int64                 `protobuf:"varint,2,opt,name=BadgeShopping" json:"BadgeShopping,omitempty"`
	DaisySled       *int64                 `protobuf:"varint,3,opt,name=DaisySled" json:"DaisySled,omitempty"`
	SubmarineSaw    *int64                 `protobuf:"varint,4,opt,name=SubmarineSaw" json:"SubmarineSaw,omitempty"`
	SmileLetter     *bool                  `protobuf:"varint,5,opt,name=SmileLetter" json:"SmileLetter,omitempty"`
	IconHope        *BullySunrise          `protobuf:"varint,6,opt,name=IconHope,enum=main.BullySunrise" json:"IconHope,omitempty"`
	VanPurse        *HopeArch              `protobuf:"varint,7,opt,name=VanPurse,enum=main.HopeArch" json:"VanPurse,omitempty"`
	MenuPaperclip   []string               `protobuf:"bytes,8,rep,name=MenuPaperclip" json:"MenuPaperclip,omitempty"`
	BeetlePoker     []string               `protobuf:"bytes,9,rep,name=BeetlePoker" json:"BeetlePoker,omitempty"`
	WigPride        []string               `protobuf:"bytes,10,rep,name=WigPride" json:"WigPride,omitempty"`
	DivorceFair     *DivorceFair           `protobuf:"varint,11,opt,name=DivorceFair,enum=main.DivorceFair" json:"DivorceFair,omitempty"`
	FlightParachute []uint32               `protobuf:"fixed32,12,rep,name=FlightParachute" json:"FlightParachute,omitempty"`
	BeerRace        []uint32               `protobuf:"fixed32,13,rep,name=BeerRace" json:"BeerRace,omitempty"`
	LoftQuarry      [][]byte               `protobuf:"bytes,14,rep,name=LoftQuarry" json:"LoftQuarry,omitempty"`
	TaxiDivorce     [][]byte               `protobuf:"bytes,15,rep,name=TaxiDivorce" json:"TaxiDivorce,omitempty"`
	ElectionButter  []uint32               `protobuf:"fixed32,16,rep,name=ElectionButter" json:"ElectionButter,omitempty"`
	BriefcaseBaboon [][]byte               `protobuf:"bytes,17,rep,name=BriefcaseBaboon" json:"BriefcaseBaboon,omitempty"`
	MapShark        *string                `protobuf:"bytes,18,opt,name=MapShark" json:"MapShark,omitempty"`
	NetInterlude    *bool                  `protobuf:"varint,19,opt,name=NetInterlude" json:"NetInterlude,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PocketRoses) Reset() {
	*x = PocketRoses{}
	mi := &file_typewriterprison_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PocketRoses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PocketRoses) ProtoMessage() {}

func (x *PocketRoses) ProtoReflect() protoreflect.Message {
	mi := &file_typewriterprison_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PocketRoses.ProtoReflect.Descriptor instead.
func (*PocketRoses) Descriptor() ([]byte, []int) {
	return file_typewriterprison_proto_rawDescGZIP(), []int{1}
}

func (x *PocketRoses) GetScarBusStop() string {
	if x != nil && x.ScarBusStop != nil {
		return *x.ScarBusStop
	}
	return ""
}

func (x *PocketRoses) GetBadgeShopping() int64 {
	if x != nil && x.BadgeShopping != nil {
		return *x.BadgeShopping
	}
	return 0
}

func (x *PocketRoses) GetDaisySled() int64 {
	if x != nil && x.DaisySled != nil {
		return *x.DaisySled
	}
	return 0
}

func (x *PocketRoses) GetSubmarineSaw() int64 {
	if x != nil && x.SubmarineSaw != nil {
		return *x.SubmarineSaw
	}
	return 0
}

func (x *PocketRoses) GetSmileLetter() bool {
	if x != nil && x.SmileLetter != nil {
		return *x.SmileLetter
	}
	return false
}

func (x *PocketRoses) GetIconHope() BullySunrise {
	if x != nil && x.IconHope != nil {
		return *x.IconHope
	}
	return BullySunrise_Sandals
}

func (x *PocketRoses) GetVanPurse() HopeArch {
	if x != nil && x.VanPurse != nil {
		return *x.VanPurse
	}
	return HopeArch_Mind
}

func (x *PocketRoses) GetMenuPaperclip() []string {
	if x != nil {
		return x.MenuPaperclip
	}
	return nil
}

func (x *PocketRoses) GetBeetlePoker() []string {
	if x != nil {
		return x.BeetlePoker
	}
	return nil
}

func (x *PocketRoses) GetWigPride() []string {
	if x != nil {
		return x.WigPride
	}
	return nil
}

func (x *PocketRoses) GetDivorceFair() DivorceFair {
	if x != nil && x.DivorceFair != nil {
		return *x.DivorceFair
	}
	return DivorceFair_Lawyer
}

func (x *PocketRoses) GetFlightParachute() []uint32 {
	if x != nil {
		return x.FlightParachute
	}
	return nil
}

func (x *PocketRoses) GetBeerRace() []uint32 {
	if x != nil {
		return x.BeerRace
	}
	return nil
}

func (x *PocketRoses) GetLoftQuarry() [][]byte {
	if x != nil {
		return x.LoftQuarry
	}
	return nil
}

func (x *PocketRoses) GetTaxiDivorce() [][]byte {
	if x != nil {
		return x.TaxiDivorce
	}
	return nil
}

func (x *PocketRoses) GetElectionButter() []uint32 {
	if x != nil {
		return x.ElectionButter
	}
	return nil
}

func (x *PocketRoses) GetBriefcaseBaboon() [][]byte {
	if x != nil {
		return x.BriefcaseBaboon
	}
	return nil
}

func (x *PocketRoses) GetMapShark() string {
	if x != nil && x.MapShark != nil {
		return *x.MapShark
	}
	return ""
}

func (x *PocketRoses) GetNetInterlude() bool {
	if x != nil && x.NetInterlude != nil {
		return *x.NetInterlude
	}
	return false
}

var File_typewriterprison_proto protoreflect.FileDescriptor

var file_typewriterprison_proto_rawDesc = []byte{
	0x0a, 0x16, 0x74, 0x79, 0x70, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x91,
	0x01, 0x0a, 0x10, 0x54, 0x79, 0x70, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x65,
	0x6e, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x57, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x68, 0x6f,
	0x65, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x53, 0x68, 0x6f, 0x65, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x65, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x0b, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x6f, 0x73, 0x65, 0x73, 0x52, 0x0b, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x73,
	0x65, 0x73, 0x22, 0xc8, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x6f, 0x73,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x42, 0x75, 0x73, 0x53, 0x74, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x72, 0x42, 0x75, 0x73,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x64, 0x67, 0x65, 0x53, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x42, 0x61, 0x64,
	0x67, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x61,
	0x69, 0x73, 0x79, 0x53, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x44,
	0x61, 0x69, 0x73, 0x79, 0x53, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d,
	0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x53, 0x61, 0x77, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x6d, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x53, 0x6d, 0x69, 0x6c, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x48, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x42, 0x75, 0x6c, 0x6c, 0x79, 0x53, 0x75, 0x6e,
	0x72, 0x69, 0x73, 0x65, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x48, 0x6f, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x08, 0x56, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x48, 0x6f, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68,
	0x52, 0x08, 0x56, 0x61, 0x6e, 0x50, 0x75, 0x72, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65,
	0x6e, 0x75, 0x50, 0x61, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x4d, 0x65, 0x6e, 0x75, 0x50, 0x61, 0x70, 0x65, 0x72, 0x63, 0x6c, 0x69, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x65, 0x65, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65, 0x65, 0x74, 0x6c, 0x65, 0x50, 0x6f, 0x6b,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x67, 0x50, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x57, 0x69, 0x67, 0x50, 0x72, 0x69, 0x64, 0x65, 0x12, 0x33,
	0x0a, 0x0b, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x61, 0x69, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x76, 0x6f, 0x72,
	0x63, 0x65, 0x46, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x46,
	0x61, 0x69, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x63, 0x68, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0f, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x61, 0x72, 0x61, 0x63, 0x68, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x65, 0x65, 0x72, 0x52, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x07, 0x52,
	0x08, 0x42, 0x65, 0x65, 0x72, 0x52, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x66,
	0x74, 0x51, 0x75, 0x61, 0x72, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x4c,
	0x6f, 0x66, 0x74, 0x51, 0x75, 0x61, 0x72, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x78,
	0x69, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b,
	0x54, 0x61, 0x78, 0x69, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x07, 0x52, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x74,
	0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x65, 0x66, 0x63, 0x61, 0x73, 0x65,
	0x42, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x63, 0x61, 0x73, 0x65, 0x42, 0x61, 0x62, 0x6f, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x61, 0x70, 0x53, 0x68, 0x61, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4d, 0x61, 0x70, 0x53, 0x68, 0x61, 0x72, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x75, 0x64, 0x65, 0x2a, 0x73, 0x0a,
	0x0b, 0x44, 0x69, 0x76, 0x6f, 0x72, 0x63, 0x65, 0x46, 0x61, 0x69, 0x72, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x61, 0x77, 0x79, 0x65, 0x72, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x6c, 0x64, 0x4d,
	0x61, 0x6e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x65, 0x6c, 0x70, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x61, 0x64, 0x61, 0x72, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x72, 0x6d,
	0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x65, 0x72, 0x73, 0x65, 0x10, 0x0b, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x75, 0x74, 0x73, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x69, 0x65, 0x66,
	0x63, 0x61, 0x73, 0x65, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x6c, 0x61, 0x63, 0x65,
	0x10, 0x16, 0x2a, 0x83, 0x05, 0x0a, 0x08, 0x48, 0x6f, 0x70, 0x65, 0x41, 0x72, 0x63, 0x68, 0x12,
	0x08, 0x0a, 0x04, 0x4d, 0x69, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x65, 0x6e,
	0x6e, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x6e, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x4c, 0x6f, 0x62, 0x73, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x76, 0x65,
	0x6e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x73, 0x65, 0x10, 0x06, 0x12, 0x09, 0x0a,
	0x05, 0x4e, 0x61, 0x76, 0x65, 0x6c, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6c, 0x6c,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x6f, 0x6c, 0x6c, 0x79, 0x10, 0x09, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x6f, 0x63, 0x74, 0x72, 0x69, 0x6e, 0x65, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x6f, 0x72, 0x6b, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x65, 0x6c, 0x74, 0x10, 0x0c, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x75, 0x6c, 0x74, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x75, 0x73,
	0x6b, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x68, 0x69, 0x70, 0x73, 0x10, 0x0f, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x65, 0x6e, 0x74, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x6f, 0x61, 0x74,
	0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x72, 0x74, 0x10, 0x12, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x79, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x75,
	0x6c, 0x62, 0x65, 0x72, 0x72, 0x79, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69,
	0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x66, 0x74, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x10, 0x19, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x10, 0x1b, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x65, 0x61, 0x74, 0x6d, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x1c, 0x12, 0x0c,
	0x0a, 0x08, 0x48, 0x6f, 0x73, 0x65, 0x70, 0x69, 0x70, 0x65, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x61, 0x72, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x1e, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x68, 0x6f, 0x70, 0x10, 0x1f, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x69, 0x6c, 0x65, 0x10, 0x20, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x10, 0x21, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x69,
	0x6c, 0x6c, 0x10, 0x22, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x10, 0x23,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x75, 0x67, 0x61, 0x72, 0x10, 0x24, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x72, 0x69, 0x73, 0x69, 0x73, 0x10, 0x25, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x75, 0x74, 0x79, 0x10,
	0x26, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x69, 0x6c, 0x6b, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x10, 0x27,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x61, 0x70, 0x10, 0x28, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x6c, 0x61,
	0x79, 0x10, 0x29, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x72, 0x6f, 0x6e, 0x65, 0x74, 0x10, 0x2a,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x66, 0x61, 0x73, 0x74, 0x10, 0x2b, 0x12,
	0x08, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x2c, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x75, 0x6c,
	0x6c, 0x64, 0x6f, 0x7a, 0x65, 0x72, 0x10, 0x2d, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x74,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x2e, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x10, 0x2f, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x68, 0x69, 0x73, 0x65, 0x6c, 0x10, 0x30, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x73, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x10, 0x31, 0x12, 0x0c, 0x0a, 0x08, 0x52,
	0x6f, 0x75, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x10, 0x32, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x61, 0x6d,
	0x10, 0x33, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x10, 0x34, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x10, 0x35, 0x2a, 0x91, 0x01, 0x0a, 0x0c, 0x42, 0x75, 0x6c,
	0x6c, 0x79, 0x53, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x61, 0x6e,
	0x64, 0x61, 0x6c, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61,
	0x73, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x72, 0x69, 0x73, 0x74, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x72, 0x69, 0x64, 0x67, 0x65, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x72, 0x61, 0x6d, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f, 0x72, 0x63, 0x68,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x6b, 0x79, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x6f, 0x6b, 0x65, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x72, 0x61, 0x6e, 0x65,
	0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x6f, 0x75, 0x72, 0x10, 0x0a, 0x42, 0x41, 0x5a, 0x3f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x61, 0x74, 0x79, 0x64,
	0x69, 0x64, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x75, 0x69, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x6d, 0x61, 0x69, 0x6e,
}

var (
	file_typewriterprison_proto_rawDescOnce sync.Once
	file_typewriterprison_proto_rawDescData = file_typewriterprison_proto_rawDesc
)

func file_typewriterprison_proto_rawDescGZIP() []byte {
	file_typewriterprison_proto_rawDescOnce.Do(func() {
		file_typewriterprison_proto_rawDescData = protoimpl.X.CompressGZIP(file_typewriterprison_proto_rawDescData)
	})
	return file_typewriterprison_proto_rawDescData
}

var file_typewriterprison_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_typewriterprison_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_typewriterprison_proto_goTypes = []any{
	(DivorceFair)(0),         // 0: main.DivorceFair
	(HopeArch)(0),            // 1: main.HopeArch
	(BullySunrise)(0),        // 2: main.BullySunrise
	(*TypewriterPrison)(nil), // 3: main.TypewriterPrison
	(*PocketRoses)(nil),      // 4: main.PocketRoses
}
var file_typewriterprison_proto_depIdxs = []int32{
	4, // 0: main.TypewriterPrison.PocketRoses:type_name -> main.PocketRoses
	2, // 1: main.PocketRoses.IconHope:type_name -> main.BullySunrise
	1, // 2: main.PocketRoses.VanPurse:type_name -> main.HopeArch
	0, // 3: main.PocketRoses.DivorceFair:type_name -> main.DivorceFair
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_typewriterprison_proto_init() }
func file_typewriterprison_proto_init() {
	if File_typewriterprison_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_typewriterprison_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_typewriterprison_proto_goTypes,
		DependencyIndexes: file_typewriterprison_proto_depIdxs,
		EnumInfos:         file_typewriterprison_proto_enumTypes,
		MessageInfos:      file_typewriterprison_proto_msgTypes,
	}.Build()
	File_typewriterprison_proto = out.File
	file_typewriterprison_proto_rawDesc = nil
	file_typewriterprison_proto_goTypes = nil
	file_typewriterprison_proto_depIdxs = nil
}
