//  Copyright 2015 Walter Schulze
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: knot.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Knot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bight         []*BightKnot           `protobuf:"bytes,1,rep,name=Bight" json:"Bight,omitempty"`
	Elbow         *bool                  `protobuf:"varint,2,opt,name=Elbow" json:"Elbow,omitempty"`
	BitterEnd     *Knot                  `protobuf:"bytes,3,opt,name=BitterEnd" json:"BitterEnd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Knot) Reset() {
	*x = Knot{}
	mi := &file_knot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Knot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Knot) ProtoMessage() {}

func (x *Knot) ProtoReflect() protoreflect.Message {
	mi := &file_knot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Knot.ProtoReflect.Descriptor instead.
func (*Knot) Descriptor() ([]byte, []int) {
	return file_knot_proto_rawDescGZIP(), []int{0}
}

func (x *Knot) GetBight() []*BightKnot {
	if x != nil {
		return x.Bight
	}
	return nil
}

func (x *Knot) GetElbow() bool {
	if x != nil && x.Elbow != nil {
		return *x.Elbow
	}
	return false
}

func (x *Knot) GetBitterEnd() *Knot {
	if x != nil {
		return x.BitterEnd
	}
	return nil
}

type BightKnot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Loop          *Knot                  `protobuf:"bytes,1,opt,name=Loop" json:"Loop,omitempty"`
	Turn          *bool                  `protobuf:"varint,2,opt,name=Turn" json:"Turn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BightKnot) Reset() {
	*x = BightKnot{}
	mi := &file_knot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BightKnot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BightKnot) ProtoMessage() {}

func (x *BightKnot) ProtoReflect() protoreflect.Message {
	mi := &file_knot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BightKnot.ProtoReflect.Descriptor instead.
func (*BightKnot) Descriptor() ([]byte, []int) {
	return file_knot_proto_rawDescGZIP(), []int{1}
}

func (x *BightKnot) GetLoop() *Knot {
	if x != nil {
		return x.Loop
	}
	return nil
}

func (x *BightKnot) GetTurn() bool {
	if x != nil && x.Turn != nil {
		return *x.Turn
	}
	return false
}

var File_knot_proto protoreflect.FileDescriptor

var file_knot_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6b, 0x6e, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x61,
	0x69, 0x6e, 0x22, 0x6d, 0x0a, 0x04, 0x4b, 0x6e, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x42, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x42, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x6e, 0x6f, 0x74, 0x52, 0x05, 0x42, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6c, 0x62, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x45, 0x6c, 0x62, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x09, 0x42, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x4b, 0x6e, 0x6f, 0x74, 0x52, 0x09, 0x42, 0x69, 0x74, 0x74, 0x65, 0x72, 0x45, 0x6e,
	0x64, 0x22, 0x3f, 0x0a, 0x09, 0x42, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x6e, 0x6f, 0x74, 0x12, 0x1e,
	0x0a, 0x04, 0x4c, 0x6f, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x4b, 0x6e, 0x6f, 0x74, 0x52, 0x04, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x75, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x54, 0x75,
	0x72, 0x6e, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x61, 0x74, 0x79, 0x64, 0x69, 0x64, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x75, 0x69,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x6e,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x6d, 0x61, 0x69, 0x6e,
}

var (
	file_knot_proto_rawDescOnce sync.Once
	file_knot_proto_rawDescData = file_knot_proto_rawDesc
)

func file_knot_proto_rawDescGZIP() []byte {
	file_knot_proto_rawDescOnce.Do(func() {
		file_knot_proto_rawDescData = protoimpl.X.CompressGZIP(file_knot_proto_rawDescData)
	})
	return file_knot_proto_rawDescData
}

var file_knot_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_knot_proto_goTypes = []any{
	(*Knot)(nil),      // 0: main.Knot
	(*BightKnot)(nil), // 1: main.BightKnot
}
var file_knot_proto_depIdxs = []int32{
	1, // 0: main.Knot.Bight:type_name -> main.BightKnot
	0, // 1: main.Knot.BitterEnd:type_name -> main.Knot
	0, // 2: main.BightKnot.Loop:type_name -> main.Knot
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_knot_proto_init() }
func file_knot_proto_init() {
	if File_knot_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_knot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_knot_proto_goTypes,
		DependencyIndexes: file_knot_proto_depIdxs,
		MessageInfos:      file_knot_proto_msgTypes,
	}.Build()
	File_knot_proto = out.File
	file_knot_proto_rawDesc = nil
	file_knot_proto_goTypes = nil
	file_knot_proto_depIdxs = nil
}
